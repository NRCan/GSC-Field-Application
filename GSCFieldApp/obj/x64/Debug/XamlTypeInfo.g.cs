//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace GSCFieldApp
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        private global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMetaDataProvider __appProvider;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace GSCFieldApp.GSCFieldApp_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[210];
            _typeNameTable[0] = "Template10.Common.BootStrapper";
            _typeNameTable[1] = "Windows.UI.Xaml.Application";
            _typeNameTable[2] = "Template10.Common.IStateItems";
            _typeNameTable[3] = "Object";
            _typeNameTable[4] = "String";
            _typeNameTable[5] = "Boolean";
            _typeNameTable[6] = "Windows.ApplicationModel.Activation.IActivatedEventArgs";
            _typeNameTable[7] = "Template10.Controls.ModalDialog";
            _typeNameTable[8] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[9] = "Windows.UI.Xaml.UIElement";
            _typeNameTable[10] = "Template10.Services.NavigationService.INavigationService";
            _typeNameTable[11] = "System.Func`2<Windows.ApplicationModel.Activation.SplashScreen, Windows.UI.Xaml.Controls.UserControl>";
            _typeNameTable[12] = "System.MulticastDelegate";
            _typeNameTable[13] = "System.Delegate";
            _typeNameTable[14] = "TimeSpan";
            _typeNameTable[15] = "System.ValueType";
            _typeNameTable[16] = "Template10.Common.BootstrapperStates";
            _typeNameTable[17] = "System.Enum";
            _typeNameTable[18] = "GSCFieldApp.Converters.MandatoryFieldConverter";
            _typeNameTable[19] = "Windows.UI.Color";
            _typeNameTable[20] = "Byte";
            _typeNameTable[21] = "GSCFieldApp.Themes.ExpandPanel";
            _typeNameTable[22] = "Windows.UI.Xaml.CornerRadius";
            _typeNameTable[23] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[24] = "GSCFieldApp.Themes.GridViewItemPanel";
            _typeNameTable[25] = "Windows.UI.Xaml.Controls.Panel";
            _typeNameTable[26] = "Template10.Controls.HamburgerMenu";
            _typeNameTable[27] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[28] = "System.Collections.ObjectModel.ObservableCollection`1<Template10.Controls.HamburgerButtonInfo>";
            _typeNameTable[29] = "System.Collections.ObjectModel.Collection`1<Template10.Controls.HamburgerButtonInfo>";
            _typeNameTable[30] = "Template10.Controls.HamburgerButtonInfo";
            _typeNameTable[31] = "Template10.Mvvm.DependencyBindableBase";
            _typeNameTable[32] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[33] = "Template10.Controls.HamburgerButtonInfo.ButtonTypes";
            _typeNameTable[34] = "Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo";
            _typeNameTable[35] = "System.Windows.Input.ICommand";
            _typeNameTable[36] = "System.Type";
            _typeNameTable[37] = "System.Reflection.MemberInfo";
            _typeNameTable[38] = "Windows.UI.Xaml.Visibility";
            _typeNameTable[39] = "System.Nullable`1<Boolean>";
            _typeNameTable[40] = "Double";
            _typeNameTable[41] = "Windows.UI.Xaml.Controls.SplitViewDisplayMode";
            _typeNameTable[42] = "Windows.UI.Xaml.Controls.Orientation";
            _typeNameTable[43] = "Template10.Controls.HamburgerMenu.OpenCloseModes";
            _typeNameTable[44] = "Windows.UI.Xaml.Thickness";
            _typeNameTable[45] = "Template10.Mvvm.DelegateCommand`1<Template10.Controls.HamburgerButtonInfo>";
            _typeNameTable[46] = "Template10.Controls.PageHeader";
            _typeNameTable[47] = "Windows.UI.Xaml.Controls.CommandBar";
            _typeNameTable[48] = "Template10.Behaviors.EllipsisBehavior.Visibilities";
            _typeNameTable[49] = "Windows.UI.Xaml.Controls.Symbol";
            _typeNameTable[50] = "Windows.UI.Xaml.Controls.Frame";
            _typeNameTable[51] = "Template10.Controls.Resizer";
            _typeNameTable[52] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[53] = "Windows.Foundation.Size";
            _typeNameTable[54] = "GSCFieldApp.CustomResource";
            _typeNameTable[55] = "Windows.UI.Xaml.ResourceDictionary";
            _typeNameTable[56] = "GSCFieldApp.ViewModels.ContentDialogSemanticZoomViewModel";
            _typeNameTable[57] = "Template10.Mvvm.ViewModelBase";
            _typeNameTable[58] = "Template10.Mvvm.BindableBase";
            _typeNameTable[59] = "Windows.UI.Xaml.ElementTheme";
            _typeNameTable[60] = "System.Collections.ObjectModel.ObservableCollection`1<GSCFieldApp.Models.SemanticDataGroup>";
            _typeNameTable[61] = "System.Collections.ObjectModel.Collection`1<GSCFieldApp.Models.SemanticDataGroup>";
            _typeNameTable[62] = "GSCFieldApp.Models.SemanticDataGroup";
            _typeNameTable[63] = "System.Collections.Generic.List`1<GSCFieldApp.Models.SemanticData>";
            _typeNameTable[64] = "GSCFieldApp.Models.SemanticData";
            _typeNameTable[65] = "Template10.Common.IDispatcherWrapper";
            _typeNameTable[66] = "GSCFieldApp.Views.ContentDialogSemanticZoom";
            _typeNameTable[67] = "Windows.UI.Xaml.Controls.ContentDialog";
            _typeNameTable[68] = "GSCFieldApp.Converters.BitmapSourceConverter";
            _typeNameTable[69] = "GSCFieldApp.Converters.VisibilityFromBoolConverter";
            _typeNameTable[70] = "GSCFieldApp.Converters.VisibilityFromReverseBoolConverter";
            _typeNameTable[71] = "GSCFieldApp.Views.DocumentDialog";
            _typeNameTable[72] = "GSCFieldApp.ViewModels.DocumentViewModel";
            _typeNameTable[73] = "GSCFieldApp.Models.FieldNotes";
            _typeNameTable[74] = "GSCFieldApp.Views.EarthmatDialog";
            _typeNameTable[75] = "GSCFieldApp.ViewModels.EarthmatViewModel";
            _typeNameTable[76] = "System.Collections.Generic.List`1<String>";
            _typeNameTable[77] = "GSCFieldApp.Views.FossilDialog";
            _typeNameTable[78] = "GSCFieldApp.ViewModels.FossilViewModel";
            _typeNameTable[79] = "GSCFieldApp.Converters.ReverseBoolConverter";
            _typeNameTable[80] = "GSCFieldApp.Views.LocationDialog";
            _typeNameTable[81] = "GSCFieldApp.ViewModels.LocationViewModel";
            _typeNameTable[82] = "GSCFieldApp.ViewModels.MapPageViewModel";
            _typeNameTable[83] = "Esri.ArcGISRuntime.UI.Controls.MapView";
            _typeNameTable[84] = "Esri.ArcGISRuntime.UI.Controls.GeoView";
            _typeNameTable[85] = "Esri.ArcGISRuntime.Mapping.Map";
            _typeNameTable[86] = "Esri.ArcGISRuntime.Mapping.LayerCollection";
            _typeNameTable[87] = "Esri.ArcGISRuntime.RuntimeObservableCollection`1<Esri.ArcGISRuntime.Mapping.Layer>";
            _typeNameTable[88] = "Esri.ArcGISRuntime.RuntimeCollection`1<Esri.ArcGISRuntime.Mapping.Layer>";
            _typeNameTable[89] = "Esri.ArcGISRuntime.Mapping.Layer";
            _typeNameTable[90] = "Esri.ArcGISRuntime.LoadStatus";
            _typeNameTable[91] = "System.Exception";
            _typeNameTable[92] = "Esri.ArcGISRuntime.Portal.Item";
            _typeNameTable[93] = "Esri.ArcGISRuntime.Geometry.SpatialReference";
            _typeNameTable[94] = "Esri.ArcGISRuntime.Geometry.Envelope";
            _typeNameTable[95] = "Esri.ArcGISRuntime.Geometry.Geometry";
            _typeNameTable[96] = "System.Collections.Generic.IReadOnlyList`1<Esri.ArcGISRuntime.Mapping.ILayerContent>";
            _typeNameTable[97] = "System.Collections.ObjectModel.ObservableCollection`1<GSCFieldApp.Models.Files>";
            _typeNameTable[98] = "System.Collections.ObjectModel.Collection`1<GSCFieldApp.Models.Files>";
            _typeNameTable[99] = "GSCFieldApp.Models.Files";
            _typeNameTable[100] = "Windows.Devices.Geolocation.Geoposition";
            _typeNameTable[101] = "System.Tuple`2<Double, Double>";
            _typeNameTable[102] = "GSCFieldApp.Converters.ScaleConverter";
            _typeNameTable[103] = "GSCFieldApp.Converters.DD2DMSConverter";
            _typeNameTable[104] = "GSCFieldApp.Converters.HorizontalAccuracyConverter";
            _typeNameTable[105] = "GSCFieldApp.Converters.ElevationConverter";
            _typeNameTable[106] = "Esri.ArcGISRuntime.Geometry.Polygon";
            _typeNameTable[107] = "Esri.ArcGISRuntime.Geometry.Multipart";
            _typeNameTable[108] = "Esri.ArcGISRuntime.UI.WrapAroundMode";
            _typeNameTable[109] = "Esri.ArcGISRuntime.UI.ViewLabelProperties";
            _typeNameTable[110] = "Esri.ArcGISRuntime.UI.LocationDisplay";
            _typeNameTable[111] = "Esri.ArcGISRuntime.UI.BackgroundGrid";
            _typeNameTable[112] = "Esri.ArcGISRuntime.UI.Grid";
            _typeNameTable[113] = "Esri.ArcGISRuntime.UI.SketchEditor";
            _typeNameTable[114] = "Esri.ArcGISRuntime.UI.MapViewInteractionOptions";
            _typeNameTable[115] = "Esri.ArcGISRuntime.UI.InteractionOptions";
            _typeNameTable[116] = "Esri.ArcGISRuntime.UI.GraphicsOverlayCollection";
            _typeNameTable[117] = "Esri.ArcGISRuntime.RuntimeObservableCollection`1<Esri.ArcGISRuntime.UI.GraphicsOverlay>";
            _typeNameTable[118] = "Esri.ArcGISRuntime.RuntimeCollection`1<Esri.ArcGISRuntime.UI.GraphicsOverlay>";
            _typeNameTable[119] = "Esri.ArcGISRuntime.UI.GraphicsOverlay";
            _typeNameTable[120] = "Esri.ArcGISRuntime.UI.GraphicCollection";
            _typeNameTable[121] = "Esri.ArcGISRuntime.RuntimeObservableCollection`1<Esri.ArcGISRuntime.UI.Graphic>";
            _typeNameTable[122] = "Esri.ArcGISRuntime.RuntimeCollection`1<Esri.ArcGISRuntime.UI.Graphic>";
            _typeNameTable[123] = "Esri.ArcGISRuntime.UI.Graphic";
            _typeNameTable[124] = "Esri.ArcGISRuntime.Data.GeoElement";
            _typeNameTable[125] = "Esri.ArcGISRuntime.Symbology.Symbol";
            _typeNameTable[126] = "Int32";
            _typeNameTable[127] = "System.Collections.Generic.IDictionary`2<String, Object>";
            _typeNameTable[128] = "Esri.ArcGISRuntime.UI.GraphicsRenderingMode";
            _typeNameTable[129] = "System.Drawing.Color";
            _typeNameTable[130] = "Esri.ArcGISRuntime.Symbology.Renderer";
            _typeNameTable[131] = "Esri.ArcGISRuntime.Mapping.Popups.PopupDefinition";
            _typeNameTable[132] = "Esri.ArcGISRuntime.Mapping.LayerSceneProperties";
            _typeNameTable[133] = "System.Collections.Generic.IEnumerable`1<Esri.ArcGISRuntime.UI.Graphic>";
            _typeNameTable[134] = "System.Collections.Generic.IList`1<Esri.ArcGISRuntime.Mapping.LabelDefinition>";
            _typeNameTable[135] = "Esri.ArcGISRuntime.Mapping.LabelDefinition";
            _typeNameTable[136] = "Esri.ArcGISRuntime.UI.DrawStatus";
            _typeNameTable[137] = "Esri.ArcGISRuntime.TimeExtent";
            _typeNameTable[138] = "Esri.ArcGISRuntime.UI.Controls.OverlayItemsControl";
            _typeNameTable[139] = "Esri.ArcGISRuntime.UI.Controls.OverlayItemsCollection";
            _typeNameTable[140] = "System.Collections.ObjectModel.ObservableCollection`1<Object>";
            _typeNameTable[141] = "System.Collections.ObjectModel.Collection`1<Object>";
            _typeNameTable[142] = "Esri.ArcGISRuntime.UI.SelectionProperties";
            _typeNameTable[143] = "Esri.ArcGISRuntime.Geometry.MapPoint";
            _typeNameTable[144] = "Windows.UI.Xaml.FrameworkElement";
            _typeNameTable[145] = "Esri.ArcGISRuntime.Toolkit.UI.Controls.ScaleLine";
            _typeNameTable[146] = "GSCFieldApp.Views.MapPage";
            _typeNameTable[147] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[148] = "GSCFieldApp.Views.MineralizationAlterationDialog";
            _typeNameTable[149] = "GSCFieldApp.ViewModels.MineralizationAlterationViewModel";
            _typeNameTable[150] = "GSCFieldApp.Views.MineralDialog";
            _typeNameTable[151] = "GSCFieldApp.ViewModels.MineralViewModel";
            _typeNameTable[152] = "GSCFieldApp.Views.PaleoflowDialog";
            _typeNameTable[153] = "GSCFieldApp.ViewModels.PaleoflowViewModel";
            _typeNameTable[154] = "GSCFieldApp.Converters.PicklistDescriptionConverter";
            _typeNameTable[155] = "GSCFieldApp.Converters.PicklistDefaultValueConverter";
            _typeNameTable[156] = "GSCFieldApp.Views.PicklistDialog";
            _typeNameTable[157] = "GSCFieldApp.Converters.SolidColorBrushConverter";
            _typeNameTable[158] = "GSCFieldApp.Converters.MediaBrushConverter";
            _typeNameTable[159] = "GSCFieldApp.Converters.TextWithDegreeConverter";
            _typeNameTable[160] = "GSCFieldApp.Converters.TextWithAzimDegreeConverter";
            _typeNameTable[161] = "GSCFieldApp.Converters.TextWithPercentageConverter";
            _typeNameTable[162] = "GSCFieldApp.Views.ReportPage";
            _typeNameTable[163] = "GSCFieldApp.ViewModels.FieldNotesViewModel";
            _typeNameTable[164] = "GSCFieldApp.Views.SampleDialog";
            _typeNameTable[165] = "GSCFieldApp.ViewModels.SampleViewModel";
            _typeNameTable[166] = "GSCFieldApp.ViewModels.FieldBooksPageViewModel";
            _typeNameTable[167] = "System.Collections.ObjectModel.ObservableCollection`1<GSCFieldApp.Models.FieldBooks>";
            _typeNameTable[168] = "System.Collections.ObjectModel.Collection`1<GSCFieldApp.Models.FieldBooks>";
            _typeNameTable[169] = "GSCFieldApp.Models.FieldBooks";
            _typeNameTable[170] = "GSCFieldApp.Models.Metadata";
            _typeNameTable[171] = "GSCFieldApp.Views.FieldBooksPage";
            _typeNameTable[172] = "GSCFieldApp.ViewModels.SettingsPageViewModel";
            _typeNameTable[173] = "GSCFieldApp.ViewModels.SettingsPartViewModel";
            _typeNameTable[174] = "GSCFieldApp.ViewModels.AboutPartViewModel";
            _typeNameTable[175] = "GSCFieldApp.ViewModels.PicklistPartViewModel";
            _typeNameTable[176] = "GSCFieldApp.Views.SettingsPage";
            _typeNameTable[177] = "GSCFieldApp.Views.Shell";
            _typeNameTable[178] = "GSCFieldApp.ViewModels.ShellViewModel";
            _typeNameTable[179] = "GSCFieldApp.Views.Splash";
            _typeNameTable[180] = "GSCFieldApp.Views.StationDataPart";
            _typeNameTable[181] = "GSCFieldApp.ViewModels.StationViewModel";
            _typeNameTable[182] = "GSCFieldApp.Models.FieldLocation";
            _typeNameTable[183] = "GSCFieldApp.Converters.String2Number";
            _typeNameTable[184] = "GSCFieldApp.Views.StructureDialog";
            _typeNameTable[185] = "GSCFieldApp.ViewModels.StructureViewModel";
            _typeNameTable[186] = "GSCFieldApp.Views.FieldBookDialog";
            _typeNameTable[187] = "GSCFieldApp.ViewModels.FieldBookDialogViewModel";
            _typeNameTable[188] = "Esri.ArcGISRuntime.Symbology.PictureFillSymbol";
            _typeNameTable[189] = "Esri.ArcGISRuntime.Symbology.FillSymbol";
            _typeNameTable[190] = "System.Uri";
            _typeNameTable[191] = "Esri.ArcGISRuntime.Symbology.LineSymbol";
            _typeNameTable[192] = "Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol";
            _typeNameTable[193] = "Esri.ArcGISRuntime.Symbology.MarkerSymbol";
            _typeNameTable[194] = "Esri.ArcGISRuntime.Symbology.SymbolAngleAlignment";
            _typeNameTable[195] = "Esri.ArcGISRuntime.Symbology.RotationType";
            _typeNameTable[196] = "Esri.ArcGISRuntime.Symbology.SimpleFillSymbol";
            _typeNameTable[197] = "Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle";
            _typeNameTable[198] = "Esri.ArcGISRuntime.Symbology.SimpleLineSymbol";
            _typeNameTable[199] = "Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle";
            _typeNameTable[200] = "Esri.ArcGISRuntime.Symbology.SimpleLineSymbolMarkerPlacement";
            _typeNameTable[201] = "Esri.ArcGISRuntime.Symbology.SimpleLineSymbolMarkerStyle";
            _typeNameTable[202] = "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol";
            _typeNameTable[203] = "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle";
            _typeNameTable[204] = "Esri.ArcGISRuntime.Symbology.TextSymbol";
            _typeNameTable[205] = "Esri.ArcGISRuntime.Symbology.FontDecoration";
            _typeNameTable[206] = "Esri.ArcGISRuntime.Symbology.FontStyle";
            _typeNameTable[207] = "Esri.ArcGISRuntime.Symbology.FontWeight";
            _typeNameTable[208] = "Esri.ArcGISRuntime.Symbology.HorizontalAlignment";
            _typeNameTable[209] = "Esri.ArcGISRuntime.Symbology.VerticalAlignment";

            _typeTable = new global::System.Type[210];
            _typeTable[0] = typeof(global::Template10.Common.BootStrapper);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Application);
            _typeTable[2] = typeof(global::Template10.Common.IStateItems);
            _typeTable[3] = typeof(global::System.Object);
            _typeTable[4] = typeof(global::System.String);
            _typeTable[5] = typeof(global::System.Boolean);
            _typeTable[6] = typeof(global::Windows.ApplicationModel.Activation.IActivatedEventArgs);
            _typeTable[7] = typeof(global::Template10.Controls.ModalDialog);
            _typeTable[8] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[9] = typeof(global::Windows.UI.Xaml.UIElement);
            _typeTable[10] = typeof(global::Template10.Services.NavigationService.INavigationService);
            _typeTable[11] = typeof(global::System.Func<global::Windows.ApplicationModel.Activation.SplashScreen, global::Windows.UI.Xaml.Controls.UserControl>);
            _typeTable[12] = typeof(global::System.MulticastDelegate);
            _typeTable[13] = typeof(global::System.Delegate);
            _typeTable[14] = typeof(global::System.TimeSpan);
            _typeTable[15] = typeof(global::System.ValueType);
            _typeTable[16] = typeof(global::Template10.Common.BootstrapperStates);
            _typeTable[17] = typeof(global::System.Enum);
            _typeTable[18] = typeof(global::GSCFieldApp.Converters.MandatoryFieldConverter);
            _typeTable[19] = typeof(global::Windows.UI.Color);
            _typeTable[20] = typeof(global::System.Byte);
            _typeTable[21] = typeof(global::GSCFieldApp.Themes.ExpandPanel);
            _typeTable[22] = typeof(global::Windows.UI.Xaml.CornerRadius);
            _typeTable[23] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[24] = typeof(global::GSCFieldApp.Themes.GridViewItemPanel);
            _typeTable[25] = typeof(global::Windows.UI.Xaml.Controls.Panel);
            _typeTable[26] = typeof(global::Template10.Controls.HamburgerMenu);
            _typeTable[27] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[28] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Template10.Controls.HamburgerButtonInfo>);
            _typeTable[29] = typeof(global::System.Collections.ObjectModel.Collection<global::Template10.Controls.HamburgerButtonInfo>);
            _typeTable[30] = typeof(global::Template10.Controls.HamburgerButtonInfo);
            _typeTable[31] = typeof(global::Template10.Mvvm.DependencyBindableBase);
            _typeTable[32] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[33] = typeof(global::Template10.Controls.HamburgerButtonInfo.ButtonTypes);
            _typeTable[34] = typeof(global::Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo);
            _typeTable[35] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[36] = typeof(global::System.Type);
            _typeTable[37] = typeof(global::System.Reflection.MemberInfo);
            _typeTable[38] = typeof(global::Windows.UI.Xaml.Visibility);
            _typeTable[39] = typeof(global::System.Nullable<global::System.Boolean>);
            _typeTable[40] = typeof(global::System.Double);
            _typeTable[41] = typeof(global::Windows.UI.Xaml.Controls.SplitViewDisplayMode);
            _typeTable[42] = typeof(global::Windows.UI.Xaml.Controls.Orientation);
            _typeTable[43] = typeof(global::Template10.Controls.HamburgerMenu.OpenCloseModes);
            _typeTable[44] = typeof(global::Windows.UI.Xaml.Thickness);
            _typeTable[45] = typeof(global::Template10.Mvvm.DelegateCommand<global::Template10.Controls.HamburgerButtonInfo>);
            _typeTable[46] = typeof(global::Template10.Controls.PageHeader);
            _typeTable[47] = typeof(global::Windows.UI.Xaml.Controls.CommandBar);
            _typeTable[48] = typeof(global::Template10.Behaviors.EllipsisBehavior.Visibilities);
            _typeTable[49] = typeof(global::Windows.UI.Xaml.Controls.Symbol);
            _typeTable[50] = typeof(global::Windows.UI.Xaml.Controls.Frame);
            _typeTable[51] = typeof(global::Template10.Controls.Resizer);
            _typeTable[52] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[53] = typeof(global::Windows.Foundation.Size);
            _typeTable[54] = typeof(global::GSCFieldApp.CustomResource);
            _typeTable[55] = typeof(global::Windows.UI.Xaml.ResourceDictionary);
            _typeTable[56] = typeof(global::GSCFieldApp.ViewModels.ContentDialogSemanticZoomViewModel);
            _typeTable[57] = typeof(global::Template10.Mvvm.ViewModelBase);
            _typeTable[58] = typeof(global::Template10.Mvvm.BindableBase);
            _typeTable[59] = typeof(global::Windows.UI.Xaml.ElementTheme);
            _typeTable[60] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.SemanticDataGroup>);
            _typeTable[61] = typeof(global::System.Collections.ObjectModel.Collection<global::GSCFieldApp.Models.SemanticDataGroup>);
            _typeTable[62] = typeof(global::GSCFieldApp.Models.SemanticDataGroup);
            _typeTable[63] = typeof(global::System.Collections.Generic.List<global::GSCFieldApp.Models.SemanticData>);
            _typeTable[64] = typeof(global::GSCFieldApp.Models.SemanticData);
            _typeTable[65] = typeof(global::Template10.Common.IDispatcherWrapper);
            _typeTable[66] = typeof(global::GSCFieldApp.Views.ContentDialogSemanticZoom);
            _typeTable[67] = typeof(global::Windows.UI.Xaml.Controls.ContentDialog);
            _typeTable[68] = typeof(global::GSCFieldApp.Converters.BitmapSourceConverter);
            _typeTable[69] = typeof(global::GSCFieldApp.Converters.VisibilityFromBoolConverter);
            _typeTable[70] = typeof(global::GSCFieldApp.Converters.VisibilityFromReverseBoolConverter);
            _typeTable[71] = typeof(global::GSCFieldApp.Views.DocumentDialog);
            _typeTable[72] = typeof(global::GSCFieldApp.ViewModels.DocumentViewModel);
            _typeTable[73] = typeof(global::GSCFieldApp.Models.FieldNotes);
            _typeTable[74] = typeof(global::GSCFieldApp.Views.EarthmatDialog);
            _typeTable[75] = typeof(global::GSCFieldApp.ViewModels.EarthmatViewModel);
            _typeTable[76] = typeof(global::System.Collections.Generic.List<global::System.String>);
            _typeTable[77] = typeof(global::GSCFieldApp.Views.FossilDialog);
            _typeTable[78] = typeof(global::GSCFieldApp.ViewModels.FossilViewModel);
            _typeTable[79] = typeof(global::GSCFieldApp.Converters.ReverseBoolConverter);
            _typeTable[80] = typeof(global::GSCFieldApp.Views.LocationDialog);
            _typeTable[81] = typeof(global::GSCFieldApp.ViewModels.LocationViewModel);
            _typeTable[82] = typeof(global::GSCFieldApp.ViewModels.MapPageViewModel);
            _typeTable[83] = typeof(global::Esri.ArcGISRuntime.UI.Controls.MapView);
            _typeTable[84] = typeof(global::Esri.ArcGISRuntime.UI.Controls.GeoView);
            _typeTable[85] = typeof(global::Esri.ArcGISRuntime.Mapping.Map);
            _typeTable[86] = typeof(global::Esri.ArcGISRuntime.Mapping.LayerCollection);
            _typeTable[87] = typeof(global::Esri.ArcGISRuntime.RuntimeObservableCollection<global::Esri.ArcGISRuntime.Mapping.Layer>);
            _typeTable[88] = typeof(global::Esri.ArcGISRuntime.RuntimeCollection<global::Esri.ArcGISRuntime.Mapping.Layer>);
            _typeTable[89] = typeof(global::Esri.ArcGISRuntime.Mapping.Layer);
            _typeTable[90] = typeof(global::Esri.ArcGISRuntime.LoadStatus);
            _typeTable[91] = typeof(global::System.Exception);
            _typeTable[92] = typeof(global::Esri.ArcGISRuntime.Portal.Item);
            _typeTable[93] = typeof(global::Esri.ArcGISRuntime.Geometry.SpatialReference);
            _typeTable[94] = typeof(global::Esri.ArcGISRuntime.Geometry.Envelope);
            _typeTable[95] = typeof(global::Esri.ArcGISRuntime.Geometry.Geometry);
            _typeTable[96] = typeof(global::System.Collections.Generic.IReadOnlyList<global::Esri.ArcGISRuntime.Mapping.ILayerContent>);
            _typeTable[97] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.Files>);
            _typeTable[98] = typeof(global::System.Collections.ObjectModel.Collection<global::GSCFieldApp.Models.Files>);
            _typeTable[99] = typeof(global::GSCFieldApp.Models.Files);
            _typeTable[100] = typeof(global::Windows.Devices.Geolocation.Geoposition);
            _typeTable[101] = typeof(global::System.Tuple<global::System.Double, global::System.Double>);
            _typeTable[102] = typeof(global::GSCFieldApp.Converters.ScaleConverter);
            _typeTable[103] = typeof(global::GSCFieldApp.Converters.DD2DMSConverter);
            _typeTable[104] = typeof(global::GSCFieldApp.Converters.HorizontalAccuracyConverter);
            _typeTable[105] = typeof(global::GSCFieldApp.Converters.ElevationConverter);
            _typeTable[106] = typeof(global::Esri.ArcGISRuntime.Geometry.Polygon);
            _typeTable[107] = typeof(global::Esri.ArcGISRuntime.Geometry.Multipart);
            _typeTable[108] = typeof(global::Esri.ArcGISRuntime.UI.WrapAroundMode);
            _typeTable[109] = typeof(global::Esri.ArcGISRuntime.UI.ViewLabelProperties);
            _typeTable[110] = typeof(global::Esri.ArcGISRuntime.UI.LocationDisplay);
            _typeTable[111] = typeof(global::Esri.ArcGISRuntime.UI.BackgroundGrid);
            _typeTable[112] = typeof(global::Esri.ArcGISRuntime.UI.Grid);
            _typeTable[113] = typeof(global::Esri.ArcGISRuntime.UI.SketchEditor);
            _typeTable[114] = typeof(global::Esri.ArcGISRuntime.UI.MapViewInteractionOptions);
            _typeTable[115] = typeof(global::Esri.ArcGISRuntime.UI.InteractionOptions);
            _typeTable[116] = typeof(global::Esri.ArcGISRuntime.UI.GraphicsOverlayCollection);
            _typeTable[117] = typeof(global::Esri.ArcGISRuntime.RuntimeObservableCollection<global::Esri.ArcGISRuntime.UI.GraphicsOverlay>);
            _typeTable[118] = typeof(global::Esri.ArcGISRuntime.RuntimeCollection<global::Esri.ArcGISRuntime.UI.GraphicsOverlay>);
            _typeTable[119] = typeof(global::Esri.ArcGISRuntime.UI.GraphicsOverlay);
            _typeTable[120] = typeof(global::Esri.ArcGISRuntime.UI.GraphicCollection);
            _typeTable[121] = typeof(global::Esri.ArcGISRuntime.RuntimeObservableCollection<global::Esri.ArcGISRuntime.UI.Graphic>);
            _typeTable[122] = typeof(global::Esri.ArcGISRuntime.RuntimeCollection<global::Esri.ArcGISRuntime.UI.Graphic>);
            _typeTable[123] = typeof(global::Esri.ArcGISRuntime.UI.Graphic);
            _typeTable[124] = typeof(global::Esri.ArcGISRuntime.Data.GeoElement);
            _typeTable[125] = typeof(global::Esri.ArcGISRuntime.Symbology.Symbol);
            _typeTable[126] = typeof(global::System.Int32);
            _typeTable[127] = typeof(global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>);
            _typeTable[128] = typeof(global::Esri.ArcGISRuntime.UI.GraphicsRenderingMode);
            _typeTable[129] = typeof(global::System.Drawing.Color);
            _typeTable[130] = typeof(global::Esri.ArcGISRuntime.Symbology.Renderer);
            _typeTable[131] = typeof(global::Esri.ArcGISRuntime.Mapping.Popups.PopupDefinition);
            _typeTable[132] = typeof(global::Esri.ArcGISRuntime.Mapping.LayerSceneProperties);
            _typeTable[133] = typeof(global::System.Collections.Generic.IEnumerable<global::Esri.ArcGISRuntime.UI.Graphic>);
            _typeTable[134] = typeof(global::System.Collections.Generic.IList<global::Esri.ArcGISRuntime.Mapping.LabelDefinition>);
            _typeTable[135] = typeof(global::Esri.ArcGISRuntime.Mapping.LabelDefinition);
            _typeTable[136] = typeof(global::Esri.ArcGISRuntime.UI.DrawStatus);
            _typeTable[137] = typeof(global::Esri.ArcGISRuntime.TimeExtent);
            _typeTable[138] = typeof(global::Esri.ArcGISRuntime.UI.Controls.OverlayItemsControl);
            _typeTable[139] = typeof(global::Esri.ArcGISRuntime.UI.Controls.OverlayItemsCollection);
            _typeTable[140] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::System.Object>);
            _typeTable[141] = typeof(global::System.Collections.ObjectModel.Collection<global::System.Object>);
            _typeTable[142] = typeof(global::Esri.ArcGISRuntime.UI.SelectionProperties);
            _typeTable[143] = typeof(global::Esri.ArcGISRuntime.Geometry.MapPoint);
            _typeTable[144] = typeof(global::Windows.UI.Xaml.FrameworkElement);
            _typeTable[145] = typeof(global::Esri.ArcGISRuntime.Toolkit.UI.Controls.ScaleLine);
            _typeTable[146] = typeof(global::GSCFieldApp.Views.MapPage);
            _typeTable[147] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[148] = typeof(global::GSCFieldApp.Views.MineralizationAlterationDialog);
            _typeTable[149] = typeof(global::GSCFieldApp.ViewModels.MineralizationAlterationViewModel);
            _typeTable[150] = typeof(global::GSCFieldApp.Views.MineralDialog);
            _typeTable[151] = typeof(global::GSCFieldApp.ViewModels.MineralViewModel);
            _typeTable[152] = typeof(global::GSCFieldApp.Views.PaleoflowDialog);
            _typeTable[153] = typeof(global::GSCFieldApp.ViewModels.PaleoflowViewModel);
            _typeTable[154] = typeof(global::GSCFieldApp.Converters.PicklistDescriptionConverter);
            _typeTable[155] = typeof(global::GSCFieldApp.Converters.PicklistDefaultValueConverter);
            _typeTable[156] = typeof(global::GSCFieldApp.Views.PicklistDialog);
            _typeTable[157] = typeof(global::GSCFieldApp.Converters.SolidColorBrushConverter);
            _typeTable[158] = typeof(global::GSCFieldApp.Converters.MediaBrushConverter);
            _typeTable[159] = typeof(global::GSCFieldApp.Converters.TextWithDegreeConverter);
            _typeTable[160] = typeof(global::GSCFieldApp.Converters.TextWithAzimDegreeConverter);
            _typeTable[161] = typeof(global::GSCFieldApp.Converters.TextWithPercentageConverter);
            _typeTable[162] = typeof(global::GSCFieldApp.Views.ReportPage);
            _typeTable[163] = typeof(global::GSCFieldApp.ViewModels.FieldNotesViewModel);
            _typeTable[164] = typeof(global::GSCFieldApp.Views.SampleDialog);
            _typeTable[165] = typeof(global::GSCFieldApp.ViewModels.SampleViewModel);
            _typeTable[166] = typeof(global::GSCFieldApp.ViewModels.FieldBooksPageViewModel);
            _typeTable[167] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldBooks>);
            _typeTable[168] = typeof(global::System.Collections.ObjectModel.Collection<global::GSCFieldApp.Models.FieldBooks>);
            _typeTable[169] = typeof(global::GSCFieldApp.Models.FieldBooks);
            _typeTable[170] = typeof(global::GSCFieldApp.Models.Metadata);
            _typeTable[171] = typeof(global::GSCFieldApp.Views.FieldBooksPage);
            _typeTable[172] = typeof(global::GSCFieldApp.ViewModels.SettingsPageViewModel);
            _typeTable[173] = typeof(global::GSCFieldApp.ViewModels.SettingsPartViewModel);
            _typeTable[174] = typeof(global::GSCFieldApp.ViewModels.AboutPartViewModel);
            _typeTable[175] = typeof(global::GSCFieldApp.ViewModels.PicklistPartViewModel);
            _typeTable[176] = typeof(global::GSCFieldApp.Views.SettingsPage);
            _typeTable[177] = typeof(global::GSCFieldApp.Views.Shell);
            _typeTable[178] = typeof(global::GSCFieldApp.ViewModels.ShellViewModel);
            _typeTable[179] = typeof(global::GSCFieldApp.Views.Splash);
            _typeTable[180] = typeof(global::GSCFieldApp.Views.StationDataPart);
            _typeTable[181] = typeof(global::GSCFieldApp.ViewModels.StationViewModel);
            _typeTable[182] = typeof(global::GSCFieldApp.Models.FieldLocation);
            _typeTable[183] = typeof(global::GSCFieldApp.Converters.String2Number);
            _typeTable[184] = typeof(global::GSCFieldApp.Views.StructureDialog);
            _typeTable[185] = typeof(global::GSCFieldApp.ViewModels.StructureViewModel);
            _typeTable[186] = typeof(global::GSCFieldApp.Views.FieldBookDialog);
            _typeTable[187] = typeof(global::GSCFieldApp.ViewModels.FieldBookDialogViewModel);
            _typeTable[188] = typeof(global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol);
            _typeTable[189] = typeof(global::Esri.ArcGISRuntime.Symbology.FillSymbol);
            _typeTable[190] = typeof(global::System.Uri);
            _typeTable[191] = typeof(global::Esri.ArcGISRuntime.Symbology.LineSymbol);
            _typeTable[192] = typeof(global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol);
            _typeTable[193] = typeof(global::Esri.ArcGISRuntime.Symbology.MarkerSymbol);
            _typeTable[194] = typeof(global::Esri.ArcGISRuntime.Symbology.SymbolAngleAlignment);
            _typeTable[195] = typeof(global::Esri.ArcGISRuntime.Symbology.RotationType);
            _typeTable[196] = typeof(global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbol);
            _typeTable[197] = typeof(global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle);
            _typeTable[198] = typeof(global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol);
            _typeTable[199] = typeof(global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle);
            _typeTable[200] = typeof(global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbolMarkerPlacement);
            _typeTable[201] = typeof(global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbolMarkerStyle);
            _typeTable[202] = typeof(global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol);
            _typeTable[203] = typeof(global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle);
            _typeTable[204] = typeof(global::Esri.ArcGISRuntime.Symbology.TextSymbol);
            _typeTable[205] = typeof(global::Esri.ArcGISRuntime.Symbology.FontDecoration);
            _typeTable[206] = typeof(global::Esri.ArcGISRuntime.Symbology.FontStyle);
            _typeTable[207] = typeof(global::Esri.ArcGISRuntime.Symbology.FontWeight);
            _typeTable[208] = typeof(global::Esri.ArcGISRuntime.Symbology.HorizontalAlignment);
            _typeTable[209] = typeof(global::Esri.ArcGISRuntime.Symbology.VerticalAlignment);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            get
            {
                if (_Provider == null)
                {
                    _Provider = new global::Microsoft.UI.Xaml.Markup.ReflectionXamlMetadataProvider();
                }
                return _Provider;
            }
        }

        private object Activate_7_ModalDialog() { return new global::Template10.Controls.ModalDialog(); }
        private object Activate_18_MandatoryFieldConverter() { return new global::GSCFieldApp.Converters.MandatoryFieldConverter(); }
        private object Activate_21_ExpandPanel() { return new global::GSCFieldApp.Themes.ExpandPanel(); }
        private object Activate_24_GridViewItemPanel() { return new global::GSCFieldApp.Themes.GridViewItemPanel(); }
        private object Activate_26_HamburgerMenu() { return new global::Template10.Controls.HamburgerMenu(); }
        private object Activate_28_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Template10.Controls.HamburgerButtonInfo>(); }
        private object Activate_29_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Template10.Controls.HamburgerButtonInfo>(); }
        private object Activate_30_HamburgerButtonInfo() { return new global::Template10.Controls.HamburgerButtonInfo(); }
        private object Activate_46_PageHeader() { return new global::Template10.Controls.PageHeader(); }
        private object Activate_51_Resizer() { return new global::Template10.Controls.Resizer(); }
        private object Activate_54_CustomResource() { return new global::GSCFieldApp.CustomResource(); }
        private object Activate_56_ContentDialogSemanticZoomViewModel() { return new global::GSCFieldApp.ViewModels.ContentDialogSemanticZoomViewModel(); }
        private object Activate_60_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.SemanticDataGroup>(); }
        private object Activate_61_Collection() { return new global::System.Collections.ObjectModel.Collection<global::GSCFieldApp.Models.SemanticDataGroup>(); }
        private object Activate_62_SemanticDataGroup() { return new global::GSCFieldApp.Models.SemanticDataGroup(); }
        private object Activate_63_List() { return new global::System.Collections.Generic.List<global::GSCFieldApp.Models.SemanticData>(); }
        private object Activate_68_BitmapSourceConverter() { return new global::GSCFieldApp.Converters.BitmapSourceConverter(); }
        private object Activate_69_VisibilityFromBoolConverter() { return new global::GSCFieldApp.Converters.VisibilityFromBoolConverter(); }
        private object Activate_70_VisibilityFromReverseBoolConverter() { return new global::GSCFieldApp.Converters.VisibilityFromReverseBoolConverter(); }
        private object Activate_73_FieldNotes() { return new global::GSCFieldApp.Models.FieldNotes(); }
        private object Activate_76_List() { return new global::System.Collections.Generic.List<global::System.String>(); }
        private object Activate_79_ReverseBoolConverter() { return new global::GSCFieldApp.Converters.ReverseBoolConverter(); }
        private object Activate_82_MapPageViewModel() { return new global::GSCFieldApp.ViewModels.MapPageViewModel(); }
        private object Activate_83_MapView() { return new global::Esri.ArcGISRuntime.UI.Controls.MapView(); }
        private object Activate_85_Map() { return new global::Esri.ArcGISRuntime.Mapping.Map(); }
        private object Activate_86_LayerCollection() { return new global::Esri.ArcGISRuntime.Mapping.LayerCollection(); }
        private object Activate_91_Exception() { return new global::System.Exception(); }
        private object Activate_97_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.Files>(); }
        private object Activate_98_Collection() { return new global::System.Collections.ObjectModel.Collection<global::GSCFieldApp.Models.Files>(); }
        private object Activate_99_Files() { return new global::GSCFieldApp.Models.Files(); }
        private object Activate_102_ScaleConverter() { return new global::GSCFieldApp.Converters.ScaleConverter(); }
        private object Activate_103_DD2DMSConverter() { return new global::GSCFieldApp.Converters.DD2DMSConverter(); }
        private object Activate_104_HorizontalAccuracyConverter() { return new global::GSCFieldApp.Converters.HorizontalAccuracyConverter(); }
        private object Activate_105_ElevationConverter() { return new global::GSCFieldApp.Converters.ElevationConverter(); }
        private object Activate_109_ViewLabelProperties() { return new global::Esri.ArcGISRuntime.UI.ViewLabelProperties(); }
        private object Activate_111_BackgroundGrid() { return new global::Esri.ArcGISRuntime.UI.BackgroundGrid(); }
        private object Activate_113_SketchEditor() { return new global::Esri.ArcGISRuntime.UI.SketchEditor(); }
        private object Activate_114_MapViewInteractionOptions() { return new global::Esri.ArcGISRuntime.UI.MapViewInteractionOptions(); }
        private object Activate_116_GraphicsOverlayCollection() { return new global::Esri.ArcGISRuntime.UI.GraphicsOverlayCollection(); }
        private object Activate_119_GraphicsOverlay() { return new global::Esri.ArcGISRuntime.UI.GraphicsOverlay(); }
        private object Activate_123_Graphic() { return new global::Esri.ArcGISRuntime.UI.Graphic(); }
        private object Activate_131_PopupDefinition() { return new global::Esri.ArcGISRuntime.Mapping.Popups.PopupDefinition(); }
        private object Activate_132_LayerSceneProperties() { return new global::Esri.ArcGISRuntime.Mapping.LayerSceneProperties(); }
        private object Activate_138_OverlayItemsControl() { return new global::Esri.ArcGISRuntime.UI.Controls.OverlayItemsControl(); }
        private object Activate_140_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::System.Object>(); }
        private object Activate_141_Collection() { return new global::System.Collections.ObjectModel.Collection<global::System.Object>(); }
        private object Activate_142_SelectionProperties() { return new global::Esri.ArcGISRuntime.UI.SelectionProperties(); }
        private object Activate_145_ScaleLine() { return new global::Esri.ArcGISRuntime.Toolkit.UI.Controls.ScaleLine(); }
        private object Activate_146_MapPage() { return new global::GSCFieldApp.Views.MapPage(); }
        private object Activate_154_PicklistDescriptionConverter() { return new global::GSCFieldApp.Converters.PicklistDescriptionConverter(); }
        private object Activate_155_PicklistDefaultValueConverter() { return new global::GSCFieldApp.Converters.PicklistDefaultValueConverter(); }
        private object Activate_157_SolidColorBrushConverter() { return new global::GSCFieldApp.Converters.SolidColorBrushConverter(); }
        private object Activate_158_MediaBrushConverter() { return new global::GSCFieldApp.Converters.MediaBrushConverter(); }
        private object Activate_159_TextWithDegreeConverter() { return new global::GSCFieldApp.Converters.TextWithDegreeConverter(); }
        private object Activate_160_TextWithAzimDegreeConverter() { return new global::GSCFieldApp.Converters.TextWithAzimDegreeConverter(); }
        private object Activate_161_TextWithPercentageConverter() { return new global::GSCFieldApp.Converters.TextWithPercentageConverter(); }
        private object Activate_162_ReportPage() { return new global::GSCFieldApp.Views.ReportPage(); }
        private object Activate_163_FieldNotesViewModel() { return new global::GSCFieldApp.ViewModels.FieldNotesViewModel(); }
        private object Activate_166_FieldBooksPageViewModel() { return new global::GSCFieldApp.ViewModels.FieldBooksPageViewModel(); }
        private object Activate_167_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldBooks>(); }
        private object Activate_168_Collection() { return new global::System.Collections.ObjectModel.Collection<global::GSCFieldApp.Models.FieldBooks>(); }
        private object Activate_169_FieldBooks() { return new global::GSCFieldApp.Models.FieldBooks(); }
        private object Activate_170_Metadata() { return new global::GSCFieldApp.Models.Metadata(); }
        private object Activate_171_FieldBooksPage() { return new global::GSCFieldApp.Views.FieldBooksPage(); }
        private object Activate_172_SettingsPageViewModel() { return new global::GSCFieldApp.ViewModels.SettingsPageViewModel(); }
        private object Activate_173_SettingsPartViewModel() { return new global::GSCFieldApp.ViewModels.SettingsPartViewModel(); }
        private object Activate_174_AboutPartViewModel() { return new global::GSCFieldApp.ViewModels.AboutPartViewModel(); }
        private object Activate_175_PicklistPartViewModel() { return new global::GSCFieldApp.ViewModels.PicklistPartViewModel(); }
        private object Activate_176_SettingsPage() { return new global::GSCFieldApp.Views.SettingsPage(); }
        private object Activate_177_Shell() { return new global::GSCFieldApp.Views.Shell(); }
        private object Activate_178_ShellViewModel() { return new global::GSCFieldApp.ViewModels.ShellViewModel(); }
        private object Activate_182_FieldLocation() { return new global::GSCFieldApp.Models.FieldLocation(); }
        private object Activate_183_String2Number() { return new global::GSCFieldApp.Converters.String2Number(); }
        private object Activate_187_FieldBookDialogViewModel() { return new global::GSCFieldApp.ViewModels.FieldBookDialogViewModel(); }
        private object Activate_196_SimpleFillSymbol() { return new global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbol(); }
        private object Activate_198_SimpleLineSymbol() { return new global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol(); }
        private object Activate_202_SimpleMarkerSymbol() { return new global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol(); }
        private object Activate_204_TextSymbol() { return new global::Esri.ArcGISRuntime.Symbology.TextSymbol(); }
        private void MapAdd_2_IStateItems(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_28_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Template10.Controls.HamburgerButtonInfo>)instance;
            var newItem = (global::Template10.Controls.HamburgerButtonInfo)item;
            collection.Add(newItem);
        }
        private void VectorAdd_29_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Template10.Controls.HamburgerButtonInfo>)instance;
            var newItem = (global::Template10.Controls.HamburgerButtonInfo)item;
            collection.Add(newItem);
        }
        private void MapAdd_54_CustomResource(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.Object, global::System.Object>)instance;
            var newKey = (global::System.Object)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_60_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::GSCFieldApp.Models.SemanticDataGroup>)instance;
            var newItem = (global::GSCFieldApp.Models.SemanticDataGroup)item;
            collection.Add(newItem);
        }
        private void VectorAdd_61_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::GSCFieldApp.Models.SemanticDataGroup>)instance;
            var newItem = (global::GSCFieldApp.Models.SemanticDataGroup)item;
            collection.Add(newItem);
        }
        private void VectorAdd_63_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::GSCFieldApp.Models.SemanticData>)instance;
            var newItem = (global::GSCFieldApp.Models.SemanticData)item;
            collection.Add(newItem);
        }
        private void VectorAdd_76_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.String>)instance;
            var newItem = (global::System.String)item;
            collection.Add(newItem);
        }
        private void VectorAdd_86_LayerCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Mapping.Layer>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Mapping.Layer)item;
            collection.Add(newItem);
        }
        private void VectorAdd_87_RuntimeObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Mapping.Layer>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Mapping.Layer)item;
            collection.Add(newItem);
        }
        private void VectorAdd_88_RuntimeCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Mapping.Layer>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Mapping.Layer)item;
            collection.Add(newItem);
        }
        private void VectorAdd_97_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::GSCFieldApp.Models.Files>)instance;
            var newItem = (global::GSCFieldApp.Models.Files)item;
            collection.Add(newItem);
        }
        private void VectorAdd_98_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::GSCFieldApp.Models.Files>)instance;
            var newItem = (global::GSCFieldApp.Models.Files)item;
            collection.Add(newItem);
        }
        private void VectorAdd_116_GraphicsOverlayCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.UI.GraphicsOverlay>)instance;
            var newItem = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)item;
            collection.Add(newItem);
        }
        private void VectorAdd_117_RuntimeObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.UI.GraphicsOverlay>)instance;
            var newItem = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)item;
            collection.Add(newItem);
        }
        private void VectorAdd_118_RuntimeCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.UI.GraphicsOverlay>)instance;
            var newItem = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)item;
            collection.Add(newItem);
        }
        private void VectorAdd_120_GraphicCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.UI.Graphic>)instance;
            var newItem = (global::Esri.ArcGISRuntime.UI.Graphic)item;
            collection.Add(newItem);
        }
        private void VectorAdd_121_RuntimeObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.UI.Graphic>)instance;
            var newItem = (global::Esri.ArcGISRuntime.UI.Graphic)item;
            collection.Add(newItem);
        }
        private void VectorAdd_122_RuntimeCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.UI.Graphic>)instance;
            var newItem = (global::Esri.ArcGISRuntime.UI.Graphic)item;
            collection.Add(newItem);
        }
        private void MapAdd_127_IDictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_134_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Esri.ArcGISRuntime.Mapping.LabelDefinition>)instance;
            var newItem = (global::Esri.ArcGISRuntime.Mapping.LabelDefinition)item;
            collection.Add(newItem);
        }
        private void VectorAdd_139_OverlayItemsCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }
        private void VectorAdd_140_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }
        private void VectorAdd_141_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }
        private void VectorAdd_167_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::GSCFieldApp.Models.FieldBooks>)instance;
            var newItem = (global::GSCFieldApp.Models.FieldBooks)item;
            collection.Add(newItem);
        }
        private void VectorAdd_168_Collection(object instance, object item)
        {
            return Provider.GetXamlType(type);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Template10.Common.BootStrapper
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Application"));
                userType.AddMemberName("SessionState");
                userType.AddMemberName("AutoRestoreAfterTerminated");
                userType.AddMemberName("AutoExtendExecutionSession");
                userType.AddMemberName("AutoSuspendAllFrames");
                userType.AddMemberName("OriginalActivatedArgs");
                userType.AddMemberName("ModalDialog");
                userType.AddMemberName("ModalContent");
                userType.AddMemberName("NavigationService");
                userType.AddMemberName("SplashFactory");
                userType.AddMemberName("CacheMaxDuration");
                userType.AddMemberName("ShowShellBackButton");
                userType.AddMemberName("ForceShowShellBackButton");
                userType.AddMemberName("EnableAutoRestoreAfterTerminated");
                userType.AddMemberName("CurrentState");
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Application
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Template10.Common.IStateItems
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.DictionaryAdd = MapAdd_2_IStateItems;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 3:   //  Object
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  String
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  Boolean
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Windows.ApplicationModel.Activation.IActivatedEventArgs
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 7:   //  Template10.Controls.ModalDialog
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 8:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  Windows.UI.Xaml.UIElement
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  Template10.Services.NavigationService.INavigationService
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 11:   //  System.Func`2<Windows.ApplicationModel.Activation.SplashScreen, Windows.UI.Xaml.Controls.UserControl>
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.MulticastDelegate"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 12:   //  System.MulticastDelegate
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Delegate"));
                xamlType = userType;
                break;

            case 13:   //  System.Delegate
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 14:   //  TimeSpan
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 15:   //  System.ValueType
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 16:   //  Template10.Common.BootstrapperStates
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Template10.Common.BootstrapperStates.None);
                userType.AddEnumValue("Launched", global::Template10.Common.BootstrapperStates.Launched);
                userType.AddEnumValue("Activated", global::Template10.Common.BootstrapperStates.Activated);
                userType.AddEnumValue("Prelaunched", global::Template10.Common.BootstrapperStates.Prelaunched);
                userType.AddEnumValue("Restored", global::Template10.Common.BootstrapperStates.Restored);
                userType.AddEnumValue("Started", global::Template10.Common.BootstrapperStates.Started);
                userType.AddEnumValue("Initialized", global::Template10.Common.BootstrapperStates.Initialized);
                xamlType = userType;
                break;

            case 17:   //  System.Enum
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 18:   //  GSCFieldApp.Converters.MandatoryFieldConverter
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_18_MandatoryFieldConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  Windows.UI.Color
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                userType.AddMemberName("B");
                userType.AddMemberName("G");
                userType.AddMemberName("R");
                xamlType = userType;
                break;

            case 20:   //  Byte
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 21:   //  GSCFieldApp.Themes.ExpandPanel
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_21_ExpandPanel;
                userType.AddMemberName("HeaderContent");
                userType.AddMemberName("ToolContent");
                userType.AddMemberName("IsExpanded");
                userType.AddMemberName("CornerRadius");
                userType.AddMemberName("HeaderBorderBrush");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  Windows.UI.Xaml.CornerRadius
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 23:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 24:   //  GSCFieldApp.Themes.GridViewItemPanel
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Panel"));
                userType.Activator = Activate_24_GridViewItemPanel;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  Windows.UI.Xaml.Controls.Panel
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  Template10.Controls.HamburgerMenu
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_26_HamburgerMenu;
                userType.SetContentPropertyName("Template10.Controls.HamburgerMenu.PrimaryButtons");
                userType.AddMemberName("PrimaryButtons");
                userType.AddMemberName("AccentColor");
                userType.AddMemberName("VisualStateNarrowMinWidth");
                userType.AddMemberName("VisualStateNormalMinWidth");
                userType.AddMemberName("VisualStateWideMinWidth");
                userType.AddMemberName("NavAreaBackground");
                userType.AddMemberName("SecondarySeparator");
                userType.AddMemberName("PaneBorderBrush");
                userType.AddMemberName("HamburgerForeground");
                userType.AddMemberName("HamburgerBackground");
                userType.AddMemberName("NavButtonForeground");
                userType.AddMemberName("NavButtonBackground");
                userType.AddMemberName("NavButtonCheckedForeground");
                userType.AddMemberName("NavButtonCheckedBackground");
                userType.AddMemberName("NavButtonCheckedIndicatorBrush");
                userType.AddMemberName("NavButtonPressedForeground");
                userType.AddMemberName("NavButtonPressedBackground");
                userType.AddMemberName("NavButtonHoverForeground");
                userType.AddMemberName("NavButtonHoverBackground");
                userType.AddMemberName("HamburgerButtonVisibility");
                userType.AddMemberName("DisplayMode");
                userType.AddMemberName("VisualStateNarrowDisplayMode");
                userType.AddMemberName("VisualStateNormalDisplayMode");
                userType.AddMemberName("VisualStateWideDisplayMode");
                userType.AddMemberName("SecondaryButtonOrientation");
                userType.AddMemberName("Selected");
                userType.AddMemberName("NavigationService");
                userType.AddMemberName("IsFullScreen");
                userType.AddMemberName("PaneWidth");
                userType.AddMemberName("HamburgerButtonGridWidth");
                userType.AddMemberName("OpenCloseMode");
                userType.AddMemberName("PaneBorderThickness");
                userType.AddMemberName("HeaderContent");
                userType.AddMemberName("IsOpen");
                userType.AddMemberName("SecondaryButtons");
                userType.AddMemberName("NavCommand");
                userType.AddMemberName("PropertyChangedHandlers");
                xamlType = userType;
                break;

            case 27:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 28:   //  System.Collections.ObjectModel.ObservableCollection`1<Template10.Controls.HamburgerButtonInfo>
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Template10.Controls.HamburgerButtonInfo>"));
                userType.CollectionAdd = VectorAdd_28_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 29:   //  System.Collections.ObjectModel.Collection`1<Template10.Controls.HamburgerButtonInfo>
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_29_Collection;
                userType.CollectionAdd = VectorAdd_29_Collection;
                xamlType = userType;
                break;

            case 30:   //  Template10.Controls.HamburgerButtonInfo
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.DependencyBindableBase"));
                userType.Activator = Activate_30_HamburgerButtonInfo;
                userType.SetContentPropertyName("Template10.Controls.HamburgerButtonInfo.Content");
                userType.AddMemberName("Content");
                userType.AddMemberName("ButtonType");
                userType.AddMemberName("NavigationTransitionInfo");
                userType.AddMemberName("Command");
                userType.AddMemberName("ToolTip");
                userType.AddMemberName("CommandParameter");
                userType.AddMemberName("GroupName");
                userType.AddMemberName("PageType");
                userType.AddMemberName("PageParameter");
                userType.AddMemberName("ClearHistory");
                userType.AddMemberName("ClearCache");
                userType.AddMemberName("Visibility");
                userType.AddMemberName("IsEnabled");
                userType.AddMemberName("IsChecked");
                userType.AddMemberName("MaxWidth");
                xamlType = userType;
                break;

            case 31:   //  Template10.Mvvm.DependencyBindableBase
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                xamlType = userType;
                break;

            case 32:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 33:   //  Template10.Controls.HamburgerButtonInfo.ButtonTypes
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Toggle", global::Template10.Controls.HamburgerButtonInfo.ButtonTypes.Toggle);
                userType.AddEnumValue("Command", global::Template10.Controls.HamburgerButtonInfo.ButtonTypes.Command);
                userType.AddEnumValue("Literal", global::Template10.Controls.HamburgerButtonInfo.ButtonTypes.Literal);
                xamlType = userType;
                break;

            case 34:   //  Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 35:   //  System.Windows.Input.ICommand
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 36:   //  System.Type
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Reflection.MemberInfo"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 37:   //  System.Reflection.MemberInfo
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 38:   //  Windows.UI.Xaml.Visibility
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 39:   //  System.Nullable`1<Boolean>
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 40:   //  Double
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 41:   //  Windows.UI.Xaml.Controls.SplitViewDisplayMode
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 42:   //  Windows.UI.Xaml.Controls.Orientation
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 43:   //  Template10.Controls.HamburgerMenu.OpenCloseModes
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Template10.Controls.HamburgerMenu.OpenCloseModes.None);
                userType.AddEnumValue("Auto", global::Template10.Controls.HamburgerMenu.OpenCloseModes.Auto);
                userType.AddEnumValue("Tap", global::Template10.Controls.HamburgerMenu.OpenCloseModes.Tap);
                userType.AddEnumValue("Swipe", global::Template10.Controls.HamburgerMenu.OpenCloseModes.Swipe);
                xamlType = userType;
                break;

            case 44:   //  Windows.UI.Xaml.Thickness
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 45:   //  Template10.Mvvm.DelegateCommand`1<Template10.Controls.HamburgerButtonInfo>
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 46:   //  Template10.Controls.PageHeader
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.CommandBar"));
                userType.Activator = Activate_46_PageHeader;
                userType.AddMemberName("VisualStateNarrowMinWidth");
                userType.AddMemberName("VisualStateNormalMinWidth");
                userType.AddMemberName("EllipsisVisibility");
                userType.AddMemberName("PrimaryCommandsVisibility");
                userType.AddMemberName("BackButtonVisibility");
                userType.AddMemberName("BackButtonContent");
                userType.AddMemberName("Frame");
                userType.AddMemberName("EnableHamburgerMenuAutoLayout");
                userType.AddMemberName("Text");
                xamlType = userType;
                break;

            case 47:   //  Windows.UI.Xaml.Controls.CommandBar
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 48:   //  Template10.Behaviors.EllipsisBehavior.Visibilities
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Visible", global::Template10.Behaviors.EllipsisBehavior.Visibilities.Visible);
                userType.AddEnumValue("Collapsed", global::Template10.Behaviors.EllipsisBehavior.Visibilities.Collapsed);
                userType.AddEnumValue("Auto", global::Template10.Behaviors.EllipsisBehavior.Visibilities.Auto);
                xamlType = userType;
                break;

            case 49:   //  Windows.UI.Xaml.Controls.Symbol
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 50:   //  Windows.UI.Xaml.Controls.Frame
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 51:   //  Template10.Controls.Resizer
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_51_Resizer;
                userType.SetContentPropertyName("Template10.Controls.Resizer.ElementControl");
                userType.AddMemberName("ElementControl");
                userType.AddMemberName("GrabberBrush");
                userType.AddMemberName("GrabberVisibility");
                userType.AddMemberName("GrabberSize");
                xamlType = userType;
                break;

            case 52:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 53:   //  Windows.Foundation.Size
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 54:   //  GSCFieldApp.CustomResource
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.ResourceDictionary"));
                userType.Activator = Activate_54_CustomResource;
                userType.DictionaryAdd = MapAdd_54_CustomResource;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 55:   //  Windows.UI.Xaml.ResourceDictionary
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 56:   //  GSCFieldApp.ViewModels.ContentDialogSemanticZoomViewModel
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.Activator = Activate_56_ContentDialogSemanticZoomViewModel;
                userType.AddMemberName("inAssignTable");
                userType.AddMemberName("inParentFieldName");
                userType.AddMemberName("inChildFieldName");
                userType.AddMemberName("userTheme");
                userType.AddMemberName("Groups");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 57:   //  Template10.Mvvm.ViewModelBase
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.BindableBase"));
                userType.AddMemberName("NavigationService");
                userType.AddMemberName("Dispatcher");
                userType.AddMemberName("SessionState");
                xamlType = userType;
                break;

            case 58:   //  Template10.Mvvm.BindableBase
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 59:   //  Windows.UI.Xaml.ElementTheme
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 60:   //  System.Collections.ObjectModel.ObservableCollection`1<GSCFieldApp.Models.SemanticDataGroup>
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<GSCFieldApp.Models.SemanticDataGroup>"));
                userType.CollectionAdd = VectorAdd_60_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 61:   //  System.Collections.ObjectModel.Collection`1<GSCFieldApp.Models.SemanticDataGroup>
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_61_Collection;
                userType.CollectionAdd = VectorAdd_61_Collection;
                xamlType = userType;
                break;

            case 62:   //  GSCFieldApp.Models.SemanticDataGroup
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_62_SemanticDataGroup;
                userType.AddMemberName("Name");
                userType.AddMemberName("Items");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 63:   //  System.Collections.Generic.List`1<GSCFieldApp.Models.SemanticData>
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_63_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 64:   //  GSCFieldApp.Models.SemanticData
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Title");
                userType.AddMemberName("Subtitle");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 65:   //  Template10.Common.IDispatcherWrapper
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 66:   //  GSCFieldApp.Views.ContentDialogSemanticZoom
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentDialog"));
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 67:   //  Windows.UI.Xaml.Controls.ContentDialog
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 68:   //  GSCFieldApp.Converters.BitmapSourceConverter
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_68_BitmapSourceConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 69:   //  GSCFieldApp.Converters.VisibilityFromBoolConverter
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_69_VisibilityFromBoolConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 70:   //  GSCFieldApp.Converters.VisibilityFromReverseBoolConverter
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_70_VisibilityFromReverseBoolConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 71:   //  GSCFieldApp.Views.DocumentDialog
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.AddMemberName("DocViewModel");
                userType.AddMemberName("parentViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 72:   //  GSCFieldApp.ViewModels.DocumentViewModel
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 73:   //  GSCFieldApp.Models.FieldNotes
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 74:   //  GSCFieldApp.Views.EarthmatDialog
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.AddMemberName("ViewModel");
                userType.AddMemberName("parentViewMode");
                userType.AddMemberName("Rocks");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 75:   //  GSCFieldApp.ViewModels.EarthmatViewModel
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 76:   //  System.Collections.Generic.List`1<String>
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_76_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 77:   //  GSCFieldApp.Views.FossilDialog
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.AddMemberName("fossilModel");
                userType.AddMemberName("fossilParentViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 78:   //  GSCFieldApp.ViewModels.FossilViewModel
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 79:   //  GSCFieldApp.Converters.ReverseBoolConverter
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_79_ReverseBoolConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 80:   //  GSCFieldApp.Views.LocationDialog
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.AddMemberName("locationVM");
                userType.AddMemberName("parentViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 81:   //  GSCFieldApp.ViewModels.LocationViewModel
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 82:   //  GSCFieldApp.ViewModels.MapPageViewModel
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.Activator = Activate_82_MapPageViewModel;
                userType.AddMemberName("currentMapView");
                userType.AddMemberName("GPSModeSymbol");
                userType.AddMemberName("NoMapsWatermark");
                userType.AddMemberName("FilenameValues");
                userType.AddMemberName("SelectedLayer");
                userType.AddMemberName("CurrentMSGeoposition");
                userType.AddMemberName("CurrentLongitude");
                userType.AddMemberName("CurrentLatitude");
                userType.AddMemberName("CurrentAltitude");
                userType.AddMemberName("CurrentAccuracy");
                userType.AddMemberName("lastTakenLocation");
                userType.AddMemberName("MyMapScale");
                userType.AddMemberName("MapRingActive");
                userType.AddMemberName("MapRingVisibility");
                userType.AddMemberName("MapRingLabelAcquiringGPSVisibility");
                userType.AddMemberName("MapPageQuickMeasurementEnable");
                userType.AddMemberName("MapPageQuickPhotoEnable");
                userType.AddMemberName("MapPageQuickSampleEnable");
                userType.AddMemberName("vocabEntryTypeTap");
                userType.AddMemberName("vocabEntryTypeGPS");
                userType.AddMemberName("vocabElevmethodGPS");
                userType.AddMemberName("vocabErrorMeasureTypeMeter");
                userType.AddMemberName("vocabEntryTypeManual");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 83:   //  Esri.ArcGISRuntime.UI.Controls.MapView
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.GeoView"));
                userType.Activator = Activate_83_MapView;
                userType.SetContentPropertyName("Esri.ArcGISRuntime.UI.Controls.MapView.Map");
                userType.AddMemberName("Map");
                userType.AddMemberName("MapScale");
                userType.AddMemberName("MapRotation");
                userType.AddMemberName("UnitsPerPixel");
                userType.AddMemberName("VisibleArea");
                userType.AddMemberName("WrapAroundMode");
                userType.AddMemberName("Labeling");
                userType.AddMemberName("LocationDisplay");
                userType.AddMemberName("BackgroundGrid");
                userType.AddMemberName("Grid");
                userType.AddMemberName("SketchEditor");
                userType.AddMemberName("InteractionOptions");
                xamlType = userType;
                break;

            case 84:   //  Esri.ArcGISRuntime.UI.Controls.GeoView
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.AddMemberName("IsCalloutVisible");
                userType.AddMemberName("GraphicsOverlays");
                userType.AddMemberName("IsAttributionTextVisible");
                userType.AddMemberName("AttributionText");
                userType.AddMemberName("SpatialReference");
                userType.AddMemberName("IsWrapAroundEnabled");
                userType.AddMemberName("IsNavigating");
                userType.AddMemberName("DrawStatus");
                userType.AddMemberName("ViewInsets");
                userType.AddMemberName("TimeExtent");
                userType.AddMemberName("Overlays");
                userType.AddMemberName("SelectionProperties");
                userType.AddMemberName("ViewOverlayAnchor");
                xamlType = userType;
                break;

            case 85:   //  Esri.ArcGISRuntime.Mapping.Map
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_85_Map;
                userType.SetContentPropertyName("Esri.ArcGISRuntime.Mapping.Map.OperationalLayers");
                userType.CreateFromStringMethod = global::Esri.ArcGISRuntime.CreateFromStringHelpers.CreateMapFromStringUrl;
                userType.AddMemberName("OperationalLayers");
                xamlType = userType;
                break;

            case 86:   //  Esri.ArcGISRuntime.Mapping.LayerCollection
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.RuntimeObservableCollection`1<Esri.ArcGISRuntime.Mapping.Layer>"));
                userType.CollectionAdd = VectorAdd_86_LayerCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 87:   //  Esri.ArcGISRuntime.RuntimeObservableCollection`1<Esri.ArcGISRuntime.Mapping.Layer>
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.RuntimeCollection`1<Esri.ArcGISRuntime.Mapping.Layer>"));
                userType.CollectionAdd = VectorAdd_87_RuntimeObservableCollection;
                xamlType = userType;
                break;

            case 88:   //  Esri.ArcGISRuntime.RuntimeCollection`1<Esri.ArcGISRuntime.Mapping.Layer>
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_88_RuntimeCollection;
                xamlType = userType;
                break;

            case 89:   //  Esri.ArcGISRuntime.Mapping.Layer
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("LoadStatus");
                userType.AddMemberName("LoadError");
                userType.AddMemberName("Item");
                userType.AddMemberName("Attribution");
                userType.AddMemberName("Description");
                userType.AddMemberName("MaxScale");
                userType.AddMemberName("MinScale");
                userType.AddMemberName("SpatialReference");
                userType.AddMemberName("Opacity");
                userType.AddMemberName("Id");
                userType.AddMemberName("FullExtent");
                userType.AddMemberName("CanChangeVisibility");
                userType.AddMemberName("IsVisible");
                userType.AddMemberName("IsIdentifyEnabled");
                userType.AddMemberName("Name");
                userType.AddMemberName("ShowInLegend");
                userType.AddMemberName("SublayerContents");
                xamlType = userType;
                break;

            case 90:   //  Esri.ArcGISRuntime.LoadStatus
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Loaded", global::Esri.ArcGISRuntime.LoadStatus.Loaded);
                userType.AddEnumValue("Loading", global::Esri.ArcGISRuntime.LoadStatus.Loading);
                userType.AddEnumValue("FailedToLoad", global::Esri.ArcGISRuntime.LoadStatus.FailedToLoad);
                userType.AddEnumValue("NotLoaded", global::Esri.ArcGISRuntime.LoadStatus.NotLoaded);
                xamlType = userType;
                break;

            case 91:   //  System.Exception
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 92:   //  Esri.ArcGISRuntime.Portal.Item
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 93:   //  Esri.ArcGISRuntime.Geometry.SpatialReference
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 94:   //  Esri.ArcGISRuntime.Geometry.Envelope
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Geometry"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 95:   //  Esri.ArcGISRuntime.Geometry.Geometry
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 96:   //  System.Collections.Generic.IReadOnlyList`1<Esri.ArcGISRuntime.Mapping.ILayerContent>
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 97:   //  System.Collections.ObjectModel.ObservableCollection`1<GSCFieldApp.Models.Files>
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<GSCFieldApp.Models.Files>"));
                userType.CollectionAdd = VectorAdd_97_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 98:   //  System.Collections.ObjectModel.Collection`1<GSCFieldApp.Models.Files>
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_98_Collection;
                userType.CollectionAdd = VectorAdd_98_Collection;
                xamlType = userType;
                break;

            case 99:   //  GSCFieldApp.Models.Files
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_99_Files;
                userType.AddMemberName("FileName");
                userType.AddMemberName("FilePath");
                userType.AddMemberName("FileVisible");
                userType.AddMemberName("FileCanDelete");
                userType.AddMemberName("FileOpacity");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 100:   //  Windows.Devices.Geolocation.Geoposition
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 101:   //  System.Tuple`2<Double, Double>
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 102:   //  GSCFieldApp.Converters.ScaleConverter
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_102_ScaleConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 103:   //  GSCFieldApp.Converters.DD2DMSConverter
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_103_DD2DMSConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 104:   //  GSCFieldApp.Converters.HorizontalAccuracyConverter
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_104_HorizontalAccuracyConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 105:   //  GSCFieldApp.Converters.ElevationConverter
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_105_ElevationConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 106:   //  Esri.ArcGISRuntime.Geometry.Polygon
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Multipart"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 107:   //  Esri.ArcGISRuntime.Geometry.Multipart
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Geometry"));
                xamlType = userType;
                break;

            case 108:   //  Esri.ArcGISRuntime.UI.WrapAroundMode
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("EnabledWhenSupported", global::Esri.ArcGISRuntime.UI.WrapAroundMode.EnabledWhenSupported);
                userType.AddEnumValue("Disabled", global::Esri.ArcGISRuntime.UI.WrapAroundMode.Disabled);
                xamlType = userType;
                break;

            case 109:   //  Esri.ArcGISRuntime.UI.ViewLabelProperties
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 110:   //  Esri.ArcGISRuntime.UI.LocationDisplay
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 111:   //  Esri.ArcGISRuntime.UI.BackgroundGrid
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 112:   //  Esri.ArcGISRuntime.UI.Grid
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 113:   //  Esri.ArcGISRuntime.UI.SketchEditor
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 114:   //  Esri.ArcGISRuntime.UI.MapViewInteractionOptions
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.UI.InteractionOptions"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 115:   //  Esri.ArcGISRuntime.UI.InteractionOptions
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 116:   //  Esri.ArcGISRuntime.UI.GraphicsOverlayCollection
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.RuntimeObservableCollection`1<Esri.ArcGISRuntime.UI.GraphicsOverlay>"));
                userType.CollectionAdd = VectorAdd_116_GraphicsOverlayCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 117:   //  Esri.ArcGISRuntime.RuntimeObservableCollection`1<Esri.ArcGISRuntime.UI.GraphicsOverlay>
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.RuntimeCollection`1<Esri.ArcGISRuntime.UI.GraphicsOverlay>"));
                userType.CollectionAdd = VectorAdd_117_RuntimeObservableCollection;
                xamlType = userType;
                break;

            case 118:   //  Esri.ArcGISRuntime.RuntimeCollection`1<Esri.ArcGISRuntime.UI.GraphicsOverlay>
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_118_RuntimeCollection;
                xamlType = userType;
                break;

            case 119:   //  Esri.ArcGISRuntime.UI.GraphicsOverlay
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_119_GraphicsOverlay;
                userType.SetContentPropertyName("Esri.ArcGISRuntime.UI.GraphicsOverlay.Graphics");
                userType.AddMemberName("Graphics");
                userType.AddMemberName("Id");
                userType.AddMemberName("Extent");
                userType.AddMemberName("RenderingMode");
                userType.AddMemberName("SelectionColor");
                userType.AddMemberName("Renderer");
                userType.AddMemberName("IsVisible");
                userType.AddMemberName("Opacity");
                userType.AddMemberName("IsPopupEnabled");
                userType.AddMemberName("PopupDefinition");
                userType.AddMemberName("MinScale");
                userType.AddMemberName("MaxScale");
                userType.AddMemberName("SceneProperties");
                userType.AddMemberName("SelectedGraphics");
                userType.AddMemberName("LabelDefinitions");
                userType.AddMemberName("LabelsEnabled");
                xamlType = userType;
                break;

            case 120:   //  Esri.ArcGISRuntime.UI.GraphicCollection
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.RuntimeObservableCollection`1<Esri.ArcGISRuntime.UI.Graphic>"));
                userType.CollectionAdd = VectorAdd_120_GraphicCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 121:   //  Esri.ArcGISRuntime.RuntimeObservableCollection`1<Esri.ArcGISRuntime.UI.Graphic>
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.RuntimeCollection`1<Esri.ArcGISRuntime.UI.Graphic>"));
                userType.CollectionAdd = VectorAdd_121_RuntimeObservableCollection;
                xamlType = userType;
                break;

            case 122:   //  Esri.ArcGISRuntime.RuntimeCollection`1<Esri.ArcGISRuntime.UI.Graphic>
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_122_RuntimeCollection;
                xamlType = userType;
                break;

            case 123:   //  Esri.ArcGISRuntime.UI.Graphic
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Data.GeoElement"));
                userType.Activator = Activate_123_Graphic;
                userType.AddMemberName("GraphicsOverlay");
                userType.AddMemberName("Geometry");
                userType.AddMemberName("Symbol");
                userType.AddMemberName("IsVisible");
                userType.AddMemberName("IsSelected");
                userType.AddMemberName("ZIndex");
                xamlType = userType;
                break;

            case 124:   //  Esri.ArcGISRuntime.Data.GeoElement
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Attributes");
                xamlType = userType;
                break;

            case 125:   //  Esri.ArcGISRuntime.Symbology.Symbol
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 126:   //  Int32
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 127:   //  System.Collections.Generic.IDictionary`2<String, Object>
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.DictionaryAdd = MapAdd_127_IDictionary;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 128:   //  Esri.ArcGISRuntime.UI.GraphicsRenderingMode
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Dynamic", global::Esri.ArcGISRuntime.UI.GraphicsRenderingMode.Dynamic);
                userType.AddEnumValue("Static", global::Esri.ArcGISRuntime.UI.GraphicsRenderingMode.Static);
                xamlType = userType;
                break;

            case 129:   //  System.Drawing.Color
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 130:   //  Esri.ArcGISRuntime.Symbology.Renderer
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 131:   //  Esri.ArcGISRuntime.Mapping.Popups.PopupDefinition
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 132:   //  Esri.ArcGISRuntime.Mapping.LayerSceneProperties
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 133:   //  System.Collections.Generic.IEnumerable`1<Esri.ArcGISRuntime.UI.Graphic>
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 134:   //  System.Collections.Generic.IList`1<Esri.ArcGISRuntime.Mapping.LabelDefinition>
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_134_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 135:   //  Esri.ArcGISRuntime.Mapping.LabelDefinition
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 136:   //  Esri.ArcGISRuntime.UI.DrawStatus
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("InProgress", global::Esri.ArcGISRuntime.UI.DrawStatus.InProgress);
                userType.AddEnumValue("Completed", global::Esri.ArcGISRuntime.UI.DrawStatus.Completed);
                xamlType = userType;
                break;

            case 137:   //  Esri.ArcGISRuntime.TimeExtent
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 138:   //  Esri.ArcGISRuntime.UI.Controls.OverlayItemsControl
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_138_OverlayItemsControl;
                userType.SetContentPropertyName("Esri.ArcGISRuntime.UI.Controls.OverlayItemsControl.Items");
                userType.AddMemberName("Items");
                xamlType = userType;
                break;

            case 139:   //  Esri.ArcGISRuntime.UI.Controls.OverlayItemsCollection
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Object>"));
                userType.CollectionAdd = VectorAdd_139_OverlayItemsCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 140:   //  System.Collections.ObjectModel.ObservableCollection`1<Object>
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Object>"));
                userType.Activator = Activate_140_ObservableCollection;
                userType.CollectionAdd = VectorAdd_140_ObservableCollection;
                xamlType = userType;
                break;

            case 141:   //  System.Collections.ObjectModel.Collection`1<Object>
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_141_Collection;
                userType.CollectionAdd = VectorAdd_141_Collection;
                xamlType = userType;
                break;

            case 142:   //  Esri.ArcGISRuntime.UI.SelectionProperties
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 143:   //  Esri.ArcGISRuntime.Geometry.MapPoint
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Geometry.Geometry"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 144:   //  Windows.UI.Xaml.FrameworkElement
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 145:   //  Esri.ArcGISRuntime.Toolkit.UI.Controls.ScaleLine
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_145_ScaleLine;
                userType.AddMemberName("MapView");
                userType.AddMemberName("MapScale");
                userType.AddMemberName("TargetWidth");
                xamlType = userType;
                break;

            case 146:   //  GSCFieldApp.Views.MapPage
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_146_MapPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 147:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 148:   //  GSCFieldApp.Views.MineralizationAlterationDialog
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.AddMemberName("MAViewModel");
                userType.AddMemberName("parentViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 149:   //  GSCFieldApp.ViewModels.MineralizationAlterationViewModel
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 150:   //  GSCFieldApp.Views.MineralDialog
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.AddMemberName("MineralVM");
                userType.AddMemberName("parentViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 151:   //  GSCFieldApp.ViewModels.MineralViewModel
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 152:   //  GSCFieldApp.Views.PaleoflowDialog
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.AddMemberName("pflowModel");
                userType.AddMemberName("pflowParentViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 153:   //  GSCFieldApp.ViewModels.PaleoflowViewModel
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 154:   //  GSCFieldApp.Converters.PicklistDescriptionConverter
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_154_PicklistDescriptionConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 155:   //  GSCFieldApp.Converters.PicklistDefaultValueConverter
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_155_PicklistDefaultValueConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 156:   //  GSCFieldApp.Views.PicklistDialog
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 157:   //  GSCFieldApp.Converters.SolidColorBrushConverter
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_157_SolidColorBrushConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 158:   //  GSCFieldApp.Converters.MediaBrushConverter
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_158_MediaBrushConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 159:   //  GSCFieldApp.Converters.TextWithDegreeConverter
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_159_TextWithDegreeConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 160:   //  GSCFieldApp.Converters.TextWithAzimDegreeConverter
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_160_TextWithAzimDegreeConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 161:   //  GSCFieldApp.Converters.TextWithPercentageConverter
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_161_TextWithPercentageConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 162:   //  GSCFieldApp.Views.ReportPage
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_162_ReportPage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 163:   //  GSCFieldApp.ViewModels.FieldNotesViewModel
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 164:   //  GSCFieldApp.Views.SampleDialog
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.AddMemberName("ViewModel");
                userType.AddMemberName("parentViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 165:   //  GSCFieldApp.ViewModels.SampleViewModel
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 166:   //  GSCFieldApp.ViewModels.FieldBooksPageViewModel
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.Activator = Activate_166_FieldBooksPageViewModel;
                userType.AddMemberName("ProjectCollection");
                userType.AddMemberName("ProgressRingActive");
                userType.AddMemberName("ProgressRingVisibility");
                userType.AddMemberName("SelectedProjectIndex");
                userType.AddMemberName("NoFieldBookWatermark");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 167:   //  System.Collections.ObjectModel.ObservableCollection`1<GSCFieldApp.Models.FieldBooks>
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<GSCFieldApp.Models.FieldBooks>"));
                userType.CollectionAdd = VectorAdd_167_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 168:   //  System.Collections.ObjectModel.Collection`1<GSCFieldApp.Models.FieldBooks>
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_168_Collection;
                userType.CollectionAdd = VectorAdd_168_Collection;
                xamlType = userType;
                break;

            case 169:   //  GSCFieldApp.Models.FieldBooks
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_169_FieldBooks;
                userType.AddMemberName("GeologistGeolcode");
                userType.AddMemberName("StationNumber");
                userType.AddMemberName("StationLastEntered");
                userType.AddMemberName("ProjectPath");
                userType.AddMemberName("ProjectDBPath");
                userType.AddMemberName("CreateDate");
                userType.AddMemberName("metadataForProject");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 170:   //  GSCFieldApp.Models.Metadata
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.BindableBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 171:   //  GSCFieldApp.Views.FieldBooksPage
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_171_FieldBooksPage;
                userType.AddMemberName("ProjectViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 172:   //  GSCFieldApp.ViewModels.SettingsPageViewModel
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.Activator = Activate_172_SettingsPageViewModel;
                userType.AddMemberName("CommonToggle");
                userType.AddMemberName("BedrockToggle");
                userType.AddMemberName("SurficialToggle");
                userType.AddMemberName("PhotoToggle");
                userType.AddMemberName("EarthToggle");
                userType.AddMemberName("ExternalMeasureToggle");
                userType.AddMemberName("SampleToggle");
                userType.AddMemberName("MAToggle");
                userType.AddMemberName("StructureToggle");
                userType.AddMemberName("FossilToggle");
                userType.AddMemberName("MineralToggle");
                userType.AddMemberName("EnvironmentToggle");
                userType.AddMemberName("SoilProfileToggle");
                userType.AddMemberName("PflowToggle");
                userType.AddMemberName("LoadPicklistVisibility");
                userType.AddMemberName("SelectedPivotIndex");
                userType.AddMemberName("SettingsPartViewModel");
                userType.AddMemberName("AboutPartViewModel");
                userType.AddMemberName("PicklistPartViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 173:   //  GSCFieldApp.ViewModels.SettingsPartViewModel
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 174:   //  GSCFieldApp.ViewModels.AboutPartViewModel
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 175:   //  GSCFieldApp.ViewModels.PicklistPartViewModel
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 176:   //  GSCFieldApp.Views.SettingsPage
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_176_SettingsPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 177:   //  GSCFieldApp.Views.Shell
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_177_Shell;
                userType.AddMemberName("SViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 178:   //  GSCFieldApp.ViewModels.ShellViewModel
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 179:   //  GSCFieldApp.Views.Splash
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 180:   //  GSCFieldApp.Views.StationDataPart
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.AddMemberName("ViewModel");
                userType.AddMemberName("mapPosition");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 181:   //  GSCFieldApp.ViewModels.StationViewModel
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 182:   //  GSCFieldApp.Models.FieldLocation
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.BindableBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 183:   //  GSCFieldApp.Converters.String2Number
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_183_String2Number;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 184:   //  GSCFieldApp.Views.StructureDialog
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.AddMemberName("strucViewModel");
                userType.AddMemberName("parentViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 185:   //  GSCFieldApp.ViewModels.StructureViewModel
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 186:   //  GSCFieldApp.Views.FieldBookDialog
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 187:   //  GSCFieldApp.ViewModels.FieldBookDialogViewModel
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 188:   //  Esri.ArcGISRuntime.Symbology.PictureFillSymbol
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.FillSymbol"));
                userType.AddMemberName("Opacity");
                userType.AddMemberName("Width");
                userType.AddMemberName("Height");
                userType.AddMemberName("Angle");
                userType.AddMemberName("OffsetX");
                userType.AddMemberName("OffsetY");
                userType.AddMemberName("ScaleX");
                userType.AddMemberName("ScaleY");
                userType.AddMemberName("Uri");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 189:   //  Esri.ArcGISRuntime.Symbology.FillSymbol
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.Symbol"));
                userType.AddMemberName("Color");
                userType.AddMemberName("Outline");
                xamlType = userType;
                break;

            case 190:   //  System.Uri
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 191:   //  Esri.ArcGISRuntime.Symbology.LineSymbol
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.Symbol"));
                userType.AddMemberName("Color");
                userType.AddMemberName("Width");
                userType.AddMemberName("AntiAlias");
                xamlType = userType;
                break;

            case 192:   //  Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol"));
                userType.AddMemberName("Opacity");
                userType.AddMemberName("Width");
                userType.AddMemberName("Height");
                userType.AddMemberName("Uri");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 193:   //  Esri.ArcGISRuntime.Symbology.MarkerSymbol
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.Symbol"));
                userType.AddMemberName("Angle");
                userType.AddMemberName("AngleAlignment");
                userType.AddMemberName("LeaderOffsetX");
                userType.AddMemberName("LeaderOffsetY");
                userType.AddMemberName("OffsetX");
                userType.AddMemberName("OffsetY");
                userType.AddMemberName("RotationType");
                xamlType = userType;
                break;

            case 194:   //  Esri.ArcGISRuntime.Symbology.SymbolAngleAlignment
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Map", global::Esri.ArcGISRuntime.Symbology.SymbolAngleAlignment.Map);
                userType.AddEnumValue("Screen", global::Esri.ArcGISRuntime.Symbology.SymbolAngleAlignment.Screen);
                xamlType = userType;
                break;

            case 195:   //  Esri.ArcGISRuntime.Symbology.RotationType
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Arithmetic", global::Esri.ArcGISRuntime.Symbology.RotationType.Arithmetic);
                userType.AddEnumValue("Geographic", global::Esri.ArcGISRuntime.Symbology.RotationType.Geographic);
                xamlType = userType;
                break;

            case 196:   //  Esri.ArcGISRuntime.Symbology.SimpleFillSymbol
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.FillSymbol"));
                userType.Activator = Activate_196_SimpleFillSymbol;
                userType.AddMemberName("Style");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 197:   //  Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("BackwardDiagonal", global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle.BackwardDiagonal);
                userType.AddEnumValue("Cross", global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle.Cross);
                userType.AddEnumValue("DiagonalCross", global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle.DiagonalCross);
                userType.AddEnumValue("ForwardDiagonal", global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle.ForwardDiagonal);
                userType.AddEnumValue("Horizontal", global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle.Horizontal);
                userType.AddEnumValue("Null", global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle.Null);
                userType.AddEnumValue("Solid", global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle.Solid);
                userType.AddEnumValue("Vertical", global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle.Vertical);
                xamlType = userType;
                break;

            case 198:   //  Esri.ArcGISRuntime.Symbology.SimpleLineSymbol
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.LineSymbol"));
                userType.Activator = Activate_198_SimpleLineSymbol;
                userType.AddMemberName("Style");
                userType.AddMemberName("MarkerPlacement");
                userType.AddMemberName("MarkerStyle");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 199:   //  Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Dash", global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle.Dash);
                userType.AddEnumValue("DashDot", global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle.DashDot);
                userType.AddEnumValue("DashDotDot", global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle.DashDotDot);
                userType.AddEnumValue("Dot", global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle.Dot);
                userType.AddEnumValue("Null", global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle.Null);
                userType.AddEnumValue("Solid", global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle.Solid);
                xamlType = userType;
                break;

            case 200:   //  Esri.ArcGISRuntime.Symbology.SimpleLineSymbolMarkerPlacement
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Begin", global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbolMarkerPlacement.Begin);
                userType.AddEnumValue("End", global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbolMarkerPlacement.End);
                userType.AddEnumValue("BeginAndEnd", global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbolMarkerPlacement.BeginAndEnd);
                xamlType = userType;
                break;

            case 201:   //  Esri.ArcGISRuntime.Symbology.SimpleLineSymbolMarkerStyle
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbolMarkerStyle.None);
                userType.AddEnumValue("Arrow", global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbolMarkerStyle.Arrow);
                xamlType = userType;
                break;

            case 202:   //  Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol"));
                userType.Activator = Activate_202_SimpleMarkerSymbol;
                userType.AddMemberName("Outline");
                userType.AddMemberName("Color");
                userType.AddMemberName("Size");
                userType.AddMemberName("Style");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 203:   //  Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Circle", global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle.Circle);
                userType.AddEnumValue("Cross", global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle.Cross);
                userType.AddEnumValue("Diamond", global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle.Diamond);
                userType.AddEnumValue("Square", global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle.Square);
                userType.AddEnumValue("Triangle", global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle.Triangle);
                userType.AddEnumValue("X", global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle.X);
                xamlType = userType;
                break;

            case 204:   //  Esri.ArcGISRuntime.Symbology.TextSymbol
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol"));
                userType.Activator = Activate_204_TextSymbol;
                userType.AddMemberName("Color");
                userType.AddMemberName("FontDecoration");
                userType.AddMemberName("FontFamily");
                userType.AddMemberName("FontStyle");
                userType.AddMemberName("FontWeight");
                userType.AddMemberName("HorizontalAlignment");
                userType.AddMemberName("Size");
                userType.AddMemberName("Text");
                userType.AddMemberName("VerticalAlignment");
                userType.AddMemberName("HaloColor");
                userType.AddMemberName("HaloWidth");
                userType.AddMemberName("OutlineColor");
                userType.AddMemberName("OutlineWidth");
                userType.AddMemberName("BackgroundColor");
                userType.AddMemberName("KerningEnabled");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 205:   //  Esri.ArcGISRuntime.Symbology.FontDecoration
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("LineThrough", global::Esri.ArcGISRuntime.Symbology.FontDecoration.LineThrough);
                userType.AddEnumValue("None", global::Esri.ArcGISRuntime.Symbology.FontDecoration.None);
                userType.AddEnumValue("Underline", global::Esri.ArcGISRuntime.Symbology.FontDecoration.Underline);
                xamlType = userType;
                break;

            case 206:   //  Esri.ArcGISRuntime.Symbology.FontStyle
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Italic", global::Esri.ArcGISRuntime.Symbology.FontStyle.Italic);
                userType.AddEnumValue("Normal", global::Esri.ArcGISRuntime.Symbology.FontStyle.Normal);
                userType.AddEnumValue("Oblique", global::Esri.ArcGISRuntime.Symbology.FontStyle.Oblique);
                xamlType = userType;
                break;

            case 207:   //  Esri.ArcGISRuntime.Symbology.FontWeight
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Bold", global::Esri.ArcGISRuntime.Symbology.FontWeight.Bold);
                userType.AddEnumValue("Normal", global::Esri.ArcGISRuntime.Symbology.FontWeight.Normal);
                xamlType = userType;
                break;

            case 208:   //  Esri.ArcGISRuntime.Symbology.HorizontalAlignment
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Center", global::Esri.ArcGISRuntime.Symbology.HorizontalAlignment.Center);
                userType.AddEnumValue("Justify", global::Esri.ArcGISRuntime.Symbology.HorizontalAlignment.Justify);
                userType.AddEnumValue("Left", global::Esri.ArcGISRuntime.Symbology.HorizontalAlignment.Left);
                userType.AddEnumValue("Right", global::Esri.ArcGISRuntime.Symbology.HorizontalAlignment.Right);
                xamlType = userType;
                break;

            case 209:   //  Esri.ArcGISRuntime.Symbology.VerticalAlignment
                userType = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Baseline", global::Esri.ArcGISRuntime.Symbology.VerticalAlignment.Baseline);
                userType.AddEnumValue("Bottom", global::Esri.ArcGISRuntime.Symbology.VerticalAlignment.Bottom);
                userType.AddEnumValue("Middle", global::Esri.ArcGISRuntime.Symbology.VerticalAlignment.Middle);
                userType.AddEnumValue("Top", global::Esri.ArcGISRuntime.Symbology.VerticalAlignment.Top);
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Esri.ArcGISRuntime.Esri_ArcGISRuntime_Universal_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Esri.ArcGISRuntime.Toolkit.Esri_ArcGISRuntime_Toolkit_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Template10.Template10__Library__XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_BootStrapper_SessionState(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.SessionState;
        }
        private void set_0_BootStrapper_SessionState(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.SessionState = (global::Template10.Common.IStateItems)Value;
        }
        private object get_1_BootStrapper_AutoRestoreAfterTerminated(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.AutoRestoreAfterTerminated;
        }
        private void set_1_BootStrapper_AutoRestoreAfterTerminated(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.AutoRestoreAfterTerminated = (global::System.Boolean)Value;
        }
        private object get_2_BootStrapper_AutoExtendExecutionSession(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.AutoExtendExecutionSession;
        }
        private void set_2_BootStrapper_AutoExtendExecutionSession(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.AutoExtendExecutionSession = (global::System.Boolean)Value;
        }
        private object get_3_BootStrapper_AutoSuspendAllFrames(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.AutoSuspendAllFrames;
        }
        private void set_3_BootStrapper_AutoSuspendAllFrames(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.AutoSuspendAllFrames = (global::System.Boolean)Value;
        }
        private object get_4_BootStrapper_OriginalActivatedArgs(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.OriginalActivatedArgs;
        }
        private object get_5_BootStrapper_ModalDialog(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ModalDialog;
        }
        private object get_6_BootStrapper_ModalContent(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ModalContent;
        }
        private void set_6_BootStrapper_ModalContent(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.ModalContent = (global::Windows.UI.Xaml.UIElement)Value;
        }
        private object get_7_BootStrapper_NavigationService(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.NavigationService;
        }
        private object get_8_BootStrapper_SplashFactory(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.SplashFactory;
        }
        private object get_9_BootStrapper_CacheMaxDuration(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.CacheMaxDuration;
        }
        private void set_9_BootStrapper_CacheMaxDuration(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.CacheMaxDuration = (global::System.TimeSpan)Value;
        }
        private object get_10_BootStrapper_ShowShellBackButton(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ShowShellBackButton;
        }
        private void set_10_BootStrapper_ShowShellBackButton(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.ShowShellBackButton = (global::System.Boolean)Value;
        }
        private object get_11_BootStrapper_ForceShowShellBackButton(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ForceShowShellBackButton;
        }
        private void set_11_BootStrapper_ForceShowShellBackButton(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.ForceShowShellBackButton = (global::System.Boolean)Value;
        }
#pragma warning disable 0618  //   Warning on Deprecated usage
        private object get_12_BootStrapper_EnableAutoRestoreAfterTerminated(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.EnableAutoRestoreAfterTerminated;
        }
        private void set_12_BootStrapper_EnableAutoRestoreAfterTerminated(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.EnableAutoRestoreAfterTerminated = (global::System.Boolean)Value;
        }
#pragma warning restore 0618
        private object get_13_BootStrapper_CurrentState(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.CurrentState;
        }
        private void set_13_BootStrapper_CurrentState(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.CurrentState = (global::Template10.Common.BootstrapperStates)Value;
        }
        private object get_14_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_14_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_15_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_15_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_16_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_16_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_17_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_17_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }
        private object get_18_ExpandPanel_HeaderContent(object instance)
        {
            var that = (global::GSCFieldApp.Themes.ExpandPanel)instance;
            return that.HeaderContent;
        }
        private void set_18_ExpandPanel_HeaderContent(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Themes.ExpandPanel)instance;
            that.HeaderContent = (global::System.Object)Value;
        }
        private object get_19_ExpandPanel_ToolContent(object instance)
        {
            var that = (global::GSCFieldApp.Themes.ExpandPanel)instance;
            return that.ToolContent;
        }
        private void set_19_ExpandPanel_ToolContent(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Themes.ExpandPanel)instance;
            that.ToolContent = (global::System.Object)Value;
        }
        private object get_20_ExpandPanel_IsExpanded(object instance)
        {
            var that = (global::GSCFieldApp.Themes.ExpandPanel)instance;
            return that.IsExpanded;
        }
        private void set_20_ExpandPanel_IsExpanded(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Themes.ExpandPanel)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_21_ExpandPanel_CornerRadius(object instance)
        {
            var that = (global::GSCFieldApp.Themes.ExpandPanel)instance;
            return that.CornerRadius;
        }
        private void set_21_ExpandPanel_CornerRadius(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Themes.ExpandPanel)instance;
            that.CornerRadius = (global::Windows.UI.Xaml.CornerRadius)Value;
        }
        private object get_22_ExpandPanel_HeaderBorderBrush(object instance)
        {
            var that = (global::GSCFieldApp.Themes.ExpandPanel)instance;
            return that.HeaderBorderBrush;
        }
        private void set_22_ExpandPanel_HeaderBorderBrush(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Themes.ExpandPanel)instance;
            that.HeaderBorderBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_23_HamburgerMenu_PrimaryButtons(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.PrimaryButtons;
        }
        private void set_23_HamburgerMenu_PrimaryButtons(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.PrimaryButtons = (global::System.Collections.ObjectModel.ObservableCollection<global::Template10.Controls.HamburgerButtonInfo>)Value;
        }
        private object get_24_HamburgerButtonInfo_Content(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.Content;
        }
        private void set_24_HamburgerButtonInfo_Content(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.Content = (global::Windows.UI.Xaml.UIElement)Value;
        }
        private object get_25_HamburgerButtonInfo_ButtonType(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.ButtonType;
        }
        private void set_25_HamburgerButtonInfo_ButtonType(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.ButtonType = (global::Template10.Controls.HamburgerButtonInfo.ButtonTypes)Value;
        }
        private object get_26_HamburgerButtonInfo_NavigationTransitionInfo(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.NavigationTransitionInfo;
        }
        private void set_26_HamburgerButtonInfo_NavigationTransitionInfo(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.NavigationTransitionInfo = (global::Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo)Value;
        }
        private object get_27_HamburgerButtonInfo_Command(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.Command;
        }
        private void set_27_HamburgerButtonInfo_Command(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_28_HamburgerButtonInfo_ToolTip(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.ToolTip;
        }
        private void set_28_HamburgerButtonInfo_ToolTip(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.ToolTip = (global::System.Object)Value;
        }
        private object get_29_HamburgerButtonInfo_CommandParameter(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.CommandParameter;
        }
        private void set_29_HamburgerButtonInfo_CommandParameter(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_30_HamburgerButtonInfo_GroupName(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.GroupName;
        }
        private void set_30_HamburgerButtonInfo_GroupName(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.GroupName = (global::System.Object)Value;
        }
        private object get_31_HamburgerButtonInfo_PageType(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.PageType;
        }
        private void set_31_HamburgerButtonInfo_PageType(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.PageType = (global::System.Type)Value;
        }
        private object get_32_HamburgerButtonInfo_PageParameter(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.PageParameter;
        }
        private void set_32_HamburgerButtonInfo_PageParameter(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.PageParameter = (global::System.Object)Value;
        }
        private object get_33_HamburgerButtonInfo_ClearHistory(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.ClearHistory;
        }
        private void set_33_HamburgerButtonInfo_ClearHistory(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.ClearHistory = (global::System.Boolean)Value;
        }
        private object get_34_HamburgerButtonInfo_ClearCache(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.ClearCache;
        }
        private void set_34_HamburgerButtonInfo_ClearCache(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.ClearCache = (global::System.Boolean)Value;
        }
        private object get_35_HamburgerButtonInfo_Visibility(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.Visibility;
        }
        private void set_35_HamburgerButtonInfo_Visibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.Visibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_36_HamburgerButtonInfo_IsEnabled(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.IsEnabled;
        }
        private void set_36_HamburgerButtonInfo_IsEnabled(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.IsEnabled = (global::System.Boolean)Value;
        }
        private object get_37_HamburgerButtonInfo_IsChecked(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.IsChecked;
        }
        private void set_37_HamburgerButtonInfo_IsChecked(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.IsChecked = (global::System.Nullable<global::System.Boolean>)Value;
        }
        private object get_38_HamburgerButtonInfo_MaxWidth(object instance)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            return that.MaxWidth;
        }
        private void set_38_HamburgerButtonInfo_MaxWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerButtonInfo)instance;
            that.MaxWidth = (global::System.Double)Value;
        }
        private object get_39_HamburgerMenu_AccentColor(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.AccentColor;
        }
        private void set_39_HamburgerMenu_AccentColor(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.AccentColor = (global::Windows.UI.Color)Value;
        }
        private object get_40_HamburgerMenu_VisualStateNarrowMinWidth(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.VisualStateNarrowMinWidth;
        }
        private void set_40_HamburgerMenu_VisualStateNarrowMinWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.VisualStateNarrowMinWidth = (global::System.Double)Value;
        }
        private object get_41_HamburgerMenu_VisualStateNormalMinWidth(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.VisualStateNormalMinWidth;
        }
        private void set_41_HamburgerMenu_VisualStateNormalMinWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.VisualStateNormalMinWidth = (global::System.Double)Value;
        }
        private object get_42_HamburgerMenu_VisualStateWideMinWidth(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.VisualStateWideMinWidth;
        }
        private void set_42_HamburgerMenu_VisualStateWideMinWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.VisualStateWideMinWidth = (global::System.Double)Value;
        }
        private object get_43_HamburgerMenu_NavAreaBackground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavAreaBackground;
        }
        private void set_43_HamburgerMenu_NavAreaBackground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavAreaBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_44_HamburgerMenu_SecondarySeparator(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.SecondarySeparator;
        }
        private void set_44_HamburgerMenu_SecondarySeparator(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.SecondarySeparator = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_45_HamburgerMenu_PaneBorderBrush(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.PaneBorderBrush;
        }
        private void set_45_HamburgerMenu_PaneBorderBrush(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.PaneBorderBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_46_HamburgerMenu_HamburgerForeground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.HamburgerForeground;
        }
        private void set_46_HamburgerMenu_HamburgerForeground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.HamburgerForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_47_HamburgerMenu_HamburgerBackground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.HamburgerBackground;
        }
        private void set_47_HamburgerMenu_HamburgerBackground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.HamburgerBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_48_HamburgerMenu_NavButtonForeground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonForeground;
        }
        private void set_48_HamburgerMenu_NavButtonForeground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_49_HamburgerMenu_NavButtonBackground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonBackground;
        }
        private void set_49_HamburgerMenu_NavButtonBackground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_50_HamburgerMenu_NavButtonCheckedForeground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonCheckedForeground;
        }
        private void set_50_HamburgerMenu_NavButtonCheckedForeground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonCheckedForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_51_HamburgerMenu_NavButtonCheckedBackground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonCheckedBackground;
        }
        private void set_51_HamburgerMenu_NavButtonCheckedBackground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonCheckedBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_52_HamburgerMenu_NavButtonCheckedIndicatorBrush(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonCheckedIndicatorBrush;
        }
        private void set_52_HamburgerMenu_NavButtonCheckedIndicatorBrush(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonCheckedIndicatorBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_53_HamburgerMenu_NavButtonPressedForeground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonPressedForeground;
        }
        private void set_53_HamburgerMenu_NavButtonPressedForeground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonPressedForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_54_HamburgerMenu_NavButtonPressedBackground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonPressedBackground;
        }
        private void set_54_HamburgerMenu_NavButtonPressedBackground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonPressedBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_55_HamburgerMenu_NavButtonHoverForeground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonHoverForeground;
        }
        private void set_55_HamburgerMenu_NavButtonHoverForeground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonHoverForeground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_56_HamburgerMenu_NavButtonHoverBackground(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavButtonHoverBackground;
        }
        private void set_56_HamburgerMenu_NavButtonHoverBackground(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavButtonHoverBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_57_HamburgerMenu_HamburgerButtonVisibility(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.HamburgerButtonVisibility;
        }
        private void set_57_HamburgerMenu_HamburgerButtonVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.HamburgerButtonVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_58_HamburgerMenu_DisplayMode(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.DisplayMode;
        }
        private void set_58_HamburgerMenu_DisplayMode(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.DisplayMode = (global::Windows.UI.Xaml.Controls.SplitViewDisplayMode)Value;
        }
        private object get_59_HamburgerMenu_VisualStateNarrowDisplayMode(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.VisualStateNarrowDisplayMode;
        }
        private void set_59_HamburgerMenu_VisualStateNarrowDisplayMode(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.VisualStateNarrowDisplayMode = (global::Windows.UI.Xaml.Controls.SplitViewDisplayMode)Value;
        }
        private object get_60_HamburgerMenu_VisualStateNormalDisplayMode(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.VisualStateNormalDisplayMode;
        }
        private void set_60_HamburgerMenu_VisualStateNormalDisplayMode(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.VisualStateNormalDisplayMode = (global::Windows.UI.Xaml.Controls.SplitViewDisplayMode)Value;
        }
        private object get_61_HamburgerMenu_VisualStateWideDisplayMode(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.VisualStateWideDisplayMode;
        }
        private void set_61_HamburgerMenu_VisualStateWideDisplayMode(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.VisualStateWideDisplayMode = (global::Windows.UI.Xaml.Controls.SplitViewDisplayMode)Value;
        }
        private object get_62_HamburgerMenu_SecondaryButtonOrientation(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.SecondaryButtonOrientation;
        }
        private void set_62_HamburgerMenu_SecondaryButtonOrientation(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.SecondaryButtonOrientation = (global::Windows.UI.Xaml.Controls.Orientation)Value;
        }
        private object get_63_HamburgerMenu_Selected(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.Selected;
        }
        private void set_63_HamburgerMenu_Selected(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.Selected = (global::Template10.Controls.HamburgerButtonInfo)Value;
        }
        private object get_64_HamburgerMenu_NavigationService(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavigationService;
        }
        private void set_64_HamburgerMenu_NavigationService(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.NavigationService = (global::Template10.Services.NavigationService.INavigationService)Value;
        }
        private object get_65_HamburgerMenu_IsFullScreen(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.IsFullScreen;
        }
        private void set_65_HamburgerMenu_IsFullScreen(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.IsFullScreen = (global::System.Boolean)Value;
        }
        private object get_66_HamburgerMenu_PaneWidth(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.PaneWidth;
        }
        private void set_66_HamburgerMenu_PaneWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.PaneWidth = (global::System.Double)Value;
        }
        private object get_67_HamburgerMenu_HamburgerButtonGridWidth(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.HamburgerButtonGridWidth;
        }
        private void set_67_HamburgerMenu_HamburgerButtonGridWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.HamburgerButtonGridWidth = (global::System.Double)Value;
        }
        private object get_68_HamburgerMenu_OpenCloseMode(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.OpenCloseMode;
        }
        private void set_68_HamburgerMenu_OpenCloseMode(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.OpenCloseMode = (global::Template10.Controls.HamburgerMenu.OpenCloseModes)Value;
        }
        private object get_69_HamburgerMenu_PaneBorderThickness(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.PaneBorderThickness;
        }
        private void set_69_HamburgerMenu_PaneBorderThickness(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.PaneBorderThickness = (global::Windows.UI.Xaml.Thickness)Value;
        }
        private object get_70_HamburgerMenu_HeaderContent(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.HeaderContent;
        }
        private void set_70_HamburgerMenu_HeaderContent(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.HeaderContent = (global::Windows.UI.Xaml.UIElement)Value;
        }
        private object get_71_HamburgerMenu_IsOpen(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.IsOpen;
        }
        private void set_71_HamburgerMenu_IsOpen(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_72_HamburgerMenu_SecondaryButtons(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.SecondaryButtons;
        }
        private void set_72_HamburgerMenu_SecondaryButtons(object instance, object Value)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            that.SecondaryButtons = (global::System.Collections.ObjectModel.ObservableCollection<global::Template10.Controls.HamburgerButtonInfo>)Value;
        }
        private object get_73_HamburgerMenu_NavCommand(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.NavCommand;
        }
        private object get_74_HamburgerMenu_PropertyChangedHandlers(object instance)
        {
            var that = (global::Template10.Controls.HamburgerMenu)instance;
            return that.PropertyChangedHandlers;
        }
        private object get_75_PageHeader_VisualStateNarrowMinWidth(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.VisualStateNarrowMinWidth;
        }
        private void set_75_PageHeader_VisualStateNarrowMinWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.VisualStateNarrowMinWidth = (global::System.Double)Value;
        }
        private object get_76_PageHeader_VisualStateNormalMinWidth(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.VisualStateNormalMinWidth;
        }
        private void set_76_PageHeader_VisualStateNormalMinWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.VisualStateNormalMinWidth = (global::System.Double)Value;
        }
        private object get_77_PageHeader_EllipsisVisibility(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.EllipsisVisibility;
        }
        private void set_77_PageHeader_EllipsisVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.EllipsisVisibility = (global::Template10.Behaviors.EllipsisBehavior.Visibilities)Value;
        }
        private object get_78_PageHeader_PrimaryCommandsVisibility(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.PrimaryCommandsVisibility;
        }
        private void set_78_PageHeader_PrimaryCommandsVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.PrimaryCommandsVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_79_PageHeader_BackButtonVisibility(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.BackButtonVisibility;
        }
        private void set_79_PageHeader_BackButtonVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.BackButtonVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_80_PageHeader_BackButtonContent(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.BackButtonContent;
        }
        private void set_80_PageHeader_BackButtonContent(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.BackButtonContent = (global::Windows.UI.Xaml.Controls.Symbol)Value;
        }
        private object get_81_PageHeader_Frame(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.Frame;
        }
        private void set_81_PageHeader_Frame(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.Frame = (global::Windows.UI.Xaml.Controls.Frame)Value;
        }
        private object get_82_PageHeader_EnableHamburgerMenuAutoLayout(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.EnableHamburgerMenuAutoLayout;
        }
        private void set_82_PageHeader_EnableHamburgerMenuAutoLayout(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.EnableHamburgerMenuAutoLayout = (global::System.Boolean)Value;
        }
        private object get_83_PageHeader_Text(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.Text;
        }
        private void set_83_PageHeader_Text(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_84_Resizer_ElementControl(object instance)
        {
            var that = (global::Template10.Controls.Resizer)instance;
            return that.ElementControl;
        }
        private void set_84_Resizer_ElementControl(object instance, object Value)
        {
            var that = (global::Template10.Controls.Resizer)instance;
            that.ElementControl = (global::Windows.UI.Xaml.Controls.Control)Value;
        }
        private object get_85_Resizer_GrabberBrush(object instance)
        {
            var that = (global::Template10.Controls.Resizer)instance;
            return that.GrabberBrush;
        }
        private void set_85_Resizer_GrabberBrush(object instance, object Value)
        {
            var that = (global::Template10.Controls.Resizer)instance;
            that.GrabberBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_86_Resizer_GrabberVisibility(object instance)
        {
            var that = (global::Template10.Controls.Resizer)instance;
            return that.GrabberVisibility;
        }
        private void set_86_Resizer_GrabberVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.Resizer)instance;
            that.GrabberVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_87_Resizer_GrabberSize(object instance)
        {
            var that = (global::Template10.Controls.Resizer)instance;
            return that.GrabberSize;
        }
        private void set_87_Resizer_GrabberSize(object instance, object Value)
        {
            var that = (global::Template10.Controls.Resizer)instance;
            that.GrabberSize = (global::Windows.Foundation.Size)Value;
        }
        private object get_88_ContentDialogSemanticZoomViewModel_inAssignTable(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.ContentDialogSemanticZoomViewModel)instance;
            return that.inAssignTable;
        }
        private void set_88_ContentDialogSemanticZoomViewModel_inAssignTable(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.ContentDialogSemanticZoomViewModel)instance;
            that.inAssignTable = (global::System.String)Value;
        }
        private object get_89_ContentDialogSemanticZoomViewModel_inParentFieldName(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.ContentDialogSemanticZoomViewModel)instance;
            return that.inParentFieldName;
        }
        private void set_89_ContentDialogSemanticZoomViewModel_inParentFieldName(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.ContentDialogSemanticZoomViewModel)instance;
            that.inParentFieldName = (global::System.String)Value;
        }
        private object get_90_ContentDialogSemanticZoomViewModel_inChildFieldName(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.ContentDialogSemanticZoomViewModel)instance;
            return that.inChildFieldName;
        }
        private void set_90_ContentDialogSemanticZoomViewModel_inChildFieldName(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.ContentDialogSemanticZoomViewModel)instance;
            that.inChildFieldName = (global::System.String)Value;
        }
        private object get_91_ContentDialogSemanticZoomViewModel_userTheme(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.ContentDialogSemanticZoomViewModel)instance;
            return that.userTheme;
        }
        private void set_91_ContentDialogSemanticZoomViewModel_userTheme(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.ContentDialogSemanticZoomViewModel)instance;
            that.userTheme = (global::Windows.UI.Xaml.ElementTheme)Value;
        }
        private object get_92_ContentDialogSemanticZoomViewModel_Groups(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.ContentDialogSemanticZoomViewModel)instance;
            return that.Groups;
        }
        private void set_92_ContentDialogSemanticZoomViewModel_Groups(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.ContentDialogSemanticZoomViewModel)instance;
            that.Groups = (global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.SemanticDataGroup>)Value;
        }
        private object get_93_SemanticDataGroup_Name(object instance)
        {
            var that = (global::GSCFieldApp.Models.SemanticDataGroup)instance;
            return that.Name;
        }
        private void set_93_SemanticDataGroup_Name(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Models.SemanticDataGroup)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_94_SemanticDataGroup_Items(object instance)
        {
            var that = (global::GSCFieldApp.Models.SemanticDataGroup)instance;
            return that.Items;
        }
        private void set_94_SemanticDataGroup_Items(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Models.SemanticDataGroup)instance;
            that.Items = (global::System.Collections.Generic.List<global::GSCFieldApp.Models.SemanticData>)Value;
        }
        private object get_95_SemanticData_Title(object instance)
        {
            var that = (global::GSCFieldApp.Models.SemanticData)instance;
            return that.Title;
        }
        private object get_96_SemanticData_Subtitle(object instance)
        {
            var that = (global::GSCFieldApp.Models.SemanticData)instance;
            return that.Subtitle;
        }
        private object get_97_ViewModelBase_NavigationService(object instance)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            return that.NavigationService;
        }
        private void set_97_ViewModelBase_NavigationService(object instance, object Value)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            that.NavigationService = (global::Template10.Services.NavigationService.INavigationService)Value;
        }
        private object get_98_ViewModelBase_Dispatcher(object instance)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            return that.Dispatcher;
        }
        private void set_98_ViewModelBase_Dispatcher(object instance, object Value)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            that.Dispatcher = (global::Template10.Common.IDispatcherWrapper)Value;
        }
        private object get_99_ViewModelBase_SessionState(object instance)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            return that.SessionState;
        }
        private void set_99_ViewModelBase_SessionState(object instance, object Value)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            that.SessionState = (global::Template10.Common.IStateItems)Value;
        }
        private object get_100_ContentDialogSemanticZoom_ViewModel(object instance)
        {
            var that = (global::GSCFieldApp.Views.ContentDialogSemanticZoom)instance;
            return that.ViewModel;
        }
        private void set_100_ContentDialogSemanticZoom_ViewModel(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Views.ContentDialogSemanticZoom)instance;
            that.ViewModel = (global::GSCFieldApp.ViewModels.ContentDialogSemanticZoomViewModel)Value;
        }
        private object get_101_DocumentDialog_DocViewModel(object instance)
        {
            var that = (global::GSCFieldApp.Views.DocumentDialog)instance;
            return that.DocViewModel;
        }
        private void set_101_DocumentDialog_DocViewModel(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Views.DocumentDialog)instance;
            that.DocViewModel = (global::GSCFieldApp.ViewModels.DocumentViewModel)Value;
        }
        private object get_102_DocumentDialog_parentViewModel(object instance)
        {
            var that = (global::GSCFieldApp.Views.DocumentDialog)instance;
            return that.parentViewModel;
        }
        private void set_102_DocumentDialog_parentViewModel(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Views.DocumentDialog)instance;
            that.parentViewModel = (global::GSCFieldApp.Models.FieldNotes)Value;
        }
        private object get_103_EarthmatDialog_ViewModel(object instance)
        {
            var that = (global::GSCFieldApp.Views.EarthmatDialog)instance;
            return that.ViewModel;
        }
        private void set_103_EarthmatDialog_ViewModel(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Views.EarthmatDialog)instance;
            that.ViewModel = (global::GSCFieldApp.ViewModels.EarthmatViewModel)Value;
        }
        private object get_104_EarthmatDialog_parentViewMode(object instance)
        {
            var that = (global::GSCFieldApp.Views.EarthmatDialog)instance;
            return that.parentViewMode;
        }
        private void set_104_EarthmatDialog_parentViewMode(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Views.EarthmatDialog)instance;
            that.parentViewMode = (global::GSCFieldApp.Models.FieldNotes)Value;
        }
        private object get_105_EarthmatDialog_Rocks(object instance)
        {
            var that = (global::GSCFieldApp.Views.EarthmatDialog)instance;
            return that.Rocks;
        }
        private object get_106_FossilDialog_fossilModel(object instance)
        {
            var that = (global::GSCFieldApp.Views.FossilDialog)instance;
            return that.fossilModel;
        }
        private void set_106_FossilDialog_fossilModel(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Views.FossilDialog)instance;
            that.fossilModel = (global::GSCFieldApp.ViewModels.FossilViewModel)Value;
        }
        private object get_107_FossilDialog_fossilParentViewModel(object instance)
        {
            var that = (global::GSCFieldApp.Views.FossilDialog)instance;
            return that.fossilParentViewModel;
        }
        private void set_107_FossilDialog_fossilParentViewModel(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Views.FossilDialog)instance;
            that.fossilParentViewModel = (global::GSCFieldApp.Models.FieldNotes)Value;
        }
        private object get_108_LocationDialog_locationVM(object instance)
        {
            var that = (global::GSCFieldApp.Views.LocationDialog)instance;
            return that.locationVM;
        }
        private void set_108_LocationDialog_locationVM(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Views.LocationDialog)instance;
            that.locationVM = (global::GSCFieldApp.ViewModels.LocationViewModel)Value;
        }
        private object get_109_LocationDialog_parentViewModel(object instance)
        {
            var that = (global::GSCFieldApp.Views.LocationDialog)instance;
            return that.parentViewModel;
        }
        private void set_109_LocationDialog_parentViewModel(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Views.LocationDialog)instance;
            that.parentViewModel = (global::GSCFieldApp.Models.FieldNotes)Value;
        }
        private object get_110_MapPageViewModel_currentMapView(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            return that.currentMapView;
        }
        private void set_110_MapPageViewModel_currentMapView(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            that.currentMapView = (global::Esri.ArcGISRuntime.UI.Controls.MapView)Value;
        }
        private object get_111_MapView_Map(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            return that.Map;
        }
        private void set_111_MapView_Map(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            that.Map = (global::Esri.ArcGISRuntime.Mapping.Map)Value;
        }
        private object get_112_Map_OperationalLayers(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Map)instance;
            return that.OperationalLayers;
        }
        private void set_112_Map_OperationalLayers(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Map)instance;
            that.OperationalLayers = (global::Esri.ArcGISRuntime.Mapping.LayerCollection)Value;
        }
        private object get_113_Layer_LoadStatus(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.LoadStatus;
        }
        private object get_114_Layer_LoadError(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.LoadError;
        }
        private object get_115_Layer_Item(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.Item;
        }
        private object get_116_Layer_Attribution(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.Attribution;
        }
        private object get_117_Layer_Description(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.Description;
        }
        private object get_118_Layer_MaxScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.MaxScale;
        }
        private void set_118_Layer_MaxScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            that.MaxScale = (global::System.Double)Value;
        }
        private object get_119_Layer_MinScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.MinScale;
        }
        private void set_119_Layer_MinScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            that.MinScale = (global::System.Double)Value;
        }
        private object get_120_Layer_SpatialReference(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.SpatialReference;
        }
        private object get_121_Layer_Opacity(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.Opacity;
        }
        private void set_121_Layer_Opacity(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            that.Opacity = (global::System.Double)Value;
        }
        private object get_122_Layer_Id(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.Id;
        }
        private void set_122_Layer_Id(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            that.Id = (global::System.String)Value;
        }
        private object get_123_Layer_FullExtent(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.FullExtent;
        }
        private object get_124_Layer_CanChangeVisibility(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.CanChangeVisibility;
        }
        private object get_125_Layer_IsVisible(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.IsVisible;
        }
        private void set_125_Layer_IsVisible(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            that.IsVisible = (global::System.Boolean)Value;
        }
        private object get_126_Layer_IsIdentifyEnabled(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.IsIdentifyEnabled;
        }
        private object get_127_Layer_Name(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.Name;
        }
        private void set_127_Layer_Name(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_128_Layer_ShowInLegend(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.ShowInLegend;
        }
        private void set_128_Layer_ShowInLegend(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            that.ShowInLegend = (global::System.Boolean)Value;
        }
        private object get_129_Layer_SublayerContents(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Mapping.Layer)instance;
            return that.SublayerContents;
        }
        private object get_130_MapPageViewModel_GPSModeSymbol(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            return that.GPSModeSymbol;
        }
        private void set_130_MapPageViewModel_GPSModeSymbol(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            that.GPSModeSymbol = (global::Windows.UI.Xaml.Controls.Symbol)Value;
        }
        private object get_131_MapPageViewModel_NoMapsWatermark(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            return that.NoMapsWatermark;
        }
        private void set_131_MapPageViewModel_NoMapsWatermark(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            that.NoMapsWatermark = (global::System.Boolean)Value;
        }
        private object get_132_MapPageViewModel_FilenameValues(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            return that.FilenameValues;
        }
        private void set_132_MapPageViewModel_FilenameValues(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            that.FilenameValues = (global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.Files>)Value;
        }
        private object get_133_Files_FileName(object instance)
        {
            var that = (global::GSCFieldApp.Models.Files)instance;
            return that.FileName;
        }
        private void set_133_Files_FileName(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Models.Files)instance;
            that.FileName = (global::System.String)Value;
        }
        private object get_134_Files_FilePath(object instance)
        {
            var that = (global::GSCFieldApp.Models.Files)instance;
            return that.FilePath;
        }
        private void set_134_Files_FilePath(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Models.Files)instance;
            that.FilePath = (global::System.String)Value;
        }
        private object get_135_Files_FileVisible(object instance)
        {
            var that = (global::GSCFieldApp.Models.Files)instance;
            return that.FileVisible;
        }
        private void set_135_Files_FileVisible(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Models.Files)instance;
            that.FileVisible = (global::System.Boolean)Value;
        }
        private object get_136_Files_FileCanDelete(object instance)
        {
            var that = (global::GSCFieldApp.Models.Files)instance;
            return that.FileCanDelete;
        }
        private void set_136_Files_FileCanDelete(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Models.Files)instance;
            that.FileCanDelete = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_137_Files_FileOpacity(object instance)
        {
            var that = (global::GSCFieldApp.Models.Files)instance;
            return that.FileOpacity;
        }
        private void set_137_Files_FileOpacity(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Models.Files)instance;
            that.FileOpacity = (global::System.Double)Value;
        }
        private object get_138_MapPageViewModel_SelectedLayer(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            return that.SelectedLayer;
        }
        private void set_138_MapPageViewModel_SelectedLayer(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            that.SelectedLayer = (global::System.Object)Value;
        }
        private object get_139_MapPageViewModel_CurrentMSGeoposition(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            return that.CurrentMSGeoposition;
        }
        private void set_139_MapPageViewModel_CurrentMSGeoposition(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            that.CurrentMSGeoposition = (global::Windows.Devices.Geolocation.Geoposition)Value;
        }
        private object get_140_MapPageViewModel_CurrentLongitude(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            return that.CurrentLongitude;
        }
        private void set_140_MapPageViewModel_CurrentLongitude(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            that.CurrentLongitude = (global::System.Double)Value;
        }
        private object get_141_MapPageViewModel_CurrentLatitude(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            return that.CurrentLatitude;
        }
        private void set_141_MapPageViewModel_CurrentLatitude(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            that.CurrentLatitude = (global::System.Double)Value;
        }
        private object get_142_MapPageViewModel_CurrentAltitude(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            return that.CurrentAltitude;
        }
        private void set_142_MapPageViewModel_CurrentAltitude(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            that.CurrentAltitude = (global::System.Double)Value;
        }
        private object get_143_MapPageViewModel_CurrentAccuracy(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            return that.CurrentAccuracy;
        }
        private void set_143_MapPageViewModel_CurrentAccuracy(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            that.CurrentAccuracy = (global::System.Double)Value;
        }
        private object get_144_MapPageViewModel_lastTakenLocation(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            return that.lastTakenLocation;
        }
        private void set_144_MapPageViewModel_lastTakenLocation(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            that.lastTakenLocation = (global::System.Tuple<global::System.Double, global::System.Double>)Value;
        }
        private object get_145_MapPageViewModel_MyMapScale(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            return that.MyMapScale;
        }
        private void set_145_MapPageViewModel_MyMapScale(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            that.MyMapScale = (global::System.Double)Value;
        }
        private object get_146_MapPageViewModel_MapRingActive(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            return that.MapRingActive;
        }
        private void set_146_MapPageViewModel_MapRingActive(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            that.MapRingActive = (global::System.Boolean)Value;
        }
        private object get_147_MapPageViewModel_MapRingVisibility(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            return that.MapRingVisibility;
        }
        private void set_147_MapPageViewModel_MapRingVisibility(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            that.MapRingVisibility = (global::System.Boolean)Value;
        }
        private object get_148_MapPageViewModel_MapRingLabelAcquiringGPSVisibility(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            return that.MapRingLabelAcquiringGPSVisibility;
        }
        private void set_148_MapPageViewModel_MapRingLabelAcquiringGPSVisibility(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            that.MapRingLabelAcquiringGPSVisibility = (global::System.Boolean)Value;
        }
        private object get_149_MapPageViewModel_MapPageQuickMeasurementEnable(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            return that.MapPageQuickMeasurementEnable;
        }
        private void set_149_MapPageViewModel_MapPageQuickMeasurementEnable(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            that.MapPageQuickMeasurementEnable = (global::System.Boolean)Value;
        }
        private object get_150_MapPageViewModel_MapPageQuickPhotoEnable(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            return that.MapPageQuickPhotoEnable;
        }
        private void set_150_MapPageViewModel_MapPageQuickPhotoEnable(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            that.MapPageQuickPhotoEnable = (global::System.Boolean)Value;
        }
        private object get_151_MapPageViewModel_MapPageQuickSampleEnable(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            return that.MapPageQuickSampleEnable;
        }
        private void set_151_MapPageViewModel_MapPageQuickSampleEnable(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            that.MapPageQuickSampleEnable = (global::System.Boolean)Value;
        }
        private object get_152_MapPageViewModel_vocabEntryTypeTap(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            return that.vocabEntryTypeTap;
        }
        private void set_152_MapPageViewModel_vocabEntryTypeTap(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            that.vocabEntryTypeTap = (global::System.String)Value;
        }
        private object get_153_MapPageViewModel_vocabEntryTypeGPS(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            return that.vocabEntryTypeGPS;
        }
        private void set_153_MapPageViewModel_vocabEntryTypeGPS(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            that.vocabEntryTypeGPS = (global::System.String)Value;
        }
        private object get_154_MapPageViewModel_vocabElevmethodGPS(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            return that.vocabElevmethodGPS;
        }
        private void set_154_MapPageViewModel_vocabElevmethodGPS(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            that.vocabElevmethodGPS = (global::System.String)Value;
        }
        private object get_155_MapPageViewModel_vocabErrorMeasureTypeMeter(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            return that.vocabErrorMeasureTypeMeter;
        }
        private void set_155_MapPageViewModel_vocabErrorMeasureTypeMeter(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            that.vocabErrorMeasureTypeMeter = (global::System.String)Value;
        }
        private object get_156_MapPageViewModel_vocabEntryTypeManual(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            return that.vocabEntryTypeManual;
        }
        private void set_156_MapPageViewModel_vocabEntryTypeManual(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.MapPageViewModel)instance;
            that.vocabEntryTypeManual = (global::System.String)Value;
        }
        private object get_157_MapView_MapScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            return that.MapScale;
        }
        private object get_158_MapView_MapRotation(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            return that.MapRotation;
        }
        private object get_159_MapView_UnitsPerPixel(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            return that.UnitsPerPixel;
        }
        private object get_160_MapView_VisibleArea(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            return that.VisibleArea;
        }
        private object get_161_MapView_WrapAroundMode(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            return that.WrapAroundMode;
        }
        private void set_161_MapView_WrapAroundMode(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            that.WrapAroundMode = (global::Esri.ArcGISRuntime.UI.WrapAroundMode)Value;
        }
        private object get_162_MapView_Labeling(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            return that.Labeling;
        }
        private void set_162_MapView_Labeling(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            that.Labeling = (global::Esri.ArcGISRuntime.UI.ViewLabelProperties)Value;
        }
        private object get_163_MapView_LocationDisplay(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            return that.LocationDisplay;
        }
        private object get_164_MapView_BackgroundGrid(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            return that.BackgroundGrid;
        }
        private void set_164_MapView_BackgroundGrid(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            that.BackgroundGrid = (global::Esri.ArcGISRuntime.UI.BackgroundGrid)Value;
        }
        private object get_165_MapView_Grid(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            return that.Grid;
        }
        private void set_165_MapView_Grid(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            that.Grid = (global::Esri.ArcGISRuntime.UI.Grid)Value;
        }
        private object get_166_MapView_SketchEditor(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            return that.SketchEditor;
        }
        private void set_166_MapView_SketchEditor(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            that.SketchEditor = (global::Esri.ArcGISRuntime.UI.SketchEditor)Value;
        }
        private object get_167_MapView_InteractionOptions(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            return that.InteractionOptions;
        }
        private void set_167_MapView_InteractionOptions(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.MapView)instance;
            that.InteractionOptions = (global::Esri.ArcGISRuntime.UI.MapViewInteractionOptions)Value;
        }
        private object get_168_GeoView_IsCalloutVisible(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            return that.IsCalloutVisible;
        }
        private object get_169_GeoView_GraphicsOverlays(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            return that.GraphicsOverlays;
        }
        private void set_169_GeoView_GraphicsOverlays(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            that.GraphicsOverlays = (global::Esri.ArcGISRuntime.UI.GraphicsOverlayCollection)Value;
        }
        private object get_170_GraphicsOverlay_Graphics(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.Graphics;
        }
        private object get_171_Graphic_GraphicsOverlay(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Graphic)instance;
            return that.GraphicsOverlay;
        }
        private object get_172_Graphic_Geometry(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Graphic)instance;
            return that.Geometry;
        }
        private void set_172_Graphic_Geometry(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Graphic)instance;
            that.Geometry = (global::Esri.ArcGISRuntime.Geometry.Geometry)Value;
        }
        private object get_173_Graphic_Symbol(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Graphic)instance;
            return that.Symbol;
        }
        private void set_173_Graphic_Symbol(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Graphic)instance;
            that.Symbol = (global::Esri.ArcGISRuntime.Symbology.Symbol)Value;
        }
        private object get_174_Graphic_IsVisible(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Graphic)instance;
            return that.IsVisible;
        }
        private void set_174_Graphic_IsVisible(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Graphic)instance;
            that.IsVisible = (global::System.Boolean)Value;
        }
        private object get_175_Graphic_IsSelected(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Graphic)instance;
            return that.IsSelected;
        }
        private void set_175_Graphic_IsSelected(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Graphic)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_176_Graphic_ZIndex(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Graphic)instance;
            return that.ZIndex;
        }
        private void set_176_Graphic_ZIndex(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Graphic)instance;
            that.ZIndex = (global::System.Int32)Value;
        }
        private object get_177_GeoElement_Attributes(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Data.GeoElement)instance;
            return that.Attributes;
        }
        private object get_178_GraphicsOverlay_Id(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.Id;
        }
        private void set_178_GraphicsOverlay_Id(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            that.Id = (global::System.String)Value;
        }
        private object get_179_GraphicsOverlay_Extent(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.Extent;
        }
        private object get_180_GraphicsOverlay_RenderingMode(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.RenderingMode;
        }
        private void set_180_GraphicsOverlay_RenderingMode(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            that.RenderingMode = (global::Esri.ArcGISRuntime.UI.GraphicsRenderingMode)Value;
        }
#pragma warning disable 0618  //   Warning on Deprecated usage
        private object get_181_GraphicsOverlay_SelectionColor(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.SelectionColor;
        }
        private void set_181_GraphicsOverlay_SelectionColor(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            that.SelectionColor = (global::System.Drawing.Color)Value;
        }
#pragma warning restore 0618
        private object get_182_GraphicsOverlay_Renderer(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.Renderer;
        }
        private void set_182_GraphicsOverlay_Renderer(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            that.Renderer = (global::Esri.ArcGISRuntime.Symbology.Renderer)Value;
        }
        private object get_183_GraphicsOverlay_IsVisible(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.IsVisible;
        }
        private void set_183_GraphicsOverlay_IsVisible(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            that.IsVisible = (global::System.Boolean)Value;
        }
        private object get_184_GraphicsOverlay_Opacity(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.Opacity;
        }
        private void set_184_GraphicsOverlay_Opacity(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            that.Opacity = (global::System.Double)Value;
        }
        private object get_185_GraphicsOverlay_IsPopupEnabled(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.IsPopupEnabled;
        }
        private void set_185_GraphicsOverlay_IsPopupEnabled(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            that.IsPopupEnabled = (global::System.Boolean)Value;
        }
        private object get_186_GraphicsOverlay_PopupDefinition(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.PopupDefinition;
        }
        private void set_186_GraphicsOverlay_PopupDefinition(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            that.PopupDefinition = (global::Esri.ArcGISRuntime.Mapping.Popups.PopupDefinition)Value;
        }
        private object get_187_GraphicsOverlay_MinScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.MinScale;
        }
        private void set_187_GraphicsOverlay_MinScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            that.MinScale = (global::System.Double)Value;
        }
        private object get_188_GraphicsOverlay_MaxScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.MaxScale;
        }
        private void set_188_GraphicsOverlay_MaxScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            that.MaxScale = (global::System.Double)Value;
        }
        private object get_189_GraphicsOverlay_SceneProperties(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.SceneProperties;
        }
        private void set_189_GraphicsOverlay_SceneProperties(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            that.SceneProperties = (global::Esri.ArcGISRuntime.Mapping.LayerSceneProperties)Value;
        }
        private object get_190_GraphicsOverlay_SelectedGraphics(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.SelectedGraphics;
        }
        private object get_191_GraphicsOverlay_LabelDefinitions(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.LabelDefinitions;
        }
        private object get_192_GraphicsOverlay_LabelsEnabled(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            return that.LabelsEnabled;
        }
        private void set_192_GraphicsOverlay_LabelsEnabled(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.GraphicsOverlay)instance;
            that.LabelsEnabled = (global::System.Boolean)Value;
        }
        private object get_193_GeoView_IsAttributionTextVisible(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            return that.IsAttributionTextVisible;
        }
        private void set_193_GeoView_IsAttributionTextVisible(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            that.IsAttributionTextVisible = (global::System.Boolean)Value;
        }
        private object get_194_GeoView_AttributionText(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            return that.AttributionText;
        }
        private object get_195_GeoView_SpatialReference(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            return that.SpatialReference;
        }
        private object get_196_GeoView_IsWrapAroundEnabled(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            return that.IsWrapAroundEnabled;
        }
        private object get_197_GeoView_IsNavigating(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            return that.IsNavigating;
        }
        private object get_198_GeoView_DrawStatus(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            return that.DrawStatus;
        }
        private object get_199_GeoView_ViewInsets(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            return that.ViewInsets;
        }
        private void set_199_GeoView_ViewInsets(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            that.ViewInsets = (global::Windows.UI.Xaml.Thickness)Value;
        }
        private object get_200_GeoView_TimeExtent(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            return that.TimeExtent;
        }
        private void set_200_GeoView_TimeExtent(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            that.TimeExtent = (global::Esri.ArcGISRuntime.TimeExtent)Value;
        }
        private object get_201_GeoView_Overlays(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            return that.Overlays;
        }
        private void set_201_GeoView_Overlays(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            that.Overlays = (global::Esri.ArcGISRuntime.UI.Controls.OverlayItemsControl)Value;
        }
        private object get_202_OverlayItemsControl_Items(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.OverlayItemsControl)instance;
            return that.Items;
        }
        private object get_203_GeoView_SelectionProperties(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            return that.SelectionProperties;
        }
        private void set_203_GeoView_SelectionProperties(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.UI.Controls.GeoView)instance;
            that.SelectionProperties = (global::Esri.ArcGISRuntime.UI.SelectionProperties)Value;
        }
        private object get_204_GeoView_ViewOverlayAnchor(object instance)
        {
            return global::Esri.ArcGISRuntime.UI.Controls.GeoView.GetViewOverlayAnchor((global::Windows.UI.Xaml.FrameworkElement)instance);
        }
        private void set_204_GeoView_ViewOverlayAnchor(object instance, object Value)
        {
            global::Esri.ArcGISRuntime.UI.Controls.GeoView.SetViewOverlayAnchor((global::Windows.UI.Xaml.FrameworkElement)instance, (global::Esri.ArcGISRuntime.Geometry.MapPoint)Value);
        }
        private object get_205_ScaleLine_MapView(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Toolkit.UI.Controls.ScaleLine)instance;
            return that.MapView;
        }
        private void set_205_ScaleLine_MapView(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Toolkit.UI.Controls.ScaleLine)instance;
            that.MapView = (global::Esri.ArcGISRuntime.UI.Controls.MapView)Value;
        }
        private object get_206_ScaleLine_MapScale(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Toolkit.UI.Controls.ScaleLine)instance;
            return that.MapScale;
        }
        private void set_206_ScaleLine_MapScale(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Toolkit.UI.Controls.ScaleLine)instance;
            that.MapScale = (global::System.Double)Value;
        }
        private object get_207_ScaleLine_TargetWidth(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Toolkit.UI.Controls.ScaleLine)instance;
            return that.TargetWidth;
        }
        private void set_207_ScaleLine_TargetWidth(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Toolkit.UI.Controls.ScaleLine)instance;
            that.TargetWidth = (global::System.Double)Value;
        }
        private object get_208_MineralizationAlterationDialog_MAViewModel(object instance)
        {
            var that = (global::GSCFieldApp.Views.MineralizationAlterationDialog)instance;
            return that.MAViewModel;
        }
        private void set_208_MineralizationAlterationDialog_MAViewModel(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Views.MineralizationAlterationDialog)instance;
            that.MAViewModel = (global::GSCFieldApp.ViewModels.MineralizationAlterationViewModel)Value;
        }
        private object get_209_MineralizationAlterationDialog_parentViewModel(object instance)
        {
            var that = (global::GSCFieldApp.Views.MineralizationAlterationDialog)instance;
            return that.parentViewModel;
        }
        private void set_209_MineralizationAlterationDialog_parentViewModel(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Views.MineralizationAlterationDialog)instance;
            that.parentViewModel = (global::GSCFieldApp.Models.FieldNotes)Value;
        }
        private object get_210_MineralDialog_MineralVM(object instance)
        {
            var that = (global::GSCFieldApp.Views.MineralDialog)instance;
            return that.MineralVM;
        }
        private void set_210_MineralDialog_MineralVM(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Views.MineralDialog)instance;
            that.MineralVM = (global::GSCFieldApp.ViewModels.MineralViewModel)Value;
        }
        private object get_211_MineralDialog_parentViewModel(object instance)
        {
            var that = (global::GSCFieldApp.Views.MineralDialog)instance;
            return that.parentViewModel;
        }
        private void set_211_MineralDialog_parentViewModel(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Views.MineralDialog)instance;
            that.parentViewModel = (global::GSCFieldApp.Models.FieldNotes)Value;
        }
        private object get_212_PaleoflowDialog_pflowModel(object instance)
        {
            var that = (global::GSCFieldApp.Views.PaleoflowDialog)instance;
            return that.pflowModel;
        }
        private void set_212_PaleoflowDialog_pflowModel(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Views.PaleoflowDialog)instance;
            that.pflowModel = (global::GSCFieldApp.ViewModels.PaleoflowViewModel)Value;
        }
        private object get_213_PaleoflowDialog_pflowParentViewModel(object instance)
        {
            var that = (global::GSCFieldApp.Views.PaleoflowDialog)instance;
            return that.pflowParentViewModel;
        }
        private void set_213_PaleoflowDialog_pflowParentViewModel(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Views.PaleoflowDialog)instance;
            that.pflowParentViewModel = (global::GSCFieldApp.Models.FieldNotes)Value;
        }
        private object get_214_ReportPage_ViewModel(object instance)
        {
            var that = (global::GSCFieldApp.Views.ReportPage)instance;
            return that.ViewModel;
        }
        private void set_214_ReportPage_ViewModel(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Views.ReportPage)instance;
            that.ViewModel = (global::GSCFieldApp.ViewModels.FieldNotesViewModel)Value;
        }
        private object get_215_SampleDialog_ViewModel(object instance)
        {
            var that = (global::GSCFieldApp.Views.SampleDialog)instance;
            return that.ViewModel;
        }
        private void set_215_SampleDialog_ViewModel(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Views.SampleDialog)instance;
            that.ViewModel = (global::GSCFieldApp.ViewModels.SampleViewModel)Value;
        }
        private object get_216_SampleDialog_parentViewModel(object instance)
        {
            var that = (global::GSCFieldApp.Views.SampleDialog)instance;
            return that.parentViewModel;
        }
        private void set_216_SampleDialog_parentViewModel(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Views.SampleDialog)instance;
            that.parentViewModel = (global::GSCFieldApp.Models.FieldNotes)Value;
        }
        private object get_217_FieldBooksPageViewModel_ProjectCollection(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.FieldBooksPageViewModel)instance;
            return that.ProjectCollection;
        }
        private object get_218_FieldBooks_GeologistGeolcode(object instance)
        {
            var that = (global::GSCFieldApp.Models.FieldBooks)instance;
            return that.GeologistGeolcode;
        }
        private void set_218_FieldBooks_GeologistGeolcode(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Models.FieldBooks)instance;
            that.GeologistGeolcode = (global::System.String)Value;
        }
        private object get_219_FieldBooks_StationNumber(object instance)
        {
            var that = (global::GSCFieldApp.Models.FieldBooks)instance;
            return that.StationNumber;
        }
        private void set_219_FieldBooks_StationNumber(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Models.FieldBooks)instance;
            that.StationNumber = (global::System.String)Value;
        }
        private object get_220_FieldBooks_StationLastEntered(object instance)
        {
            var that = (global::GSCFieldApp.Models.FieldBooks)instance;
            return that.StationLastEntered;
        }
        private void set_220_FieldBooks_StationLastEntered(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Models.FieldBooks)instance;
            that.StationLastEntered = (global::System.String)Value;
        }
        private object get_221_FieldBooks_ProjectPath(object instance)
        {
            var that = (global::GSCFieldApp.Models.FieldBooks)instance;
            return that.ProjectPath;
        }
        private void set_221_FieldBooks_ProjectPath(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Models.FieldBooks)instance;
            that.ProjectPath = (global::System.String)Value;
        }
        private object get_222_FieldBooks_ProjectDBPath(object instance)
        {
            var that = (global::GSCFieldApp.Models.FieldBooks)instance;
            return that.ProjectDBPath;
        }
        private void set_222_FieldBooks_ProjectDBPath(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Models.FieldBooks)instance;
            that.ProjectDBPath = (global::System.String)Value;
        }
        private object get_223_FieldBooks_CreateDate(object instance)
        {
            var that = (global::GSCFieldApp.Models.FieldBooks)instance;
            return that.CreateDate;
        }
        private void set_223_FieldBooks_CreateDate(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Models.FieldBooks)instance;
            that.CreateDate = (global::System.String)Value;
        }
        private object get_224_FieldBooks_metadataForProject(object instance)
        {
            var that = (global::GSCFieldApp.Models.FieldBooks)instance;
            return that.metadataForProject;
        }
        private void set_224_FieldBooks_metadataForProject(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Models.FieldBooks)instance;
            that.metadataForProject = (global::GSCFieldApp.Models.Metadata)Value;
        }
        private object get_225_FieldBooksPageViewModel_ProgressRingActive(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.FieldBooksPageViewModel)instance;
            return that.ProgressRingActive;
        }
        private void set_225_FieldBooksPageViewModel_ProgressRingActive(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.FieldBooksPageViewModel)instance;
            that.ProgressRingActive = (global::System.Boolean)Value;
        }
        private object get_226_FieldBooksPageViewModel_ProgressRingVisibility(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.FieldBooksPageViewModel)instance;
            return that.ProgressRingVisibility;
        }
        private void set_226_FieldBooksPageViewModel_ProgressRingVisibility(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.FieldBooksPageViewModel)instance;
            that.ProgressRingVisibility = (global::System.Boolean)Value;
        }
        private object get_227_FieldBooksPageViewModel_SelectedProjectIndex(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.FieldBooksPageViewModel)instance;
            return that.SelectedProjectIndex;
        }
        private void set_227_FieldBooksPageViewModel_SelectedProjectIndex(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.FieldBooksPageViewModel)instance;
            that.SelectedProjectIndex = (global::System.Int32)Value;
        }
        private object get_228_FieldBooksPageViewModel_NoFieldBookWatermark(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.FieldBooksPageViewModel)instance;
            return that.NoFieldBookWatermark;
        }
        private void set_228_FieldBooksPageViewModel_NoFieldBookWatermark(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.FieldBooksPageViewModel)instance;
            that.NoFieldBookWatermark = (global::System.Boolean)Value;
        }
        private object get_229_FieldBooksPage_ProjectViewModel(object instance)
        {
            var that = (global::GSCFieldApp.Views.FieldBooksPage)instance;
            return that.ProjectViewModel;
        }
        private void set_229_FieldBooksPage_ProjectViewModel(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Views.FieldBooksPage)instance;
            that.ProjectViewModel = (global::GSCFieldApp.ViewModels.FieldBooksPageViewModel)Value;
        }
        private object get_230_SettingsPageViewModel_CommonToggle(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            return that.CommonToggle;
        }
        private void set_230_SettingsPageViewModel_CommonToggle(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            that.CommonToggle = (global::System.Boolean)Value;
        }
        private object get_231_SettingsPageViewModel_BedrockToggle(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            return that.BedrockToggle;
        }
        private void set_231_SettingsPageViewModel_BedrockToggle(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            that.BedrockToggle = (global::System.Boolean)Value;
        }
        private object get_232_SettingsPageViewModel_SurficialToggle(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            return that.SurficialToggle;
        }
        private void set_232_SettingsPageViewModel_SurficialToggle(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            that.SurficialToggle = (global::System.Boolean)Value;
        }
        private object get_233_SettingsPageViewModel_PhotoToggle(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            return that.PhotoToggle;
        }
        private void set_233_SettingsPageViewModel_PhotoToggle(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            that.PhotoToggle = (global::System.Boolean)Value;
        }
        private object get_234_SettingsPageViewModel_EarthToggle(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            return that.EarthToggle;
        }
        private void set_234_SettingsPageViewModel_EarthToggle(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            that.EarthToggle = (global::System.Boolean)Value;
        }
        private object get_235_SettingsPageViewModel_ExternalMeasureToggle(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            return that.ExternalMeasureToggle;
        }
        private void set_235_SettingsPageViewModel_ExternalMeasureToggle(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            that.ExternalMeasureToggle = (global::System.Boolean)Value;
        }
        private object get_236_SettingsPageViewModel_SampleToggle(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            return that.SampleToggle;
        }
        private void set_236_SettingsPageViewModel_SampleToggle(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            that.SampleToggle = (global::System.Boolean)Value;
        }
        private object get_237_SettingsPageViewModel_MAToggle(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            return that.MAToggle;
        }
        private void set_237_SettingsPageViewModel_MAToggle(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            that.MAToggle = (global::System.Boolean)Value;
        }
        private object get_238_SettingsPageViewModel_StructureToggle(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            return that.StructureToggle;
        }
        private void set_238_SettingsPageViewModel_StructureToggle(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            that.StructureToggle = (global::System.Boolean)Value;
        }
        private object get_239_SettingsPageViewModel_FossilToggle(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            return that.FossilToggle;
        }
        private void set_239_SettingsPageViewModel_FossilToggle(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            that.FossilToggle = (global::System.Boolean)Value;
        }
        private object get_240_SettingsPageViewModel_MineralToggle(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            return that.MineralToggle;
        }
        private void set_240_SettingsPageViewModel_MineralToggle(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            that.MineralToggle = (global::System.Boolean)Value;
        }
        private object get_241_SettingsPageViewModel_EnvironmentToggle(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            return that.EnvironmentToggle;
        }
        private void set_241_SettingsPageViewModel_EnvironmentToggle(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            that.EnvironmentToggle = (global::System.Boolean)Value;
        }
        private object get_242_SettingsPageViewModel_SoilProfileToggle(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            return that.SoilProfileToggle;
        }
        private void set_242_SettingsPageViewModel_SoilProfileToggle(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            that.SoilProfileToggle = (global::System.Boolean)Value;
        }
        private object get_243_SettingsPageViewModel_PflowToggle(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            return that.PflowToggle;
        }
        private void set_243_SettingsPageViewModel_PflowToggle(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            that.PflowToggle = (global::System.Boolean)Value;
        }
        private object get_244_SettingsPageViewModel_LoadPicklistVisibility(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            return that.LoadPicklistVisibility;
        }
        private void set_244_SettingsPageViewModel_LoadPicklistVisibility(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            that.LoadPicklistVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_245_SettingsPageViewModel_SelectedPivotIndex(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            return that.SelectedPivotIndex;
        }
        private void set_245_SettingsPageViewModel_SelectedPivotIndex(object instance, object Value)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            that.SelectedPivotIndex = (global::System.Int32)Value;
        }
        private object get_246_SettingsPageViewModel_SettingsPartViewModel(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            return that.SettingsPartViewModel;
        }
        private object get_247_SettingsPageViewModel_AboutPartViewModel(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            return that.AboutPartViewModel;
        }
        private object get_248_SettingsPageViewModel_PicklistPartViewModel(object instance)
        {
            var that = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)instance;
            return that.PicklistPartViewModel;
        }
        private object get_249_Shell_SViewModel(object instance)
        {
            var that = (global::GSCFieldApp.Views.Shell)instance;
            return that.SViewModel;
        }
        private void set_249_Shell_SViewModel(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Views.Shell)instance;
            that.SViewModel = (global::GSCFieldApp.ViewModels.ShellViewModel)Value;
        }
        private object get_250_StationDataPart_ViewModel(object instance)
        {
            var that = (global::GSCFieldApp.Views.StationDataPart)instance;
            return that.ViewModel;
        }
        private void set_250_StationDataPart_ViewModel(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Views.StationDataPart)instance;
            that.ViewModel = (global::GSCFieldApp.ViewModels.StationViewModel)Value;
        }
        private object get_251_StationDataPart_mapPosition(object instance)
        {
            var that = (global::GSCFieldApp.Views.StationDataPart)instance;
            return that.mapPosition;
        }
        private void set_251_StationDataPart_mapPosition(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Views.StationDataPart)instance;
            that.mapPosition = (global::GSCFieldApp.Models.FieldLocation)Value;
        }
        private object get_252_StructureDialog_strucViewModel(object instance)
        {
            var that = (global::GSCFieldApp.Views.StructureDialog)instance;
            return that.strucViewModel;
        }
        private void set_252_StructureDialog_strucViewModel(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Views.StructureDialog)instance;
            that.strucViewModel = (global::GSCFieldApp.ViewModels.StructureViewModel)Value;
        }
        private object get_253_StructureDialog_parentViewModel(object instance)
        {
            var that = (global::GSCFieldApp.Views.StructureDialog)instance;
            return that.parentViewModel;
        }
        private void set_253_StructureDialog_parentViewModel(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Views.StructureDialog)instance;
            that.parentViewModel = (global::GSCFieldApp.Models.FieldNotes)Value;
        }
        private object get_254_FieldBookDialog_ViewModel(object instance)
        {
            var that = (global::GSCFieldApp.Views.FieldBookDialog)instance;
            return that.ViewModel;
        }
        private void set_254_FieldBookDialog_ViewModel(object instance, object Value)
        {
            var that = (global::GSCFieldApp.Views.FieldBookDialog)instance;
            that.ViewModel = (global::GSCFieldApp.ViewModels.FieldBookDialogViewModel)Value;
        }
        private object get_255_PictureFillSymbol_Opacity(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.Opacity;
        }
        private void set_255_PictureFillSymbol_Opacity(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.Opacity = (global::System.Double)Value;
        }
        private object get_256_PictureFillSymbol_Width(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.Width;
        }
        private void set_256_PictureFillSymbol_Width(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_257_PictureFillSymbol_Height(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.Height;
        }
        private void set_257_PictureFillSymbol_Height(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.Height = (global::System.Double)Value;
        }
        private object get_258_PictureFillSymbol_Angle(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.Angle;
        }
        private void set_258_PictureFillSymbol_Angle(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.Angle = (global::System.Double)Value;
        }
        private object get_259_PictureFillSymbol_OffsetX(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.OffsetX;
        }
        private void set_259_PictureFillSymbol_OffsetX(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.OffsetX = (global::System.Double)Value;
        }
        private object get_260_PictureFillSymbol_OffsetY(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.OffsetY;
        }
        private void set_260_PictureFillSymbol_OffsetY(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.OffsetY = (global::System.Double)Value;
        }
        private object get_261_PictureFillSymbol_ScaleX(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.ScaleX;
        }
        private void set_261_PictureFillSymbol_ScaleX(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.ScaleX = (global::System.Double)Value;
        }
        private object get_262_PictureFillSymbol_ScaleY(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.ScaleY;
        }
        private void set_262_PictureFillSymbol_ScaleY(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.ScaleY = (global::System.Double)Value;
        }
        private object get_263_PictureFillSymbol_Uri(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            return that.Uri;
        }
        private void set_263_PictureFillSymbol_Uri(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureFillSymbol)instance;
            that.Uri = (global::System.Uri)Value;
        }
        private object get_264_FillSymbol_Color(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.FillSymbol)instance;
            return that.Color;
        }
        private void set_264_FillSymbol_Color(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.FillSymbol)instance;
            that.Color = (global::System.Drawing.Color)Value;
        }
        private object get_265_FillSymbol_Outline(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.FillSymbol)instance;
            return that.Outline;
        }
        private void set_265_FillSymbol_Outline(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.FillSymbol)instance;
            that.Outline = (global::Esri.ArcGISRuntime.Symbology.LineSymbol)Value;
        }
        private object get_266_PictureMarkerSymbol_Opacity(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            return that.Opacity;
        }
        private void set_266_PictureMarkerSymbol_Opacity(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            that.Opacity = (global::System.Double)Value;
        }
        private object get_267_PictureMarkerSymbol_Width(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            return that.Width;
        }
        private void set_267_PictureMarkerSymbol_Width(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_268_PictureMarkerSymbol_Height(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            return that.Height;
        }
        private void set_268_PictureMarkerSymbol_Height(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            that.Height = (global::System.Double)Value;
        }
        private object get_269_PictureMarkerSymbol_Uri(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            return that.Uri;
        }
        private void set_269_PictureMarkerSymbol_Uri(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol)instance;
            that.Uri = (global::System.Uri)Value;
        }
        private object get_270_MarkerSymbol_Angle(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            return that.Angle;
        }
        private void set_270_MarkerSymbol_Angle(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            that.Angle = (global::System.Double)Value;
        }
        private object get_271_MarkerSymbol_AngleAlignment(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            return that.AngleAlignment;
        }
        private void set_271_MarkerSymbol_AngleAlignment(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            that.AngleAlignment = (global::Esri.ArcGISRuntime.Symbology.SymbolAngleAlignment)Value;
        }
        private object get_272_MarkerSymbol_LeaderOffsetX(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            return that.LeaderOffsetX;
        }
        private void set_272_MarkerSymbol_LeaderOffsetX(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            that.LeaderOffsetX = (global::System.Double)Value;
        }
        private object get_273_MarkerSymbol_LeaderOffsetY(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            return that.LeaderOffsetY;
        }
        private void set_273_MarkerSymbol_LeaderOffsetY(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            that.LeaderOffsetY = (global::System.Double)Value;
        }
        private object get_274_MarkerSymbol_OffsetX(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            return that.OffsetX;
        }
        private void set_274_MarkerSymbol_OffsetX(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            that.OffsetX = (global::System.Double)Value;
        }
        private object get_275_MarkerSymbol_OffsetY(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            return that.OffsetY;
        }
        private void set_275_MarkerSymbol_OffsetY(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            that.OffsetY = (global::System.Double)Value;
        }
#pragma warning disable 0618  //   Warning on Deprecated usage
        private object get_276_MarkerSymbol_RotationType(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            return that.RotationType;
        }
        private void set_276_MarkerSymbol_RotationType(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.MarkerSymbol)instance;
            that.RotationType = (global::Esri.ArcGISRuntime.Symbology.RotationType)Value;
        }
#pragma warning restore 0618
        private object get_277_SimpleFillSymbol_Style(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbol)instance;
            return that.Style;
        }
        private void set_277_SimpleFillSymbol_Style(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbol)instance;
            that.Style = (global::Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle)Value;
        }
        private object get_278_SimpleLineSymbol_Style(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)instance;
            return that.Style;
        }
        private void set_278_SimpleLineSymbol_Style(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)instance;
            that.Style = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle)Value;
        }
        private object get_279_SimpleLineSymbol_MarkerPlacement(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)instance;
            return that.MarkerPlacement;
        }
        private void set_279_SimpleLineSymbol_MarkerPlacement(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)instance;
            that.MarkerPlacement = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbolMarkerPlacement)Value;
        }
        private object get_280_SimpleLineSymbol_MarkerStyle(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)instance;
            return that.MarkerStyle;
        }
        private void set_280_SimpleLineSymbol_MarkerStyle(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)instance;
            that.MarkerStyle = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbolMarkerStyle)Value;
        }
        private object get_281_LineSymbol_Color(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.LineSymbol)instance;
            return that.Color;
        }
        private void set_281_LineSymbol_Color(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.LineSymbol)instance;
            that.Color = (global::System.Drawing.Color)Value;
        }
        private object get_282_LineSymbol_Width(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.LineSymbol)instance;
            return that.Width;
        }
        private void set_282_LineSymbol_Width(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.LineSymbol)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_283_LineSymbol_AntiAlias(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.LineSymbol)instance;
            return that.AntiAlias;
        }
        private void set_283_LineSymbol_AntiAlias(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.LineSymbol)instance;
            that.AntiAlias = (global::System.Boolean)Value;
        }
        private object get_284_SimpleMarkerSymbol_Outline(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            return that.Outline;
        }
        private void set_284_SimpleMarkerSymbol_Outline(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            that.Outline = (global::Esri.ArcGISRuntime.Symbology.SimpleLineSymbol)Value;
        }
        private object get_285_SimpleMarkerSymbol_Color(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            return that.Color;
        }
        private void set_285_SimpleMarkerSymbol_Color(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            that.Color = (global::System.Drawing.Color)Value;
        }
        private object get_286_SimpleMarkerSymbol_Size(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            return that.Size;
        }
        private void set_286_SimpleMarkerSymbol_Size(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            that.Size = (global::System.Double)Value;
        }
        private object get_287_SimpleMarkerSymbol_Style(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            return that.Style;
        }
        private void set_287_SimpleMarkerSymbol_Style(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol)instance;
            that.Style = (global::Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle)Value;
        }
        private object get_288_TextSymbol_Color(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.Color;
        }
        private void set_288_TextSymbol_Color(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.Color = (global::System.Drawing.Color)Value;
        }
        private object get_289_TextSymbol_FontDecoration(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.FontDecoration;
        }
        private void set_289_TextSymbol_FontDecoration(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.FontDecoration = (global::Esri.ArcGISRuntime.Symbology.FontDecoration)Value;
        }
        private object get_290_TextSymbol_FontFamily(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.FontFamily;
        }
        private void set_290_TextSymbol_FontFamily(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.FontFamily = (global::System.String)Value;
        }
        private object get_291_TextSymbol_FontStyle(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.FontStyle;
        }
        private void set_291_TextSymbol_FontStyle(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.FontStyle = (global::Esri.ArcGISRuntime.Symbology.FontStyle)Value;
        }
        private object get_292_TextSymbol_FontWeight(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.FontWeight;
        }
        private void set_292_TextSymbol_FontWeight(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.FontWeight = (global::Esri.ArcGISRuntime.Symbology.FontWeight)Value;
        }
        private object get_293_TextSymbol_HorizontalAlignment(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.HorizontalAlignment;
        }
        private void set_293_TextSymbol_HorizontalAlignment(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.HorizontalAlignment = (global::Esri.ArcGISRuntime.Symbology.HorizontalAlignment)Value;
        }
        private object get_294_TextSymbol_Size(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.Size;
        }
        private void set_294_TextSymbol_Size(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.Size = (global::System.Double)Value;
        }
        private object get_295_TextSymbol_Text(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.Text;
        }
        private void set_295_TextSymbol_Text(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_296_TextSymbol_VerticalAlignment(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.VerticalAlignment;
        }
        private void set_296_TextSymbol_VerticalAlignment(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.VerticalAlignment = (global::Esri.ArcGISRuntime.Symbology.VerticalAlignment)Value;
        }
        private object get_297_TextSymbol_HaloColor(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.HaloColor;
        }
        private void set_297_TextSymbol_HaloColor(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.HaloColor = (global::System.Drawing.Color)Value;
        }
        private object get_298_TextSymbol_HaloWidth(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.HaloWidth;
        }
        private void set_298_TextSymbol_HaloWidth(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.HaloWidth = (global::System.Double)Value;
        }
        private object get_299_TextSymbol_OutlineColor(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.OutlineColor;
        }
        private void set_299_TextSymbol_OutlineColor(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.OutlineColor = (global::System.Drawing.Color)Value;
        }
        private object get_300_TextSymbol_OutlineWidth(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.OutlineWidth;
        }
        private void set_300_TextSymbol_OutlineWidth(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.OutlineWidth = (global::System.Double)Value;
        }
        private object get_301_TextSymbol_BackgroundColor(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.BackgroundColor;
        }
        private void set_301_TextSymbol_BackgroundColor(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.BackgroundColor = (global::System.Drawing.Color)Value;
        }
        private object get_302_TextSymbol_KerningEnabled(object instance)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            return that.KerningEnabled;
        }
        private void set_302_TextSymbol_KerningEnabled(object instance, object Value)
        {
            var that = (global::Esri.ArcGISRuntime.Symbology.TextSymbol)instance;
            that.KerningEnabled = (global::System.Boolean)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember xamlMember = null;
            global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Template10.Common.BootStrapper.SessionState":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "SessionState", "Template10.Common.IStateItems");
                xamlMember.Getter = get_0_BootStrapper_SessionState;
                xamlMember.Setter = set_0_BootStrapper_SessionState;
                break;
            case "Template10.Common.BootStrapper.AutoRestoreAfterTerminated":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "AutoRestoreAfterTerminated", "Boolean");
                xamlMember.Getter = get_1_BootStrapper_AutoRestoreAfterTerminated;
                xamlMember.Setter = set_1_BootStrapper_AutoRestoreAfterTerminated;
                break;
            case "Template10.Common.BootStrapper.AutoExtendExecutionSession":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "AutoExtendExecutionSession", "Boolean");
                xamlMember.Getter = get_2_BootStrapper_AutoExtendExecutionSession;
                xamlMember.Setter = set_2_BootStrapper_AutoExtendExecutionSession;
                break;
            case "Template10.Common.BootStrapper.AutoSuspendAllFrames":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "AutoSuspendAllFrames", "Boolean");
                xamlMember.Getter = get_3_BootStrapper_AutoSuspendAllFrames;
                xamlMember.Setter = set_3_BootStrapper_AutoSuspendAllFrames;
                break;
            case "Template10.Common.BootStrapper.OriginalActivatedArgs":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "OriginalActivatedArgs", "Windows.ApplicationModel.Activation.IActivatedEventArgs");
                xamlMember.Getter = get_4_BootStrapper_OriginalActivatedArgs;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.ModalDialog":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ModalDialog", "Template10.Controls.ModalDialog");
                xamlMember.Getter = get_5_BootStrapper_ModalDialog;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.ModalContent":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ModalContent", "Windows.UI.Xaml.UIElement");
                xamlMember.Getter = get_6_BootStrapper_ModalContent;
                xamlMember.Setter = set_6_BootStrapper_ModalContent;
                break;
            case "Template10.Common.BootStrapper.NavigationService":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "NavigationService", "Template10.Services.NavigationService.INavigationService");
                xamlMember.Getter = get_7_BootStrapper_NavigationService;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.SplashFactory":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "SplashFactory", "System.Func`2<Windows.ApplicationModel.Activation.SplashScreen, Windows.UI.Xaml.Controls.UserControl>");
                xamlMember.Getter = get_8_BootStrapper_SplashFactory;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.CacheMaxDuration":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "CacheMaxDuration", "TimeSpan");
                xamlMember.Getter = get_9_BootStrapper_CacheMaxDuration;
                xamlMember.Setter = set_9_BootStrapper_CacheMaxDuration;
                break;
            case "Template10.Common.BootStrapper.ShowShellBackButton":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ShowShellBackButton", "Boolean");
                xamlMember.Getter = get_10_BootStrapper_ShowShellBackButton;
                xamlMember.Setter = set_10_BootStrapper_ShowShellBackButton;
                break;
            case "Template10.Common.BootStrapper.ForceShowShellBackButton":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ForceShowShellBackButton", "Boolean");
                xamlMember.Getter = get_11_BootStrapper_ForceShowShellBackButton;
                xamlMember.Setter = set_11_BootStrapper_ForceShowShellBackButton;
                break;
            case "Template10.Common.BootStrapper.EnableAutoRestoreAfterTerminated":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "EnableAutoRestoreAfterTerminated", "Boolean");
                xamlMember.Getter = get_12_BootStrapper_EnableAutoRestoreAfterTerminated;
                xamlMember.Setter = set_12_BootStrapper_EnableAutoRestoreAfterTerminated;
                break;
            case "Template10.Common.BootStrapper.CurrentState":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "CurrentState", "Template10.Common.BootstrapperStates");
                xamlMember.Getter = get_13_BootStrapper_CurrentState;
                xamlMember.Setter = set_13_BootStrapper_CurrentState;
                break;
            case "Windows.UI.Color.A":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_14_Color_A;
                xamlMember.Setter = set_14_Color_A;
                break;
            case "Windows.UI.Color.B":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_15_Color_B;
                xamlMember.Setter = set_15_Color_B;
                break;
            case "Windows.UI.Color.G":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_16_Color_G;
                xamlMember.Setter = set_16_Color_G;
                break;
            case "Windows.UI.Color.R":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_17_Color_R;
                xamlMember.Setter = set_17_Color_R;
                break;
            case "GSCFieldApp.Themes.ExpandPanel.HeaderContent":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Themes.ExpandPanel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "HeaderContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_ExpandPanel_HeaderContent;
                xamlMember.Setter = set_18_ExpandPanel_HeaderContent;
                break;
            case "GSCFieldApp.Themes.ExpandPanel.ToolContent":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Themes.ExpandPanel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ToolContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_ExpandPanel_ToolContent;
                xamlMember.Setter = set_19_ExpandPanel_ToolContent;
                break;
            case "GSCFieldApp.Themes.ExpandPanel.IsExpanded":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Themes.ExpandPanel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_ExpandPanel_IsExpanded;
                xamlMember.Setter = set_20_ExpandPanel_IsExpanded;
                break;
            case "GSCFieldApp.Themes.ExpandPanel.CornerRadius":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Themes.ExpandPanel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "CornerRadius", "Windows.UI.Xaml.CornerRadius");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_ExpandPanel_CornerRadius;
                xamlMember.Setter = set_21_ExpandPanel_CornerRadius;
                break;
            case "GSCFieldApp.Themes.ExpandPanel.HeaderBorderBrush":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Themes.ExpandPanel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "HeaderBorderBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_ExpandPanel_HeaderBorderBrush;
                xamlMember.Setter = set_22_ExpandPanel_HeaderBorderBrush;
                break;
            case "Template10.Controls.HamburgerMenu.PrimaryButtons":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "PrimaryButtons", "System.Collections.ObjectModel.ObservableCollection`1<Template10.Controls.HamburgerButtonInfo>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_HamburgerMenu_PrimaryButtons;
                xamlMember.Setter = set_23_HamburgerMenu_PrimaryButtons;
                break;
            case "Template10.Controls.HamburgerButtonInfo.Content":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Content", "Windows.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_HamburgerButtonInfo_Content;
                xamlMember.Setter = set_24_HamburgerButtonInfo_Content;
                break;
            case "Template10.Controls.HamburgerButtonInfo.ButtonType":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ButtonType", "Template10.Controls.HamburgerButtonInfo.ButtonTypes");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_HamburgerButtonInfo_ButtonType;
                xamlMember.Setter = set_25_HamburgerButtonInfo_ButtonType;
                break;
            case "Template10.Controls.HamburgerButtonInfo.NavigationTransitionInfo":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "NavigationTransitionInfo", "Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_HamburgerButtonInfo_NavigationTransitionInfo;
                xamlMember.Setter = set_26_HamburgerButtonInfo_NavigationTransitionInfo;
                break;
            case "Template10.Controls.HamburgerButtonInfo.Command":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_HamburgerButtonInfo_Command;
                xamlMember.Setter = set_27_HamburgerButtonInfo_Command;
                break;
            case "Template10.Controls.HamburgerButtonInfo.ToolTip":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ToolTip", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_HamburgerButtonInfo_ToolTip;
                xamlMember.Setter = set_28_HamburgerButtonInfo_ToolTip;
                break;
            case "Template10.Controls.HamburgerButtonInfo.CommandParameter":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_HamburgerButtonInfo_CommandParameter;
                xamlMember.Setter = set_29_HamburgerButtonInfo_CommandParameter;
                break;
            case "Template10.Controls.HamburgerButtonInfo.GroupName":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "GroupName", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_HamburgerButtonInfo_GroupName;
                xamlMember.Setter = set_30_HamburgerButtonInfo_GroupName;
                break;
            case "Template10.Controls.HamburgerButtonInfo.PageType":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "PageType", "System.Type");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_HamburgerButtonInfo_PageType;
                xamlMember.Setter = set_31_HamburgerButtonInfo_PageType;
                break;
            case "Template10.Controls.HamburgerButtonInfo.PageParameter":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "PageParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_HamburgerButtonInfo_PageParameter;
                xamlMember.Setter = set_32_HamburgerButtonInfo_PageParameter;
                break;
            case "Template10.Controls.HamburgerButtonInfo.ClearHistory":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ClearHistory", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_HamburgerButtonInfo_ClearHistory;
                xamlMember.Setter = set_33_HamburgerButtonInfo_ClearHistory;
                break;
            case "Template10.Controls.HamburgerButtonInfo.ClearCache":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ClearCache", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_HamburgerButtonInfo_ClearCache;
                xamlMember.Setter = set_34_HamburgerButtonInfo_ClearCache;
                break;
            case "Template10.Controls.HamburgerButtonInfo.Visibility":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Visibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_HamburgerButtonInfo_Visibility;
                xamlMember.Setter = set_35_HamburgerButtonInfo_Visibility;
                break;
            case "Template10.Controls.HamburgerButtonInfo.IsEnabled":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "IsEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_HamburgerButtonInfo_IsEnabled;
                xamlMember.Setter = set_36_HamburgerButtonInfo_IsEnabled;
                break;
            case "Template10.Controls.HamburgerButtonInfo.IsChecked":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "IsChecked", "System.Nullable`1<Boolean>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_HamburgerButtonInfo_IsChecked;
                xamlMember.Setter = set_37_HamburgerButtonInfo_IsChecked;
                break;
            case "Template10.Controls.HamburgerButtonInfo.MaxWidth":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerButtonInfo");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "MaxWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_HamburgerButtonInfo_MaxWidth;
                xamlMember.Setter = set_38_HamburgerButtonInfo_MaxWidth;
                break;
            case "Template10.Controls.HamburgerMenu.AccentColor":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "AccentColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_HamburgerMenu_AccentColor;
                xamlMember.Setter = set_39_HamburgerMenu_AccentColor;
                break;
            case "Template10.Controls.HamburgerMenu.VisualStateNarrowMinWidth":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "VisualStateNarrowMinWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_HamburgerMenu_VisualStateNarrowMinWidth;
                xamlMember.Setter = set_40_HamburgerMenu_VisualStateNarrowMinWidth;
                break;
            case "Template10.Controls.HamburgerMenu.VisualStateNormalMinWidth":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "VisualStateNormalMinWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_HamburgerMenu_VisualStateNormalMinWidth;
                xamlMember.Setter = set_41_HamburgerMenu_VisualStateNormalMinWidth;
                break;
            case "Template10.Controls.HamburgerMenu.VisualStateWideMinWidth":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "VisualStateWideMinWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_HamburgerMenu_VisualStateWideMinWidth;
                xamlMember.Setter = set_42_HamburgerMenu_VisualStateWideMinWidth;
                break;
            case "Template10.Controls.HamburgerMenu.NavAreaBackground":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "NavAreaBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_HamburgerMenu_NavAreaBackground;
                xamlMember.Setter = set_43_HamburgerMenu_NavAreaBackground;
                break;
            case "Template10.Controls.HamburgerMenu.SecondarySeparator":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "SecondarySeparator", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_HamburgerMenu_SecondarySeparator;
                xamlMember.Setter = set_44_HamburgerMenu_SecondarySeparator;
                break;
            case "Template10.Controls.HamburgerMenu.PaneBorderBrush":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "PaneBorderBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_HamburgerMenu_PaneBorderBrush;
                xamlMember.Setter = set_45_HamburgerMenu_PaneBorderBrush;
                break;
            case "Template10.Controls.HamburgerMenu.HamburgerForeground":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "HamburgerForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_HamburgerMenu_HamburgerForeground;
                xamlMember.Setter = set_46_HamburgerMenu_HamburgerForeground;
                break;
            case "Template10.Controls.HamburgerMenu.HamburgerBackground":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "HamburgerBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_HamburgerMenu_HamburgerBackground;
                xamlMember.Setter = set_47_HamburgerMenu_HamburgerBackground;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonForeground":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "NavButtonForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_HamburgerMenu_NavButtonForeground;
                xamlMember.Setter = set_48_HamburgerMenu_NavButtonForeground;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonBackground":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "NavButtonBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_HamburgerMenu_NavButtonBackground;
                xamlMember.Setter = set_49_HamburgerMenu_NavButtonBackground;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonCheckedForeground":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "NavButtonCheckedForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_HamburgerMenu_NavButtonCheckedForeground;
                xamlMember.Setter = set_50_HamburgerMenu_NavButtonCheckedForeground;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonCheckedBackground":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "NavButtonCheckedBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_51_HamburgerMenu_NavButtonCheckedBackground;
                xamlMember.Setter = set_51_HamburgerMenu_NavButtonCheckedBackground;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonCheckedIndicatorBrush":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "NavButtonCheckedIndicatorBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_HamburgerMenu_NavButtonCheckedIndicatorBrush;
                xamlMember.Setter = set_52_HamburgerMenu_NavButtonCheckedIndicatorBrush;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonPressedForeground":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "NavButtonPressedForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_HamburgerMenu_NavButtonPressedForeground;
                xamlMember.Setter = set_53_HamburgerMenu_NavButtonPressedForeground;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonPressedBackground":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "NavButtonPressedBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_HamburgerMenu_NavButtonPressedBackground;
                xamlMember.Setter = set_54_HamburgerMenu_NavButtonPressedBackground;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonHoverForeground":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "NavButtonHoverForeground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_HamburgerMenu_NavButtonHoverForeground;
                xamlMember.Setter = set_55_HamburgerMenu_NavButtonHoverForeground;
                break;
            case "Template10.Controls.HamburgerMenu.NavButtonHoverBackground":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "NavButtonHoverBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_HamburgerMenu_NavButtonHoverBackground;
                xamlMember.Setter = set_56_HamburgerMenu_NavButtonHoverBackground;
                break;
            case "Template10.Controls.HamburgerMenu.HamburgerButtonVisibility":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "HamburgerButtonVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_HamburgerMenu_HamburgerButtonVisibility;
                xamlMember.Setter = set_57_HamburgerMenu_HamburgerButtonVisibility;
                break;
            case "Template10.Controls.HamburgerMenu.DisplayMode":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "DisplayMode", "Windows.UI.Xaml.Controls.SplitViewDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_HamburgerMenu_DisplayMode;
                xamlMember.Setter = set_58_HamburgerMenu_DisplayMode;
                break;
            case "Template10.Controls.HamburgerMenu.VisualStateNarrowDisplayMode":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "VisualStateNarrowDisplayMode", "Windows.UI.Xaml.Controls.SplitViewDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_HamburgerMenu_VisualStateNarrowDisplayMode;
                xamlMember.Setter = set_59_HamburgerMenu_VisualStateNarrowDisplayMode;
                break;
            case "Template10.Controls.HamburgerMenu.VisualStateNormalDisplayMode":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "VisualStateNormalDisplayMode", "Windows.UI.Xaml.Controls.SplitViewDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_60_HamburgerMenu_VisualStateNormalDisplayMode;
                xamlMember.Setter = set_60_HamburgerMenu_VisualStateNormalDisplayMode;
                break;
            case "Template10.Controls.HamburgerMenu.VisualStateWideDisplayMode":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "VisualStateWideDisplayMode", "Windows.UI.Xaml.Controls.SplitViewDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_HamburgerMenu_VisualStateWideDisplayMode;
                xamlMember.Setter = set_61_HamburgerMenu_VisualStateWideDisplayMode;
                break;
            case "Template10.Controls.HamburgerMenu.SecondaryButtonOrientation":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "SecondaryButtonOrientation", "Windows.UI.Xaml.Controls.Orientation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_62_HamburgerMenu_SecondaryButtonOrientation;
                xamlMember.Setter = set_62_HamburgerMenu_SecondaryButtonOrientation;
                break;
            case "Template10.Controls.HamburgerMenu.Selected":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Selected", "Template10.Controls.HamburgerButtonInfo");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_63_HamburgerMenu_Selected;
                xamlMember.Setter = set_63_HamburgerMenu_Selected;
                break;
            case "Template10.Controls.HamburgerMenu.NavigationService":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "NavigationService", "Template10.Services.NavigationService.INavigationService");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_64_HamburgerMenu_NavigationService;
                xamlMember.Setter = set_64_HamburgerMenu_NavigationService;
                break;
            case "Template10.Controls.HamburgerMenu.IsFullScreen":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "IsFullScreen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_65_HamburgerMenu_IsFullScreen;
                xamlMember.Setter = set_65_HamburgerMenu_IsFullScreen;
                break;
            case "Template10.Controls.HamburgerMenu.PaneWidth":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "PaneWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_66_HamburgerMenu_PaneWidth;
                xamlMember.Setter = set_66_HamburgerMenu_PaneWidth;
                break;
            case "Template10.Controls.HamburgerMenu.HamburgerButtonGridWidth":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "HamburgerButtonGridWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_67_HamburgerMenu_HamburgerButtonGridWidth;
                xamlMember.Setter = set_67_HamburgerMenu_HamburgerButtonGridWidth;
                break;
            case "Template10.Controls.HamburgerMenu.OpenCloseMode":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "OpenCloseMode", "Template10.Controls.HamburgerMenu.OpenCloseModes");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_68_HamburgerMenu_OpenCloseMode;
                xamlMember.Setter = set_68_HamburgerMenu_OpenCloseMode;
                break;
            case "Template10.Controls.HamburgerMenu.PaneBorderThickness":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "PaneBorderThickness", "Windows.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_69_HamburgerMenu_PaneBorderThickness;
                xamlMember.Setter = set_69_HamburgerMenu_PaneBorderThickness;
                break;
            case "Template10.Controls.HamburgerMenu.HeaderContent":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "HeaderContent", "Windows.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_70_HamburgerMenu_HeaderContent;
                xamlMember.Setter = set_70_HamburgerMenu_HeaderContent;
                break;
            case "Template10.Controls.HamburgerMenu.IsOpen":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_71_HamburgerMenu_IsOpen;
                xamlMember.Setter = set_71_HamburgerMenu_IsOpen;
                break;
            case "Template10.Controls.HamburgerMenu.SecondaryButtons":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "SecondaryButtons", "System.Collections.ObjectModel.ObservableCollection`1<Template10.Controls.HamburgerButtonInfo>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_72_HamburgerMenu_SecondaryButtons;
                xamlMember.Setter = set_72_HamburgerMenu_SecondaryButtons;
                break;
            case "Template10.Controls.HamburgerMenu.NavCommand":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "NavCommand", "Template10.Mvvm.DelegateCommand`1<Template10.Controls.HamburgerButtonInfo>");
                xamlMember.Getter = get_73_HamburgerMenu_NavCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Controls.HamburgerMenu.PropertyChangedHandlers":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.HamburgerMenu");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "PropertyChangedHandlers", "Object");
                xamlMember.Getter = get_74_HamburgerMenu_PropertyChangedHandlers;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Controls.PageHeader.VisualStateNarrowMinWidth":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "VisualStateNarrowMinWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_75_PageHeader_VisualStateNarrowMinWidth;
                xamlMember.Setter = set_75_PageHeader_VisualStateNarrowMinWidth;
                break;
            case "Template10.Controls.PageHeader.VisualStateNormalMinWidth":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "VisualStateNormalMinWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_76_PageHeader_VisualStateNormalMinWidth;
                xamlMember.Setter = set_76_PageHeader_VisualStateNormalMinWidth;
                break;
            case "Template10.Controls.PageHeader.EllipsisVisibility":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "EllipsisVisibility", "Template10.Behaviors.EllipsisBehavior.Visibilities");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_77_PageHeader_EllipsisVisibility;
                xamlMember.Setter = set_77_PageHeader_EllipsisVisibility;
                break;
            case "Template10.Controls.PageHeader.PrimaryCommandsVisibility":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "PrimaryCommandsVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_78_PageHeader_PrimaryCommandsVisibility;
                xamlMember.Setter = set_78_PageHeader_PrimaryCommandsVisibility;
                break;
            case "Template10.Controls.PageHeader.BackButtonVisibility":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "BackButtonVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_79_PageHeader_BackButtonVisibility;
                xamlMember.Setter = set_79_PageHeader_BackButtonVisibility;
                break;
            case "Template10.Controls.PageHeader.BackButtonContent":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "BackButtonContent", "Windows.UI.Xaml.Controls.Symbol");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_80_PageHeader_BackButtonContent;
                xamlMember.Setter = set_80_PageHeader_BackButtonContent;
                break;
            case "Template10.Controls.PageHeader.Frame":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Frame", "Windows.UI.Xaml.Controls.Frame");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_81_PageHeader_Frame;
                xamlMember.Setter = set_81_PageHeader_Frame;
                break;
            case "Template10.Controls.PageHeader.EnableHamburgerMenuAutoLayout":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "EnableHamburgerMenuAutoLayout", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_82_PageHeader_EnableHamburgerMenuAutoLayout;
                xamlMember.Setter = set_82_PageHeader_EnableHamburgerMenuAutoLayout;
                break;
            case "Template10.Controls.PageHeader.Text":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_83_PageHeader_Text;
                xamlMember.Setter = set_83_PageHeader_Text;
                break;
            case "Template10.Controls.Resizer.ElementControl":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.Resizer");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ElementControl", "Windows.UI.Xaml.Controls.Control");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_84_Resizer_ElementControl;
                xamlMember.Setter = set_84_Resizer_ElementControl;
                break;
            case "Template10.Controls.Resizer.GrabberBrush":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.Resizer");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "GrabberBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_85_Resizer_GrabberBrush;
                xamlMember.Setter = set_85_Resizer_GrabberBrush;
                break;
            case "Template10.Controls.Resizer.GrabberVisibility":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.Resizer");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "GrabberVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_86_Resizer_GrabberVisibility;
                xamlMember.Setter = set_86_Resizer_GrabberVisibility;
                break;
            case "Template10.Controls.Resizer.GrabberSize":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.Resizer");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "GrabberSize", "Windows.Foundation.Size");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_87_Resizer_GrabberSize;
                xamlMember.Setter = set_87_Resizer_GrabberSize;
                break;
            case "GSCFieldApp.ViewModels.ContentDialogSemanticZoomViewModel.inAssignTable":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.ContentDialogSemanticZoomViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "inAssignTable", "String");
                xamlMember.Getter = get_88_ContentDialogSemanticZoomViewModel_inAssignTable;
                xamlMember.Setter = set_88_ContentDialogSemanticZoomViewModel_inAssignTable;
                break;
            case "GSCFieldApp.ViewModels.ContentDialogSemanticZoomViewModel.inParentFieldName":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.ContentDialogSemanticZoomViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "inParentFieldName", "String");
                xamlMember.Getter = get_89_ContentDialogSemanticZoomViewModel_inParentFieldName;
                xamlMember.Setter = set_89_ContentDialogSemanticZoomViewModel_inParentFieldName;
                break;
            case "GSCFieldApp.ViewModels.ContentDialogSemanticZoomViewModel.inChildFieldName":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.ContentDialogSemanticZoomViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "inChildFieldName", "String");
                xamlMember.Getter = get_90_ContentDialogSemanticZoomViewModel_inChildFieldName;
                xamlMember.Setter = set_90_ContentDialogSemanticZoomViewModel_inChildFieldName;
                break;
            case "GSCFieldApp.ViewModels.ContentDialogSemanticZoomViewModel.userTheme":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.ContentDialogSemanticZoomViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "userTheme", "Windows.UI.Xaml.ElementTheme");
                xamlMember.Getter = get_91_ContentDialogSemanticZoomViewModel_userTheme;
                xamlMember.Setter = set_91_ContentDialogSemanticZoomViewModel_userTheme;
                break;
            case "GSCFieldApp.ViewModels.ContentDialogSemanticZoomViewModel.Groups":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.ContentDialogSemanticZoomViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Groups", "System.Collections.ObjectModel.ObservableCollection`1<GSCFieldApp.Models.SemanticDataGroup>");
                xamlMember.Getter = get_92_ContentDialogSemanticZoomViewModel_Groups;
                xamlMember.Setter = set_92_ContentDialogSemanticZoomViewModel_Groups;
                break;
            case "GSCFieldApp.Models.SemanticDataGroup.Name":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Models.SemanticDataGroup");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_93_SemanticDataGroup_Name;
                xamlMember.Setter = set_93_SemanticDataGroup_Name;
                break;
            case "GSCFieldApp.Models.SemanticDataGroup.Items":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Models.SemanticDataGroup");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Items", "System.Collections.Generic.List`1<GSCFieldApp.Models.SemanticData>");
                xamlMember.Getter = get_94_SemanticDataGroup_Items;
                xamlMember.Setter = set_94_SemanticDataGroup_Items;
                break;
            case "GSCFieldApp.Models.SemanticData.Title":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Models.SemanticData");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_95_SemanticData_Title;
                xamlMember.SetIsReadOnly();
                break;
            case "GSCFieldApp.Models.SemanticData.Subtitle":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Models.SemanticData");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Subtitle", "String");
                xamlMember.Getter = get_96_SemanticData_Subtitle;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Mvvm.ViewModelBase.NavigationService":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Mvvm.ViewModelBase");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "NavigationService", "Template10.Services.NavigationService.INavigationService");
                xamlMember.Getter = get_97_ViewModelBase_NavigationService;
                xamlMember.Setter = set_97_ViewModelBase_NavigationService;
                break;
            case "Template10.Mvvm.ViewModelBase.Dispatcher":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Mvvm.ViewModelBase");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Dispatcher", "Template10.Common.IDispatcherWrapper");
                xamlMember.Getter = get_98_ViewModelBase_Dispatcher;
                xamlMember.Setter = set_98_ViewModelBase_Dispatcher;
                break;
            case "Template10.Mvvm.ViewModelBase.SessionState":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Mvvm.ViewModelBase");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "SessionState", "Template10.Common.IStateItems");
                xamlMember.Getter = get_99_ViewModelBase_SessionState;
                xamlMember.Setter = set_99_ViewModelBase_SessionState;
                break;
            case "GSCFieldApp.Views.ContentDialogSemanticZoom.ViewModel":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Views.ContentDialogSemanticZoom");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ViewModel", "GSCFieldApp.ViewModels.ContentDialogSemanticZoomViewModel");
                xamlMember.Getter = get_100_ContentDialogSemanticZoom_ViewModel;
                xamlMember.Setter = set_100_ContentDialogSemanticZoom_ViewModel;
                break;
            case "GSCFieldApp.Views.DocumentDialog.DocViewModel":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Views.DocumentDialog");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "DocViewModel", "GSCFieldApp.ViewModels.DocumentViewModel");
                xamlMember.Getter = get_101_DocumentDialog_DocViewModel;
                xamlMember.Setter = set_101_DocumentDialog_DocViewModel;
                break;
            case "GSCFieldApp.Views.DocumentDialog.parentViewModel":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Views.DocumentDialog");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "parentViewModel", "GSCFieldApp.Models.FieldNotes");
                xamlMember.Getter = get_102_DocumentDialog_parentViewModel;
                xamlMember.Setter = set_102_DocumentDialog_parentViewModel;
                break;
            case "GSCFieldApp.Views.EarthmatDialog.ViewModel":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Views.EarthmatDialog");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ViewModel", "GSCFieldApp.ViewModels.EarthmatViewModel");
                xamlMember.Getter = get_103_EarthmatDialog_ViewModel;
                xamlMember.Setter = set_103_EarthmatDialog_ViewModel;
                break;
            case "GSCFieldApp.Views.EarthmatDialog.parentViewMode":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Views.EarthmatDialog");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "parentViewMode", "GSCFieldApp.Models.FieldNotes");
                xamlMember.Getter = get_104_EarthmatDialog_parentViewMode;
                xamlMember.Setter = set_104_EarthmatDialog_parentViewMode;
                break;
            case "GSCFieldApp.Views.EarthmatDialog.Rocks":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Views.EarthmatDialog");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Rocks", "System.Collections.Generic.List`1<String>");
                xamlMember.Getter = get_105_EarthmatDialog_Rocks;
                xamlMember.SetIsReadOnly();
                break;
            case "GSCFieldApp.Views.FossilDialog.fossilModel":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Views.FossilDialog");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "fossilModel", "GSCFieldApp.ViewModels.FossilViewModel");
                xamlMember.Getter = get_106_FossilDialog_fossilModel;
                xamlMember.Setter = set_106_FossilDialog_fossilModel;
                break;
            case "GSCFieldApp.Views.FossilDialog.fossilParentViewModel":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Views.FossilDialog");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "fossilParentViewModel", "GSCFieldApp.Models.FieldNotes");
                xamlMember.Getter = get_107_FossilDialog_fossilParentViewModel;
                xamlMember.Setter = set_107_FossilDialog_fossilParentViewModel;
                break;
            case "GSCFieldApp.Views.LocationDialog.locationVM":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Views.LocationDialog");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "locationVM", "GSCFieldApp.ViewModels.LocationViewModel");
                xamlMember.Getter = get_108_LocationDialog_locationVM;
                xamlMember.Setter = set_108_LocationDialog_locationVM;
                break;
            case "GSCFieldApp.Views.LocationDialog.parentViewModel":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Views.LocationDialog");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "parentViewModel", "GSCFieldApp.Models.FieldNotes");
                xamlMember.Getter = get_109_LocationDialog_parentViewModel;
                xamlMember.Setter = set_109_LocationDialog_parentViewModel;
                break;
            case "GSCFieldApp.ViewModels.MapPageViewModel.currentMapView":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.MapPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "currentMapView", "Esri.ArcGISRuntime.UI.Controls.MapView");
                xamlMember.Getter = get_110_MapPageViewModel_currentMapView;
                xamlMember.Setter = set_110_MapPageViewModel_currentMapView;
                break;
            case "Esri.ArcGISRuntime.UI.Controls.MapView.Map":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.MapView");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Map", "Esri.ArcGISRuntime.Mapping.Map");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_111_MapView_Map;
                xamlMember.Setter = set_111_MapView_Map;
                break;
            case "Esri.ArcGISRuntime.Mapping.Map.OperationalLayers":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Map");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "OperationalLayers", "Esri.ArcGISRuntime.Mapping.LayerCollection");
                xamlMember.Getter = get_112_Map_OperationalLayers;
                xamlMember.Setter = set_112_Map_OperationalLayers;
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.LoadStatus":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "LoadStatus", "Esri.ArcGISRuntime.LoadStatus");
                xamlMember.Getter = get_113_Layer_LoadStatus;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.LoadError":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "LoadError", "System.Exception");
                xamlMember.Getter = get_114_Layer_LoadError;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.Item":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Item", "Esri.ArcGISRuntime.Portal.Item");
                xamlMember.Getter = get_115_Layer_Item;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.Attribution":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Attribution", "String");
                xamlMember.Getter = get_116_Layer_Attribution;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.Description":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Description", "String");
                xamlMember.Getter = get_117_Layer_Description;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.MaxScale":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "MaxScale", "Double");
                xamlMember.Getter = get_118_Layer_MaxScale;
                xamlMember.Setter = set_118_Layer_MaxScale;
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.MinScale":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "MinScale", "Double");
                xamlMember.Getter = get_119_Layer_MinScale;
                xamlMember.Setter = set_119_Layer_MinScale;
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.SpatialReference":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "SpatialReference", "Esri.ArcGISRuntime.Geometry.SpatialReference");
                xamlMember.Getter = get_120_Layer_SpatialReference;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.Opacity":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Opacity", "Double");
                xamlMember.Getter = get_121_Layer_Opacity;
                xamlMember.Setter = set_121_Layer_Opacity;
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.Id":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Id", "String");
                xamlMember.Getter = get_122_Layer_Id;
                xamlMember.Setter = set_122_Layer_Id;
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.FullExtent":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "FullExtent", "Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember.Getter = get_123_Layer_FullExtent;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.CanChangeVisibility":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "CanChangeVisibility", "Boolean");
                xamlMember.Getter = get_124_Layer_CanChangeVisibility;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.IsVisible":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "IsVisible", "Boolean");
                xamlMember.Getter = get_125_Layer_IsVisible;
                xamlMember.Setter = set_125_Layer_IsVisible;
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.IsIdentifyEnabled":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "IsIdentifyEnabled", "Boolean");
                xamlMember.Getter = get_126_Layer_IsIdentifyEnabled;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.Name":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_127_Layer_Name;
                xamlMember.Setter = set_127_Layer_Name;
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.ShowInLegend":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ShowInLegend", "Boolean");
                xamlMember.Getter = get_128_Layer_ShowInLegend;
                xamlMember.Setter = set_128_Layer_ShowInLegend;
                break;
            case "Esri.ArcGISRuntime.Mapping.Layer.SublayerContents":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Mapping.Layer");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "SublayerContents", "System.Collections.Generic.IReadOnlyList`1<Esri.ArcGISRuntime.Mapping.ILayerContent>");
                xamlMember.Getter = get_129_Layer_SublayerContents;
                xamlMember.SetIsReadOnly();
                break;
            case "GSCFieldApp.ViewModels.MapPageViewModel.GPSModeSymbol":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.MapPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "GPSModeSymbol", "Windows.UI.Xaml.Controls.Symbol");
                xamlMember.Getter = get_130_MapPageViewModel_GPSModeSymbol;
                xamlMember.Setter = set_130_MapPageViewModel_GPSModeSymbol;
                break;
            case "GSCFieldApp.ViewModels.MapPageViewModel.NoMapsWatermark":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.MapPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "NoMapsWatermark", "Boolean");
                xamlMember.Getter = get_131_MapPageViewModel_NoMapsWatermark;
                xamlMember.Setter = set_131_MapPageViewModel_NoMapsWatermark;
                break;
            case "GSCFieldApp.ViewModels.MapPageViewModel.FilenameValues":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.MapPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "FilenameValues", "System.Collections.ObjectModel.ObservableCollection`1<GSCFieldApp.Models.Files>");
                xamlMember.Getter = get_132_MapPageViewModel_FilenameValues;
                xamlMember.Setter = set_132_MapPageViewModel_FilenameValues;
                break;
            case "GSCFieldApp.Models.Files.FileName":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Models.Files");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "FileName", "String");
                xamlMember.Getter = get_133_Files_FileName;
                xamlMember.Setter = set_133_Files_FileName;
                break;
            case "GSCFieldApp.Models.Files.FilePath":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Models.Files");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "FilePath", "String");
                xamlMember.Getter = get_134_Files_FilePath;
                xamlMember.Setter = set_134_Files_FilePath;
                break;
            case "GSCFieldApp.Models.Files.FileVisible":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Models.Files");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "FileVisible", "Boolean");
                xamlMember.Getter = get_135_Files_FileVisible;
                xamlMember.Setter = set_135_Files_FileVisible;
                break;
            case "GSCFieldApp.Models.Files.FileCanDelete":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Models.Files");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "FileCanDelete", "Windows.UI.Xaml.Visibility");
                xamlMember.Getter = get_136_Files_FileCanDelete;
                xamlMember.Setter = set_136_Files_FileCanDelete;
                break;
            case "GSCFieldApp.Models.Files.FileOpacity":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Models.Files");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "FileOpacity", "Double");
                xamlMember.Getter = get_137_Files_FileOpacity;
                xamlMember.Setter = set_137_Files_FileOpacity;
                break;
            case "GSCFieldApp.ViewModels.MapPageViewModel.SelectedLayer":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.MapPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "SelectedLayer", "Object");
                xamlMember.Getter = get_138_MapPageViewModel_SelectedLayer;
                xamlMember.Setter = set_138_MapPageViewModel_SelectedLayer;
                break;
            case "GSCFieldApp.ViewModels.MapPageViewModel.CurrentMSGeoposition":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.MapPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "CurrentMSGeoposition", "Windows.Devices.Geolocation.Geoposition");
                xamlMember.Getter = get_139_MapPageViewModel_CurrentMSGeoposition;
                xamlMember.Setter = set_139_MapPageViewModel_CurrentMSGeoposition;
                break;
            case "GSCFieldApp.ViewModels.MapPageViewModel.CurrentLongitude":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.MapPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "CurrentLongitude", "Double");
                xamlMember.Getter = get_140_MapPageViewModel_CurrentLongitude;
                xamlMember.Setter = set_140_MapPageViewModel_CurrentLongitude;
                break;
            case "GSCFieldApp.ViewModels.MapPageViewModel.CurrentLatitude":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.MapPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "CurrentLatitude", "Double");
                xamlMember.Getter = get_141_MapPageViewModel_CurrentLatitude;
                xamlMember.Setter = set_141_MapPageViewModel_CurrentLatitude;
                break;
            case "GSCFieldApp.ViewModels.MapPageViewModel.CurrentAltitude":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.MapPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "CurrentAltitude", "Double");
                xamlMember.Getter = get_142_MapPageViewModel_CurrentAltitude;
                xamlMember.Setter = set_142_MapPageViewModel_CurrentAltitude;
                break;
            case "GSCFieldApp.ViewModels.MapPageViewModel.CurrentAccuracy":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.MapPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "CurrentAccuracy", "Double");
                xamlMember.Getter = get_143_MapPageViewModel_CurrentAccuracy;
                xamlMember.Setter = set_143_MapPageViewModel_CurrentAccuracy;
                break;
            case "GSCFieldApp.ViewModels.MapPageViewModel.lastTakenLocation":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.MapPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "lastTakenLocation", "System.Tuple`2<Double, Double>");
                xamlMember.Getter = get_144_MapPageViewModel_lastTakenLocation;
                xamlMember.Setter = set_144_MapPageViewModel_lastTakenLocation;
                break;
            case "GSCFieldApp.ViewModels.MapPageViewModel.MyMapScale":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.MapPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "MyMapScale", "Double");
                xamlMember.Getter = get_145_MapPageViewModel_MyMapScale;
                xamlMember.Setter = set_145_MapPageViewModel_MyMapScale;
                break;
            case "GSCFieldApp.ViewModels.MapPageViewModel.MapRingActive":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.MapPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "MapRingActive", "Boolean");
                xamlMember.Getter = get_146_MapPageViewModel_MapRingActive;
                xamlMember.Setter = set_146_MapPageViewModel_MapRingActive;
                break;
            case "GSCFieldApp.ViewModels.MapPageViewModel.MapRingVisibility":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.MapPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "MapRingVisibility", "Boolean");
                xamlMember.Getter = get_147_MapPageViewModel_MapRingVisibility;
                xamlMember.Setter = set_147_MapPageViewModel_MapRingVisibility;
                break;
            case "GSCFieldApp.ViewModels.MapPageViewModel.MapRingLabelAcquiringGPSVisibility":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.MapPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "MapRingLabelAcquiringGPSVisibility", "Boolean");
                xamlMember.Getter = get_148_MapPageViewModel_MapRingLabelAcquiringGPSVisibility;
                xamlMember.Setter = set_148_MapPageViewModel_MapRingLabelAcquiringGPSVisibility;
                break;
            case "GSCFieldApp.ViewModels.MapPageViewModel.MapPageQuickMeasurementEnable":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.MapPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "MapPageQuickMeasurementEnable", "Boolean");
                xamlMember.Getter = get_149_MapPageViewModel_MapPageQuickMeasurementEnable;
                xamlMember.Setter = set_149_MapPageViewModel_MapPageQuickMeasurementEnable;
                break;
            case "GSCFieldApp.ViewModels.MapPageViewModel.MapPageQuickPhotoEnable":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.MapPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "MapPageQuickPhotoEnable", "Boolean");
                xamlMember.Getter = get_150_MapPageViewModel_MapPageQuickPhotoEnable;
                xamlMember.Setter = set_150_MapPageViewModel_MapPageQuickPhotoEnable;
                break;
            case "GSCFieldApp.ViewModels.MapPageViewModel.MapPageQuickSampleEnable":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.MapPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "MapPageQuickSampleEnable", "Boolean");
                xamlMember.Getter = get_151_MapPageViewModel_MapPageQuickSampleEnable;
                xamlMember.Setter = set_151_MapPageViewModel_MapPageQuickSampleEnable;
                break;
            case "GSCFieldApp.ViewModels.MapPageViewModel.vocabEntryTypeTap":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.MapPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "vocabEntryTypeTap", "String");
                xamlMember.Getter = get_152_MapPageViewModel_vocabEntryTypeTap;
                xamlMember.Setter = set_152_MapPageViewModel_vocabEntryTypeTap;
                break;
            case "GSCFieldApp.ViewModels.MapPageViewModel.vocabEntryTypeGPS":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.MapPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "vocabEntryTypeGPS", "String");
                xamlMember.Getter = get_153_MapPageViewModel_vocabEntryTypeGPS;
                xamlMember.Setter = set_153_MapPageViewModel_vocabEntryTypeGPS;
                break;
            case "GSCFieldApp.ViewModels.MapPageViewModel.vocabElevmethodGPS":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.MapPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "vocabElevmethodGPS", "String");
                xamlMember.Getter = get_154_MapPageViewModel_vocabElevmethodGPS;
                xamlMember.Setter = set_154_MapPageViewModel_vocabElevmethodGPS;
                break;
            case "GSCFieldApp.ViewModels.MapPageViewModel.vocabErrorMeasureTypeMeter":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.MapPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "vocabErrorMeasureTypeMeter", "String");
                xamlMember.Getter = get_155_MapPageViewModel_vocabErrorMeasureTypeMeter;
                xamlMember.Setter = set_155_MapPageViewModel_vocabErrorMeasureTypeMeter;
                break;
            case "GSCFieldApp.ViewModels.MapPageViewModel.vocabEntryTypeManual":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.MapPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "vocabEntryTypeManual", "String");
                xamlMember.Getter = get_156_MapPageViewModel_vocabEntryTypeManual;
                xamlMember.Setter = set_156_MapPageViewModel_vocabEntryTypeManual;
                break;
            case "Esri.ArcGISRuntime.UI.Controls.MapView.MapScale":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.MapView");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "MapScale", "Double");
                xamlMember.Getter = get_157_MapView_MapScale;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Controls.MapView.MapRotation":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.MapView");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "MapRotation", "Double");
                xamlMember.Getter = get_158_MapView_MapRotation;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Controls.MapView.UnitsPerPixel":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.MapView");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "UnitsPerPixel", "Double");
                xamlMember.Getter = get_159_MapView_UnitsPerPixel;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Controls.MapView.VisibleArea":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.MapView");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "VisibleArea", "Esri.ArcGISRuntime.Geometry.Polygon");
                xamlMember.Getter = get_160_MapView_VisibleArea;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Controls.MapView.WrapAroundMode":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.MapView");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "WrapAroundMode", "Esri.ArcGISRuntime.UI.WrapAroundMode");
                xamlMember.Getter = get_161_MapView_WrapAroundMode;
                xamlMember.Setter = set_161_MapView_WrapAroundMode;
                break;
            case "Esri.ArcGISRuntime.UI.Controls.MapView.Labeling":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.MapView");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Labeling", "Esri.ArcGISRuntime.UI.ViewLabelProperties");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_162_MapView_Labeling;
                xamlMember.Setter = set_162_MapView_Labeling;
                break;
            case "Esri.ArcGISRuntime.UI.Controls.MapView.LocationDisplay":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.MapView");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "LocationDisplay", "Esri.ArcGISRuntime.UI.LocationDisplay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_163_MapView_LocationDisplay;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Controls.MapView.BackgroundGrid":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.MapView");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "BackgroundGrid", "Esri.ArcGISRuntime.UI.BackgroundGrid");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_164_MapView_BackgroundGrid;
                xamlMember.Setter = set_164_MapView_BackgroundGrid;
                break;
            case "Esri.ArcGISRuntime.UI.Controls.MapView.Grid":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.MapView");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Grid", "Esri.ArcGISRuntime.UI.Grid");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_165_MapView_Grid;
                xamlMember.Setter = set_165_MapView_Grid;
                break;
            case "Esri.ArcGISRuntime.UI.Controls.MapView.SketchEditor":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.MapView");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "SketchEditor", "Esri.ArcGISRuntime.UI.SketchEditor");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_166_MapView_SketchEditor;
                xamlMember.Setter = set_166_MapView_SketchEditor;
                break;
            case "Esri.ArcGISRuntime.UI.Controls.MapView.InteractionOptions":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.MapView");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "InteractionOptions", "Esri.ArcGISRuntime.UI.MapViewInteractionOptions");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_167_MapView_InteractionOptions;
                xamlMember.Setter = set_167_MapView_InteractionOptions;
                break;
            case "Esri.ArcGISRuntime.UI.Controls.GeoView.IsCalloutVisible":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.GeoView");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "IsCalloutVisible", "Boolean");
                xamlMember.Getter = get_168_GeoView_IsCalloutVisible;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Controls.GeoView.GraphicsOverlays":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.GeoView");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "GraphicsOverlays", "Esri.ArcGISRuntime.UI.GraphicsOverlayCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_169_GeoView_GraphicsOverlays;
                xamlMember.Setter = set_169_GeoView_GraphicsOverlays;
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.Graphics":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Graphics", "Esri.ArcGISRuntime.UI.GraphicCollection");
                xamlMember.Getter = get_170_GraphicsOverlay_Graphics;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Graphic.GraphicsOverlay":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Graphic");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "GraphicsOverlay", "Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember.Getter = get_171_Graphic_GraphicsOverlay;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Graphic.Geometry":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Graphic");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Geometry", "Esri.ArcGISRuntime.Geometry.Geometry");
                xamlMember.Getter = get_172_Graphic_Geometry;
                xamlMember.Setter = set_172_Graphic_Geometry;
                break;
            case "Esri.ArcGISRuntime.UI.Graphic.Symbol":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Graphic");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Symbol", "Esri.ArcGISRuntime.Symbology.Symbol");
                xamlMember.Getter = get_173_Graphic_Symbol;
                xamlMember.Setter = set_173_Graphic_Symbol;
                break;
            case "Esri.ArcGISRuntime.UI.Graphic.IsVisible":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Graphic");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "IsVisible", "Boolean");
                xamlMember.Getter = get_174_Graphic_IsVisible;
                xamlMember.Setter = set_174_Graphic_IsVisible;
                break;
            case "Esri.ArcGISRuntime.UI.Graphic.IsSelected":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Graphic");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.Getter = get_175_Graphic_IsSelected;
                xamlMember.Setter = set_175_Graphic_IsSelected;
                break;
            case "Esri.ArcGISRuntime.UI.Graphic.ZIndex":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Graphic");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ZIndex", "Int32");
                xamlMember.Getter = get_176_Graphic_ZIndex;
                xamlMember.Setter = set_176_Graphic_ZIndex;
                break;
            case "Esri.ArcGISRuntime.Data.GeoElement.Attributes":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Data.GeoElement");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Attributes", "System.Collections.Generic.IDictionary`2<String, Object>");
                xamlMember.Getter = get_177_GeoElement_Attributes;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.Id":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Id", "String");
                xamlMember.Getter = get_178_GraphicsOverlay_Id;
                xamlMember.Setter = set_178_GraphicsOverlay_Id;
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.Extent":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Extent", "Esri.ArcGISRuntime.Geometry.Envelope");
                xamlMember.Getter = get_179_GraphicsOverlay_Extent;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.RenderingMode":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "RenderingMode", "Esri.ArcGISRuntime.UI.GraphicsRenderingMode");
                xamlMember.Getter = get_180_GraphicsOverlay_RenderingMode;
                xamlMember.Setter = set_180_GraphicsOverlay_RenderingMode;
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.SelectionColor":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "SelectionColor", "System.Drawing.Color");
                xamlMember.Getter = get_181_GraphicsOverlay_SelectionColor;
                xamlMember.Setter = set_181_GraphicsOverlay_SelectionColor;
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.Renderer":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Renderer", "Esri.ArcGISRuntime.Symbology.Renderer");
                xamlMember.Getter = get_182_GraphicsOverlay_Renderer;
                xamlMember.Setter = set_182_GraphicsOverlay_Renderer;
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.IsVisible":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "IsVisible", "Boolean");
                xamlMember.Getter = get_183_GraphicsOverlay_IsVisible;
                xamlMember.Setter = set_183_GraphicsOverlay_IsVisible;
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.Opacity":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Opacity", "Double");
                xamlMember.Getter = get_184_GraphicsOverlay_Opacity;
                xamlMember.Setter = set_184_GraphicsOverlay_Opacity;
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.IsPopupEnabled":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "IsPopupEnabled", "Boolean");
                xamlMember.Getter = get_185_GraphicsOverlay_IsPopupEnabled;
                xamlMember.Setter = set_185_GraphicsOverlay_IsPopupEnabled;
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.PopupDefinition":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "PopupDefinition", "Esri.ArcGISRuntime.Mapping.Popups.PopupDefinition");
                xamlMember.Getter = get_186_GraphicsOverlay_PopupDefinition;
                xamlMember.Setter = set_186_GraphicsOverlay_PopupDefinition;
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.MinScale":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "MinScale", "Double");
                xamlMember.Getter = get_187_GraphicsOverlay_MinScale;
                xamlMember.Setter = set_187_GraphicsOverlay_MinScale;
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.MaxScale":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "MaxScale", "Double");
                xamlMember.Getter = get_188_GraphicsOverlay_MaxScale;
                xamlMember.Setter = set_188_GraphicsOverlay_MaxScale;
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.SceneProperties":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "SceneProperties", "Esri.ArcGISRuntime.Mapping.LayerSceneProperties");
                xamlMember.Getter = get_189_GraphicsOverlay_SceneProperties;
                xamlMember.Setter = set_189_GraphicsOverlay_SceneProperties;
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.SelectedGraphics":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "SelectedGraphics", "System.Collections.Generic.IEnumerable`1<Esri.ArcGISRuntime.UI.Graphic>");
                xamlMember.Getter = get_190_GraphicsOverlay_SelectedGraphics;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.LabelDefinitions":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "LabelDefinitions", "System.Collections.Generic.IList`1<Esri.ArcGISRuntime.Mapping.LabelDefinition>");
                xamlMember.Getter = get_191_GraphicsOverlay_LabelDefinitions;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.GraphicsOverlay.LabelsEnabled":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.GraphicsOverlay");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "LabelsEnabled", "Boolean");
                xamlMember.Getter = get_192_GraphicsOverlay_LabelsEnabled;
                xamlMember.Setter = set_192_GraphicsOverlay_LabelsEnabled;
                break;
            case "Esri.ArcGISRuntime.UI.Controls.GeoView.IsAttributionTextVisible":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.GeoView");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "IsAttributionTextVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_193_GeoView_IsAttributionTextVisible;
                xamlMember.Setter = set_193_GeoView_IsAttributionTextVisible;
                break;
            case "Esri.ArcGISRuntime.UI.Controls.GeoView.AttributionText":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.GeoView");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "AttributionText", "String");
                xamlMember.Getter = get_194_GeoView_AttributionText;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Controls.GeoView.SpatialReference":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.GeoView");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "SpatialReference", "Esri.ArcGISRuntime.Geometry.SpatialReference");
                xamlMember.Getter = get_195_GeoView_SpatialReference;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Controls.GeoView.IsWrapAroundEnabled":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.GeoView");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "IsWrapAroundEnabled", "Boolean");
                xamlMember.Getter = get_196_GeoView_IsWrapAroundEnabled;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Controls.GeoView.IsNavigating":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.GeoView");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "IsNavigating", "Boolean");
                xamlMember.Getter = get_197_GeoView_IsNavigating;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Controls.GeoView.DrawStatus":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.GeoView");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "DrawStatus", "Esri.ArcGISRuntime.UI.DrawStatus");
                xamlMember.Getter = get_198_GeoView_DrawStatus;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Controls.GeoView.ViewInsets":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.GeoView");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ViewInsets", "Windows.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_199_GeoView_ViewInsets;
                xamlMember.Setter = set_199_GeoView_ViewInsets;
                break;
            case "Esri.ArcGISRuntime.UI.Controls.GeoView.TimeExtent":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.GeoView");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "TimeExtent", "Esri.ArcGISRuntime.TimeExtent");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_200_GeoView_TimeExtent;
                xamlMember.Setter = set_200_GeoView_TimeExtent;
                break;
            case "Esri.ArcGISRuntime.UI.Controls.GeoView.Overlays":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.GeoView");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Overlays", "Esri.ArcGISRuntime.UI.Controls.OverlayItemsControl");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_201_GeoView_Overlays;
                xamlMember.Setter = set_201_GeoView_Overlays;
                break;
            case "Esri.ArcGISRuntime.UI.Controls.OverlayItemsControl.Items":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.OverlayItemsControl");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Items", "Esri.ArcGISRuntime.UI.Controls.OverlayItemsCollection");
                xamlMember.Getter = get_202_OverlayItemsControl_Items;
                xamlMember.SetIsReadOnly();
                break;
            case "Esri.ArcGISRuntime.UI.Controls.GeoView.SelectionProperties":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.GeoView");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "SelectionProperties", "Esri.ArcGISRuntime.UI.SelectionProperties");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_203_GeoView_SelectionProperties;
                xamlMember.Setter = set_203_GeoView_SelectionProperties;
                break;
            case "Esri.ArcGISRuntime.UI.Controls.GeoView.ViewOverlayAnchor":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.UI.Controls.GeoView");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ViewOverlayAnchor", "Esri.ArcGISRuntime.Geometry.MapPoint");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_204_GeoView_ViewOverlayAnchor;
                xamlMember.Setter = set_204_GeoView_ViewOverlayAnchor;
                break;
            case "Esri.ArcGISRuntime.Toolkit.UI.Controls.ScaleLine.MapView":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Toolkit.UI.Controls.ScaleLine");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "MapView", "Esri.ArcGISRuntime.UI.Controls.MapView");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_205_ScaleLine_MapView;
                xamlMember.Setter = set_205_ScaleLine_MapView;
                break;
            case "Esri.ArcGISRuntime.Toolkit.UI.Controls.ScaleLine.MapScale":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Toolkit.UI.Controls.ScaleLine");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "MapScale", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_206_ScaleLine_MapScale;
                xamlMember.Setter = set_206_ScaleLine_MapScale;
                break;
            case "Esri.ArcGISRuntime.Toolkit.UI.Controls.ScaleLine.TargetWidth":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Toolkit.UI.Controls.ScaleLine");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "TargetWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_207_ScaleLine_TargetWidth;
                xamlMember.Setter = set_207_ScaleLine_TargetWidth;
                break;
            case "GSCFieldApp.Views.MineralizationAlterationDialog.MAViewModel":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Views.MineralizationAlterationDialog");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "MAViewModel", "GSCFieldApp.ViewModels.MineralizationAlterationViewModel");
                xamlMember.Getter = get_208_MineralizationAlterationDialog_MAViewModel;
                xamlMember.Setter = set_208_MineralizationAlterationDialog_MAViewModel;
                break;
            case "GSCFieldApp.Views.MineralizationAlterationDialog.parentViewModel":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Views.MineralizationAlterationDialog");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "parentViewModel", "GSCFieldApp.Models.FieldNotes");
                xamlMember.Getter = get_209_MineralizationAlterationDialog_parentViewModel;
                xamlMember.Setter = set_209_MineralizationAlterationDialog_parentViewModel;
                break;
            case "GSCFieldApp.Views.MineralDialog.MineralVM":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Views.MineralDialog");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "MineralVM", "GSCFieldApp.ViewModels.MineralViewModel");
                xamlMember.Getter = get_210_MineralDialog_MineralVM;
                xamlMember.Setter = set_210_MineralDialog_MineralVM;
                break;
            case "GSCFieldApp.Views.MineralDialog.parentViewModel":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Views.MineralDialog");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "parentViewModel", "GSCFieldApp.Models.FieldNotes");
                xamlMember.Getter = get_211_MineralDialog_parentViewModel;
                xamlMember.Setter = set_211_MineralDialog_parentViewModel;
                break;
            case "GSCFieldApp.Views.PaleoflowDialog.pflowModel":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Views.PaleoflowDialog");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "pflowModel", "GSCFieldApp.ViewModels.PaleoflowViewModel");
                xamlMember.Getter = get_212_PaleoflowDialog_pflowModel;
                xamlMember.Setter = set_212_PaleoflowDialog_pflowModel;
                break;
            case "GSCFieldApp.Views.PaleoflowDialog.pflowParentViewModel":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Views.PaleoflowDialog");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "pflowParentViewModel", "GSCFieldApp.Models.FieldNotes");
                xamlMember.Getter = get_213_PaleoflowDialog_pflowParentViewModel;
                xamlMember.Setter = set_213_PaleoflowDialog_pflowParentViewModel;
                break;
            case "GSCFieldApp.Views.ReportPage.ViewModel":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Views.ReportPage");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ViewModel", "GSCFieldApp.ViewModels.FieldNotesViewModel");
                xamlMember.Getter = get_214_ReportPage_ViewModel;
                xamlMember.Setter = set_214_ReportPage_ViewModel;
                break;
            case "GSCFieldApp.Views.SampleDialog.ViewModel":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Views.SampleDialog");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ViewModel", "GSCFieldApp.ViewModels.SampleViewModel");
                xamlMember.Getter = get_215_SampleDialog_ViewModel;
                xamlMember.Setter = set_215_SampleDialog_ViewModel;
                break;
            case "GSCFieldApp.Views.SampleDialog.parentViewModel":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Views.SampleDialog");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "parentViewModel", "GSCFieldApp.Models.FieldNotes");
                xamlMember.Getter = get_216_SampleDialog_parentViewModel;
                xamlMember.Setter = set_216_SampleDialog_parentViewModel;
                break;
            case "GSCFieldApp.ViewModels.FieldBooksPageViewModel.ProjectCollection":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.FieldBooksPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ProjectCollection", "System.Collections.ObjectModel.ObservableCollection`1<GSCFieldApp.Models.FieldBooks>");
                xamlMember.Getter = get_217_FieldBooksPageViewModel_ProjectCollection;
                xamlMember.SetIsReadOnly();
                break;
            case "GSCFieldApp.Models.FieldBooks.GeologistGeolcode":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Models.FieldBooks");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "GeologistGeolcode", "String");
                xamlMember.Getter = get_218_FieldBooks_GeologistGeolcode;
                xamlMember.Setter = set_218_FieldBooks_GeologistGeolcode;
                break;
            case "GSCFieldApp.Models.FieldBooks.StationNumber":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Models.FieldBooks");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "StationNumber", "String");
                xamlMember.Getter = get_219_FieldBooks_StationNumber;
                xamlMember.Setter = set_219_FieldBooks_StationNumber;
                break;
            case "GSCFieldApp.Models.FieldBooks.StationLastEntered":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Models.FieldBooks");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "StationLastEntered", "String");
                xamlMember.Getter = get_220_FieldBooks_StationLastEntered;
                xamlMember.Setter = set_220_FieldBooks_StationLastEntered;
                break;
            case "GSCFieldApp.Models.FieldBooks.ProjectPath":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Models.FieldBooks");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ProjectPath", "String");
                xamlMember.Getter = get_221_FieldBooks_ProjectPath;
                xamlMember.Setter = set_221_FieldBooks_ProjectPath;
                break;
            case "GSCFieldApp.Models.FieldBooks.ProjectDBPath":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Models.FieldBooks");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ProjectDBPath", "String");
                xamlMember.Getter = get_222_FieldBooks_ProjectDBPath;
                xamlMember.Setter = set_222_FieldBooks_ProjectDBPath;
                break;
            case "GSCFieldApp.Models.FieldBooks.CreateDate":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Models.FieldBooks");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "CreateDate", "String");
                xamlMember.Getter = get_223_FieldBooks_CreateDate;
                xamlMember.Setter = set_223_FieldBooks_CreateDate;
                break;
            case "GSCFieldApp.Models.FieldBooks.metadataForProject":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Models.FieldBooks");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "metadataForProject", "GSCFieldApp.Models.Metadata");
                xamlMember.Getter = get_224_FieldBooks_metadataForProject;
                xamlMember.Setter = set_224_FieldBooks_metadataForProject;
                break;
            case "GSCFieldApp.ViewModels.FieldBooksPageViewModel.ProgressRingActive":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.FieldBooksPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ProgressRingActive", "Boolean");
                xamlMember.Getter = get_225_FieldBooksPageViewModel_ProgressRingActive;
                xamlMember.Setter = set_225_FieldBooksPageViewModel_ProgressRingActive;
                break;
            case "GSCFieldApp.ViewModels.FieldBooksPageViewModel.ProgressRingVisibility":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.FieldBooksPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ProgressRingVisibility", "Boolean");
                xamlMember.Getter = get_226_FieldBooksPageViewModel_ProgressRingVisibility;
                xamlMember.Setter = set_226_FieldBooksPageViewModel_ProgressRingVisibility;
                break;
            case "GSCFieldApp.ViewModels.FieldBooksPageViewModel.SelectedProjectIndex":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.FieldBooksPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "SelectedProjectIndex", "Int32");
                xamlMember.Getter = get_227_FieldBooksPageViewModel_SelectedProjectIndex;
                xamlMember.Setter = set_227_FieldBooksPageViewModel_SelectedProjectIndex;
                break;
            case "GSCFieldApp.ViewModels.FieldBooksPageViewModel.NoFieldBookWatermark":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.FieldBooksPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "NoFieldBookWatermark", "Boolean");
                xamlMember.Getter = get_228_FieldBooksPageViewModel_NoFieldBookWatermark;
                xamlMember.Setter = set_228_FieldBooksPageViewModel_NoFieldBookWatermark;
                break;
            case "GSCFieldApp.Views.FieldBooksPage.ProjectViewModel":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Views.FieldBooksPage");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ProjectViewModel", "GSCFieldApp.ViewModels.FieldBooksPageViewModel");
                xamlMember.Getter = get_229_FieldBooksPage_ProjectViewModel;
                xamlMember.Setter = set_229_FieldBooksPage_ProjectViewModel;
                break;
            case "GSCFieldApp.ViewModels.SettingsPageViewModel.CommonToggle":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.SettingsPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "CommonToggle", "Boolean");
                xamlMember.Getter = get_230_SettingsPageViewModel_CommonToggle;
                xamlMember.Setter = set_230_SettingsPageViewModel_CommonToggle;
                break;
            case "GSCFieldApp.ViewModels.SettingsPageViewModel.BedrockToggle":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.SettingsPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "BedrockToggle", "Boolean");
                xamlMember.Getter = get_231_SettingsPageViewModel_BedrockToggle;
                xamlMember.Setter = set_231_SettingsPageViewModel_BedrockToggle;
                break;
            case "GSCFieldApp.ViewModels.SettingsPageViewModel.SurficialToggle":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.SettingsPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "SurficialToggle", "Boolean");
                xamlMember.Getter = get_232_SettingsPageViewModel_SurficialToggle;
                xamlMember.Setter = set_232_SettingsPageViewModel_SurficialToggle;
                break;
            case "GSCFieldApp.ViewModels.SettingsPageViewModel.PhotoToggle":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.SettingsPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "PhotoToggle", "Boolean");
                xamlMember.Getter = get_233_SettingsPageViewModel_PhotoToggle;
                xamlMember.Setter = set_233_SettingsPageViewModel_PhotoToggle;
                break;
            case "GSCFieldApp.ViewModels.SettingsPageViewModel.EarthToggle":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.SettingsPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "EarthToggle", "Boolean");
                xamlMember.Getter = get_234_SettingsPageViewModel_EarthToggle;
                xamlMember.Setter = set_234_SettingsPageViewModel_EarthToggle;
                break;
            case "GSCFieldApp.ViewModels.SettingsPageViewModel.ExternalMeasureToggle":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.SettingsPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ExternalMeasureToggle", "Boolean");
                xamlMember.Getter = get_235_SettingsPageViewModel_ExternalMeasureToggle;
                xamlMember.Setter = set_235_SettingsPageViewModel_ExternalMeasureToggle;
                break;
            case "GSCFieldApp.ViewModels.SettingsPageViewModel.SampleToggle":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.SettingsPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "SampleToggle", "Boolean");
                xamlMember.Getter = get_236_SettingsPageViewModel_SampleToggle;
                xamlMember.Setter = set_236_SettingsPageViewModel_SampleToggle;
                break;
            case "GSCFieldApp.ViewModels.SettingsPageViewModel.MAToggle":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.SettingsPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "MAToggle", "Boolean");
                xamlMember.Getter = get_237_SettingsPageViewModel_MAToggle;
                xamlMember.Setter = set_237_SettingsPageViewModel_MAToggle;
                break;
            case "GSCFieldApp.ViewModels.SettingsPageViewModel.StructureToggle":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.SettingsPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "StructureToggle", "Boolean");
                xamlMember.Getter = get_238_SettingsPageViewModel_StructureToggle;
                xamlMember.Setter = set_238_SettingsPageViewModel_StructureToggle;
                break;
            case "GSCFieldApp.ViewModels.SettingsPageViewModel.FossilToggle":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.SettingsPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "FossilToggle", "Boolean");
                xamlMember.Getter = get_239_SettingsPageViewModel_FossilToggle;
                xamlMember.Setter = set_239_SettingsPageViewModel_FossilToggle;
                break;
            case "GSCFieldApp.ViewModels.SettingsPageViewModel.MineralToggle":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.SettingsPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "MineralToggle", "Boolean");
                xamlMember.Getter = get_240_SettingsPageViewModel_MineralToggle;
                xamlMember.Setter = set_240_SettingsPageViewModel_MineralToggle;
                break;
            case "GSCFieldApp.ViewModels.SettingsPageViewModel.EnvironmentToggle":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.SettingsPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "EnvironmentToggle", "Boolean");
                xamlMember.Getter = get_241_SettingsPageViewModel_EnvironmentToggle;
                xamlMember.Setter = set_241_SettingsPageViewModel_EnvironmentToggle;
                break;
            case "GSCFieldApp.ViewModels.SettingsPageViewModel.SoilProfileToggle":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.SettingsPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "SoilProfileToggle", "Boolean");
                xamlMember.Getter = get_242_SettingsPageViewModel_SoilProfileToggle;
                xamlMember.Setter = set_242_SettingsPageViewModel_SoilProfileToggle;
                break;
            case "GSCFieldApp.ViewModels.SettingsPageViewModel.PflowToggle":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.SettingsPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "PflowToggle", "Boolean");
                xamlMember.Getter = get_243_SettingsPageViewModel_PflowToggle;
                xamlMember.Setter = set_243_SettingsPageViewModel_PflowToggle;
                break;
            case "GSCFieldApp.ViewModels.SettingsPageViewModel.LoadPicklistVisibility":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.SettingsPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "LoadPicklistVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.Getter = get_244_SettingsPageViewModel_LoadPicklistVisibility;
                xamlMember.Setter = set_244_SettingsPageViewModel_LoadPicklistVisibility;
                break;
            case "GSCFieldApp.ViewModels.SettingsPageViewModel.SelectedPivotIndex":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.SettingsPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "SelectedPivotIndex", "Int32");
                xamlMember.Getter = get_245_SettingsPageViewModel_SelectedPivotIndex;
                xamlMember.Setter = set_245_SettingsPageViewModel_SelectedPivotIndex;
                break;
            case "GSCFieldApp.ViewModels.SettingsPageViewModel.SettingsPartViewModel":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.SettingsPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "SettingsPartViewModel", "GSCFieldApp.ViewModels.SettingsPartViewModel");
                xamlMember.Getter = get_246_SettingsPageViewModel_SettingsPartViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "GSCFieldApp.ViewModels.SettingsPageViewModel.AboutPartViewModel":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.SettingsPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "AboutPartViewModel", "GSCFieldApp.ViewModels.AboutPartViewModel");
                xamlMember.Getter = get_247_SettingsPageViewModel_AboutPartViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "GSCFieldApp.ViewModels.SettingsPageViewModel.PicklistPartViewModel":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.ViewModels.SettingsPageViewModel");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "PicklistPartViewModel", "GSCFieldApp.ViewModels.PicklistPartViewModel");
                xamlMember.Getter = get_248_SettingsPageViewModel_PicklistPartViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "GSCFieldApp.Views.Shell.SViewModel":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Views.Shell");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "SViewModel", "GSCFieldApp.ViewModels.ShellViewModel");
                xamlMember.Getter = get_249_Shell_SViewModel;
                xamlMember.Setter = set_249_Shell_SViewModel;
                break;
            case "GSCFieldApp.Views.StationDataPart.ViewModel":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Views.StationDataPart");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ViewModel", "GSCFieldApp.ViewModels.StationViewModel");
                xamlMember.Getter = get_250_StationDataPart_ViewModel;
                xamlMember.Setter = set_250_StationDataPart_ViewModel;
                break;
            case "GSCFieldApp.Views.StationDataPart.mapPosition":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Views.StationDataPart");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "mapPosition", "GSCFieldApp.Models.FieldLocation");
                xamlMember.Getter = get_251_StationDataPart_mapPosition;
                xamlMember.Setter = set_251_StationDataPart_mapPosition;
                break;
            case "GSCFieldApp.Views.StructureDialog.strucViewModel":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Views.StructureDialog");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "strucViewModel", "GSCFieldApp.ViewModels.StructureViewModel");
                xamlMember.Getter = get_252_StructureDialog_strucViewModel;
                xamlMember.Setter = set_252_StructureDialog_strucViewModel;
                break;
            case "GSCFieldApp.Views.StructureDialog.parentViewModel":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Views.StructureDialog");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "parentViewModel", "GSCFieldApp.Models.FieldNotes");
                xamlMember.Getter = get_253_StructureDialog_parentViewModel;
                xamlMember.Setter = set_253_StructureDialog_parentViewModel;
                break;
            case "GSCFieldApp.Views.FieldBookDialog.ViewModel":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GSCFieldApp.Views.FieldBookDialog");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ViewModel", "GSCFieldApp.ViewModels.FieldBookDialogViewModel");
                xamlMember.Getter = get_254_FieldBookDialog_ViewModel;
                xamlMember.Setter = set_254_FieldBookDialog_ViewModel;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.Opacity":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Opacity", "Double");
                xamlMember.Getter = get_255_PictureFillSymbol_Opacity;
                xamlMember.Setter = set_255_PictureFillSymbol_Opacity;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.Width":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.Getter = get_256_PictureFillSymbol_Width;
                xamlMember.Setter = set_256_PictureFillSymbol_Width;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.Height":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Height", "Double");
                xamlMember.Getter = get_257_PictureFillSymbol_Height;
                xamlMember.Setter = set_257_PictureFillSymbol_Height;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.Angle":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Angle", "Double");
                xamlMember.Getter = get_258_PictureFillSymbol_Angle;
                xamlMember.Setter = set_258_PictureFillSymbol_Angle;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.OffsetX":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "OffsetX", "Double");
                xamlMember.Getter = get_259_PictureFillSymbol_OffsetX;
                xamlMember.Setter = set_259_PictureFillSymbol_OffsetX;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.OffsetY":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "OffsetY", "Double");
                xamlMember.Getter = get_260_PictureFillSymbol_OffsetY;
                xamlMember.Setter = set_260_PictureFillSymbol_OffsetY;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.ScaleX":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ScaleX", "Double");
                xamlMember.Getter = get_261_PictureFillSymbol_ScaleX;
                xamlMember.Setter = set_261_PictureFillSymbol_ScaleX;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.ScaleY":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "ScaleY", "Double");
                xamlMember.Getter = get_262_PictureFillSymbol_ScaleY;
                xamlMember.Setter = set_262_PictureFillSymbol_ScaleY;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureFillSymbol.Uri":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureFillSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Uri", "System.Uri");
                xamlMember.Getter = get_263_PictureFillSymbol_Uri;
                xamlMember.Setter = set_263_PictureFillSymbol_Uri;
                break;
            case "Esri.ArcGISRuntime.Symbology.FillSymbol.Color":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.FillSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Color", "System.Drawing.Color");
                xamlMember.Getter = get_264_FillSymbol_Color;
                xamlMember.Setter = set_264_FillSymbol_Color;
                break;
            case "Esri.ArcGISRuntime.Symbology.FillSymbol.Outline":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.FillSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Outline", "Esri.ArcGISRuntime.Symbology.LineSymbol");
                xamlMember.Getter = get_265_FillSymbol_Outline;
                xamlMember.Setter = set_265_FillSymbol_Outline;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.Opacity":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Opacity", "Double");
                xamlMember.Getter = get_266_PictureMarkerSymbol_Opacity;
                xamlMember.Setter = set_266_PictureMarkerSymbol_Opacity;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.Width":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.Getter = get_267_PictureMarkerSymbol_Width;
                xamlMember.Setter = set_267_PictureMarkerSymbol_Width;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.Height":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Height", "Double");
                xamlMember.Getter = get_268_PictureMarkerSymbol_Height;
                xamlMember.Setter = set_268_PictureMarkerSymbol_Height;
                break;
            case "Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.Uri":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Uri", "System.Uri");
                xamlMember.Getter = get_269_PictureMarkerSymbol_Uri;
                xamlMember.Setter = set_269_PictureMarkerSymbol_Uri;
                break;
            case "Esri.ArcGISRuntime.Symbology.MarkerSymbol.Angle":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Angle", "Double");
                xamlMember.Getter = get_270_MarkerSymbol_Angle;
                xamlMember.Setter = set_270_MarkerSymbol_Angle;
                break;
            case "Esri.ArcGISRuntime.Symbology.MarkerSymbol.AngleAlignment":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "AngleAlignment", "Esri.ArcGISRuntime.Symbology.SymbolAngleAlignment");
                xamlMember.Getter = get_271_MarkerSymbol_AngleAlignment;
                xamlMember.Setter = set_271_MarkerSymbol_AngleAlignment;
                break;
            case "Esri.ArcGISRuntime.Symbology.MarkerSymbol.LeaderOffsetX":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "LeaderOffsetX", "Double");
                xamlMember.Getter = get_272_MarkerSymbol_LeaderOffsetX;
                xamlMember.Setter = set_272_MarkerSymbol_LeaderOffsetX;
                break;
            case "Esri.ArcGISRuntime.Symbology.MarkerSymbol.LeaderOffsetY":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "LeaderOffsetY", "Double");
                xamlMember.Getter = get_273_MarkerSymbol_LeaderOffsetY;
                xamlMember.Setter = set_273_MarkerSymbol_LeaderOffsetY;
                break;
            case "Esri.ArcGISRuntime.Symbology.MarkerSymbol.OffsetX":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "OffsetX", "Double");
                xamlMember.Getter = get_274_MarkerSymbol_OffsetX;
                xamlMember.Setter = set_274_MarkerSymbol_OffsetX;
                break;
            case "Esri.ArcGISRuntime.Symbology.MarkerSymbol.OffsetY":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "OffsetY", "Double");
                xamlMember.Getter = get_275_MarkerSymbol_OffsetY;
                xamlMember.Setter = set_275_MarkerSymbol_OffsetY;
                break;
            case "Esri.ArcGISRuntime.Symbology.MarkerSymbol.RotationType":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.MarkerSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "RotationType", "Esri.ArcGISRuntime.Symbology.RotationType");
                xamlMember.Getter = get_276_MarkerSymbol_RotationType;
                xamlMember.Setter = set_276_MarkerSymbol_RotationType;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleFillSymbol.Style":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleFillSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Style", "Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle");
                xamlMember.Getter = get_277_SimpleFillSymbol_Style;
                xamlMember.Setter = set_277_SimpleFillSymbol_Style;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleLineSymbol.Style":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleLineSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Style", "Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle");
                xamlMember.Getter = get_278_SimpleLineSymbol_Style;
                xamlMember.Setter = set_278_SimpleLineSymbol_Style;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleLineSymbol.MarkerPlacement":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleLineSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "MarkerPlacement", "Esri.ArcGISRuntime.Symbology.SimpleLineSymbolMarkerPlacement");
                xamlMember.Getter = get_279_SimpleLineSymbol_MarkerPlacement;
                xamlMember.Setter = set_279_SimpleLineSymbol_MarkerPlacement;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleLineSymbol.MarkerStyle":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleLineSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "MarkerStyle", "Esri.ArcGISRuntime.Symbology.SimpleLineSymbolMarkerStyle");
                xamlMember.Getter = get_280_SimpleLineSymbol_MarkerStyle;
                xamlMember.Setter = set_280_SimpleLineSymbol_MarkerStyle;
                break;
            case "Esri.ArcGISRuntime.Symbology.LineSymbol.Color":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.LineSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Color", "System.Drawing.Color");
                xamlMember.Getter = get_281_LineSymbol_Color;
                xamlMember.Setter = set_281_LineSymbol_Color;
                break;
            case "Esri.ArcGISRuntime.Symbology.LineSymbol.Width":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.LineSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.Getter = get_282_LineSymbol_Width;
                xamlMember.Setter = set_282_LineSymbol_Width;
                break;
            case "Esri.ArcGISRuntime.Symbology.LineSymbol.AntiAlias":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.LineSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "AntiAlias", "Boolean");
                xamlMember.Getter = get_283_LineSymbol_AntiAlias;
                xamlMember.Setter = set_283_LineSymbol_AntiAlias;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.Outline":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Outline", "Esri.ArcGISRuntime.Symbology.SimpleLineSymbol");
                xamlMember.Getter = get_284_SimpleMarkerSymbol_Outline;
                xamlMember.Setter = set_284_SimpleMarkerSymbol_Outline;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.Color":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Color", "System.Drawing.Color");
                xamlMember.Getter = get_285_SimpleMarkerSymbol_Color;
                xamlMember.Setter = set_285_SimpleMarkerSymbol_Color;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.Size":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Size", "Double");
                xamlMember.Getter = get_286_SimpleMarkerSymbol_Size;
                xamlMember.Setter = set_286_SimpleMarkerSymbol_Size;
                break;
            case "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.Style":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Style", "Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle");
                xamlMember.Getter = get_287_SimpleMarkerSymbol_Style;
                xamlMember.Setter = set_287_SimpleMarkerSymbol_Style;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.Color":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Color", "System.Drawing.Color");
                xamlMember.Getter = get_288_TextSymbol_Color;
                xamlMember.Setter = set_288_TextSymbol_Color;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.FontDecoration":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "FontDecoration", "Esri.ArcGISRuntime.Symbology.FontDecoration");
                xamlMember.Getter = get_289_TextSymbol_FontDecoration;
                xamlMember.Setter = set_289_TextSymbol_FontDecoration;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.FontFamily":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "FontFamily", "String");
                xamlMember.Getter = get_290_TextSymbol_FontFamily;
                xamlMember.Setter = set_290_TextSymbol_FontFamily;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.FontStyle":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "FontStyle", "Esri.ArcGISRuntime.Symbology.FontStyle");
                xamlMember.Getter = get_291_TextSymbol_FontStyle;
                xamlMember.Setter = set_291_TextSymbol_FontStyle;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.FontWeight":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "FontWeight", "Esri.ArcGISRuntime.Symbology.FontWeight");
                xamlMember.Getter = get_292_TextSymbol_FontWeight;
                xamlMember.Setter = set_292_TextSymbol_FontWeight;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.HorizontalAlignment":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "HorizontalAlignment", "Esri.ArcGISRuntime.Symbology.HorizontalAlignment");
                xamlMember.Getter = get_293_TextSymbol_HorizontalAlignment;
                xamlMember.Setter = set_293_TextSymbol_HorizontalAlignment;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.Size":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Size", "Double");
                xamlMember.Getter = get_294_TextSymbol_Size;
                xamlMember.Setter = set_294_TextSymbol_Size;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.Text":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.Getter = get_295_TextSymbol_Text;
                xamlMember.Setter = set_295_TextSymbol_Text;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.VerticalAlignment":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "VerticalAlignment", "Esri.ArcGISRuntime.Symbology.VerticalAlignment");
                xamlMember.Getter = get_296_TextSymbol_VerticalAlignment;
                xamlMember.Setter = set_296_TextSymbol_VerticalAlignment;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.HaloColor":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "HaloColor", "System.Drawing.Color");
                xamlMember.Getter = get_297_TextSymbol_HaloColor;
                xamlMember.Setter = set_297_TextSymbol_HaloColor;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.HaloWidth":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "HaloWidth", "Double");
                xamlMember.Getter = get_298_TextSymbol_HaloWidth;
                xamlMember.Setter = set_298_TextSymbol_HaloWidth;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.OutlineColor":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "OutlineColor", "System.Drawing.Color");
                xamlMember.Getter = get_299_TextSymbol_OutlineColor;
                xamlMember.Setter = set_299_TextSymbol_OutlineColor;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.OutlineWidth":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "OutlineWidth", "Double");
                xamlMember.Getter = get_300_TextSymbol_OutlineWidth;
                xamlMember.Setter = set_300_TextSymbol_OutlineWidth;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.BackgroundColor":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "BackgroundColor", "System.Drawing.Color");
                xamlMember.Getter = get_301_TextSymbol_BackgroundColor;
                xamlMember.Setter = set_301_TextSymbol_BackgroundColor;
                break;
            case "Esri.ArcGISRuntime.Symbology.TextSymbol.KerningEnabled":
                userType = (global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Esri.ArcGISRuntime.Symbology.TextSymbol");
                xamlMember = new global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlMember(this, "KerningEnabled", "Boolean");
                xamlMember.Getter = get_302_TextSymbol_KerningEnabled;
                xamlMember.Setter = set_302_TextSymbol_KerningEnabled;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlSystemBaseType
    {
        global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::GSCFieldApp.GSCFieldApp_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            return Provider.GetXamlType(typeName);
        }
    }
}

