#pragma checksum "C:\Users\Gab\Documents\DEV\gsc-field-application\GSCFieldApp\Views\FieldNotesPage.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "562B585F276BCB57FC96B5A7F498E95B"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GSCFieldApp.Views
{
    partial class ReportPage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_GSCFieldApp_Themes_ExpandPanel_IsExpanded(global::GSCFieldApp.Themes.ExpandPanel obj, global::System.Boolean value)
            {
                obj.IsExpanded = value;
            }
            public static void Set_Windows_UI_Xaml_Media_SolidColorBrush_Color(global::Windows.UI.Xaml.Media.SolidColorBrush obj, global::Windows.UI.Color value)
            {
                obj.Color = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(global::Windows.UI.Xaml.Controls.TextBlock obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Foreground = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_IconElement_Foreground(global::Windows.UI.Xaml.Controls.IconElement obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Foreground = value;
            }
            public static void Set_Windows_UI_Xaml_Media_Brush_Opacity(global::Windows.UI.Xaml.Media.Brush obj, global::System.Double value)
            {
                obj.Opacity = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Opacity(global::Windows.UI.Xaml.UIElement obj, global::System.Double value)
            {
                obj.Opacity = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(global::Windows.UI.Xaml.Controls.Primitives.Selector obj, global::System.Int32 value)
            {
                obj.SelectedIndex = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Documents_Run_Text(global::Windows.UI.Xaml.Documents.Run obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ReportPage_obj11_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IReportPage_Bindings
        {
            private global::GSCFieldApp.Models.FieldNotes dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj11;
            private global::Windows.UI.Xaml.Controls.TextBlock obj12;
            private global::Windows.UI.Xaml.Controls.TextBlock obj13;
            private global::Windows.UI.Xaml.Controls.TextBlock obj14;
            private global::Windows.UI.Xaml.Controls.FontIcon obj15;

            public ReportPage_obj11_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 11: // Views\FieldNotesPage.xaml line 421
                        this.obj11 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.RelativePanel)target);
                        break;
                    case 12: // Views\FieldNotesPage.xaml line 441
                        this.obj12 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 13: // Views\FieldNotesPage.xaml line 446
                        this.obj13 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 14: // Views\FieldNotesPage.xaml line 450
                        this.obj14 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 15: // Views\FieldNotesPage.xaml line 435
                        this.obj15 = (global::Windows.UI.Xaml.Controls.FontIcon)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj11.Target as global::Windows.UI.Xaml.Controls.RelativePanel).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::GSCFieldApp.Models.FieldNotes) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IReportPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::GSCFieldApp.Models.FieldNotes)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::GSCFieldApp.Models.FieldNotes obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_mineralAlteration(obj.mineralAlteration, phase);
                    }
                }
            }
            private void Update_mineralAlteration(global::GSCFieldApp.Models.MineralAlteration obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_mineralAlteration_MAName(obj.MAName, phase);
                        this.Update_mineralAlteration_MAMA(obj.MAMA, phase);
                        this.Update_mineralAlteration_MAMineral(obj.MAMineral, phase);
                        this.Update_mineralAlteration_isValid(obj.isValid, phase);
                    }
                }
            }
            private void Update_mineralAlteration_MAName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 441
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj12, obj, null);
                }
            }
            private void Update_mineralAlteration_MAMA(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 446
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj13, obj, null);
                }
            }
            private void Update_mineralAlteration_MAMineral(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 450
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj14, obj, null);
                }
            }
            private void Update_mineralAlteration_isValid(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 435
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj15, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ReportPage_obj16_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IReportPage_Bindings
        {
            private global::GSCFieldApp.Models.FieldNotes dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj16;
            private global::Windows.UI.Xaml.Controls.TextBlock obj17;
            private global::Windows.UI.Xaml.Controls.TextBlock obj18;
            private global::Windows.UI.Xaml.Documents.Run obj19;
            private global::Windows.UI.Xaml.Documents.Run obj20;
            private global::Windows.UI.Xaml.Controls.FontIcon obj21;

            public ReportPage_obj16_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 16: // Views\FieldNotesPage.xaml line 378
                        this.obj16 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.RelativePanel)target);
                        break;
                    case 17: // Views\FieldNotesPage.xaml line 399
                        this.obj17 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 18: // Views\FieldNotesPage.xaml line 409
                        this.obj18 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 19: // Views\FieldNotesPage.xaml line 406
                        this.obj19 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 20: // Views\FieldNotesPage.xaml line 406
                        this.obj20 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 21: // Views\FieldNotesPage.xaml line 393
                        this.obj21 = (global::Windows.UI.Xaml.Controls.FontIcon)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj16.Target as global::Windows.UI.Xaml.Controls.RelativePanel).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::GSCFieldApp.Models.FieldNotes) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IReportPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::GSCFieldApp.Models.FieldNotes)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::GSCFieldApp.Models.FieldNotes obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_mineral(obj.mineral, phase);
                    }
                }
            }
            private void Update_mineral(global::GSCFieldApp.Models.Mineral obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_mineral_MineralIDName(obj.MineralIDName, phase);
                        this.Update_mineral_MineralMode(obj.MineralMode, phase);
                        this.Update_mineral_MineralNameHuman(obj.MineralNameHuman, phase);
                        this.Update_mineral_MineralName(obj.MineralName, phase);
                        this.Update_mineral_isValid(obj.isValid, phase);
                    }
                }
            }
            private void Update_mineral_MineralIDName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 399
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj17, obj, null);
                }
            }
            private void Update_mineral_MineralMode(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 409
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj18, (global::System.String)this.LookupConverter("PercentageConverter").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_mineral_MineralNameHuman(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 406
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj19, obj, null);
                }
            }
            private void Update_mineral_MineralName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 406
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj20, obj, null);
                }
            }
            private void Update_mineral_isValid(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 393
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj21, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ReportPage_obj22_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IReportPage_Bindings
        {
            private global::GSCFieldApp.Models.FieldNotes dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj22;
            private global::Windows.UI.Xaml.Controls.TextBlock obj23;
            private global::Windows.UI.Xaml.Controls.TextBlock obj24;
            private global::Windows.UI.Xaml.Controls.FontIcon obj25;

            public ReportPage_obj22_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 22: // Views\FieldNotesPage.xaml line 341
                        this.obj22 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.RelativePanel)target);
                        break;
                    case 23: // Views\FieldNotesPage.xaml line 361
                        this.obj23 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 24: // Views\FieldNotesPage.xaml line 366
                        this.obj24 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 25: // Views\FieldNotesPage.xaml line 354
                        this.obj25 = (global::Windows.UI.Xaml.Controls.FontIcon)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj22.Target as global::Windows.UI.Xaml.Controls.RelativePanel).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::GSCFieldApp.Models.FieldNotes) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IReportPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::GSCFieldApp.Models.FieldNotes)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::GSCFieldApp.Models.FieldNotes obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_fossil(obj.fossil, phase);
                    }
                }
            }
            private void Update_fossil(global::GSCFieldApp.Models.Fossil obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_fossil_FossilIDName(obj.FossilIDName, phase);
                        this.Update_fossil_FossilType(obj.FossilType, phase);
                        this.Update_fossil_isValid(obj.isValid, phase);
                    }
                }
            }
            private void Update_fossil_FossilIDName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 361
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj23, obj, null);
                }
            }
            private void Update_fossil_FossilType(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 366
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj24, obj, null);
                }
            }
            private void Update_fossil_isValid(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 354
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj25, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ReportPage_obj26_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IReportPage_Bindings
        {
            private global::GSCFieldApp.Models.FieldNotes dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj26;
            private global::Windows.UI.Xaml.Controls.TextBlock obj27;
            private global::Windows.UI.Xaml.Controls.TextBlock obj28;
            private global::Windows.UI.Xaml.Controls.TextBlock obj29;
            private global::Windows.UI.Xaml.Controls.FontIcon obj30;

            public ReportPage_obj26_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 26: // Views\FieldNotesPage.xaml line 300
                        this.obj26 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.RelativePanel)target);
                        break;
                    case 27: // Views\FieldNotesPage.xaml line 321
                        this.obj27 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 28: // Views\FieldNotesPage.xaml line 326
                        this.obj28 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 29: // Views\FieldNotesPage.xaml line 329
                        this.obj29 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 30: // Views\FieldNotesPage.xaml line 315
                        this.obj30 = (global::Windows.UI.Xaml.Controls.FontIcon)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj26.Target as global::Windows.UI.Xaml.Controls.RelativePanel).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::GSCFieldApp.Models.FieldNotes) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IReportPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::GSCFieldApp.Models.FieldNotes)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::GSCFieldApp.Models.FieldNotes obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_paleoflow(obj.paleoflow, phase);
                    }
                }
            }
            private void Update_paleoflow(global::GSCFieldApp.Models.Paleoflow obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_paleoflow_PFlowName(obj.PFlowName, phase);
                        this.Update_paleoflow_PFlowClass(obj.PFlowClass, phase);
                        this.Update_paleoflow_PFlowSense(obj.PFlowSense, phase);
                        this.Update_paleoflow_isValid(obj.isValid, phase);
                    }
                }
            }
            private void Update_paleoflow_PFlowName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 321
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj27, obj, null);
                }
            }
            private void Update_paleoflow_PFlowClass(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 326
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj28, obj, null);
                }
            }
            private void Update_paleoflow_PFlowSense(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 329
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj29, obj, null);
                }
            }
            private void Update_paleoflow_isValid(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 315
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj30, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ReportPage_obj31_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IReportPage_Bindings
        {
            private global::GSCFieldApp.Models.FieldNotes dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj31;
            private global::Windows.UI.Xaml.Controls.TextBlock obj32;
            private global::Windows.UI.Xaml.Controls.TextBlock obj33;
            private global::Windows.UI.Xaml.Controls.TextBlock obj34;
            private global::Windows.UI.Xaml.Controls.TextBlock obj35;
            private global::Windows.UI.Xaml.Controls.FontIcon obj36;
            private global::Windows.UI.Xaml.Controls.FontIcon obj37;

            public ReportPage_obj31_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 31: // Views\FieldNotesPage.xaml line 251
                        this.obj31 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.RelativePanel)target);
                        break;
                    case 32: // Views\FieldNotesPage.xaml line 278
                        this.obj32 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 33: // Views\FieldNotesPage.xaml line 282
                        this.obj33 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 34: // Views\FieldNotesPage.xaml line 285
                        this.obj34 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 35: // Views\FieldNotesPage.xaml line 288
                        this.obj35 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 36: // Views\FieldNotesPage.xaml line 267
                        this.obj36 = (global::Windows.UI.Xaml.Controls.FontIcon)target;
                        break;
                    case 37: // Views\FieldNotesPage.xaml line 271
                        this.obj37 = (global::Windows.UI.Xaml.Controls.FontIcon)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj31.Target as global::Windows.UI.Xaml.Controls.RelativePanel).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::GSCFieldApp.Models.FieldNotes) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IReportPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::GSCFieldApp.Models.FieldNotes)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::GSCFieldApp.Models.FieldNotes obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_document(obj.document, phase);
                    }
                }
            }
            private void Update_document(global::GSCFieldApp.Models.Document obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_document_DocumentName(obj.DocumentName, phase);
                        this.Update_document_FileName(obj.FileName, phase);
                        this.Update_document_Category(obj.Category, phase);
                        this.Update_document_Description(obj.Description, phase);
                        this.Update_document_isValid(obj.isValid, phase);
                        this.Update_document_PhotoFileExists(obj.PhotoFileExists, phase);
                    }
                }
            }
            private void Update_document_DocumentName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 278
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj32, obj, null);
                }
            }
            private void Update_document_FileName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 282
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj33, obj, null);
                }
            }
            private void Update_document_Category(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 285
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj34, obj, null);
                }
            }
            private void Update_document_Description(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 288
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj35, obj, null);
                }
            }
            private void Update_document_isValid(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 267
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj36, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_document_PhotoFileExists(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 271
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj37, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityFromBoolConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ReportPage_obj38_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IReportPage_Bindings
        {
            private global::GSCFieldApp.Models.FieldNotes dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj38;
            private global::Windows.UI.Xaml.Controls.TextBlock obj39;
            private global::Windows.UI.Xaml.Controls.TextBlock obj40;
            private global::Windows.UI.Xaml.Controls.TextBlock obj41;
            private global::Windows.UI.Xaml.Controls.TextBlock obj42;
            private global::Windows.UI.Xaml.Documents.Run obj43;
            private global::Windows.UI.Xaml.Documents.Run obj44;
            private global::Windows.UI.Xaml.Controls.FontIcon obj45;

            public ReportPage_obj38_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 38: // Views\FieldNotesPage.xaml line 203
                        this.obj38 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.RelativePanel)target);
                        break;
                    case 39: // Views\FieldNotesPage.xaml line 226
                        this.obj39 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 40: // Views\FieldNotesPage.xaml line 229
                        this.obj40 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 41: // Views\FieldNotesPage.xaml line 231
                        this.obj41 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 42: // Views\FieldNotesPage.xaml line 233
                        this.obj42 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 43: // Views\FieldNotesPage.xaml line 237
                        this.obj43 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 44: // Views\FieldNotesPage.xaml line 239
                        this.obj44 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 45: // Views\FieldNotesPage.xaml line 220
                        this.obj45 = (global::Windows.UI.Xaml.Controls.FontIcon)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj38.Target as global::Windows.UI.Xaml.Controls.RelativePanel).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::GSCFieldApp.Models.FieldNotes) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IReportPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::GSCFieldApp.Models.FieldNotes)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::GSCFieldApp.Models.FieldNotes obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_structure(obj.structure, phase);
                    }
                }
            }
            private void Update_structure(global::GSCFieldApp.Models.Structure obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_structure_StructureName(obj.StructureName, phase);
                        this.Update_structure_StructureType(obj.StructureType, phase);
                        this.Update_structure_StructureDetail(obj.StructureDetail, phase);
                        this.Update_structure_StructureFormat(obj.StructureFormat, phase);
                        this.Update_structure_StructureAzimuth(obj.StructureAzimuth, phase);
                        this.Update_structure_StructureDipPlunge(obj.StructureDipPlunge, phase);
                        this.Update_structure_isValid(obj.isValid, phase);
                    }
                }
            }
            private void Update_structure_StructureName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 226
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj39, obj, null);
                }
            }
            private void Update_structure_StructureType(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 229
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj40, obj, null);
                }
            }
            private void Update_structure_StructureDetail(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 231
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj41, obj, null);
                }
            }
            private void Update_structure_StructureFormat(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 233
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj42, obj, null);
                }
            }
            private void Update_structure_StructureAzimuth(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 237
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj43, (global::System.String)this.LookupConverter("TextWithAzimDegreeConverter").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_structure_StructureDipPlunge(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 239
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj44, (global::System.String)this.LookupConverter("TextWithDegreeConverter").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_structure_isValid(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 220
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj45, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ReportPage_obj46_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IReportPage_Bindings
        {
            private global::GSCFieldApp.Models.FieldNotes dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj46;
            private global::Windows.UI.Xaml.Controls.TextBlock obj47;
            private global::Windows.UI.Xaml.Controls.TextBlock obj48;
            private global::Windows.UI.Xaml.Controls.TextBlock obj49;
            private global::Windows.UI.Xaml.Controls.FontIcon obj50;

            public ReportPage_obj46_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 46: // Views\FieldNotesPage.xaml line 167
                        this.obj46 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.RelativePanel)target);
                        break;
                    case 47: // Views\FieldNotesPage.xaml line 187
                        this.obj47 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 48: // Views\FieldNotesPage.xaml line 189
                        this.obj48 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 49: // Views\FieldNotesPage.xaml line 191
                        this.obj49 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 50: // Views\FieldNotesPage.xaml line 181
                        this.obj50 = (global::Windows.UI.Xaml.Controls.FontIcon)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj46.Target as global::Windows.UI.Xaml.Controls.RelativePanel).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::GSCFieldApp.Models.FieldNotes) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IReportPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::GSCFieldApp.Models.FieldNotes)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::GSCFieldApp.Models.FieldNotes obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_sample(obj.sample, phase);
                    }
                }
            }
            private void Update_sample(global::GSCFieldApp.Models.Sample obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_sample_SampleName(obj.SampleName, phase);
                        this.Update_sample_SampleType(obj.SampleType, phase);
                        this.Update_sample_SamplePurpose(obj.SamplePurpose, phase);
                        this.Update_sample_isValid(obj.isValid, phase);
                    }
                }
            }
            private void Update_sample_SampleName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 187
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj47, obj, null);
                }
            }
            private void Update_sample_SampleType(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 189
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj48, obj, null);
                }
            }
            private void Update_sample_SamplePurpose(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 191
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj49, obj, null);
                }
            }
            private void Update_sample_isValid(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 181
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj50, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ReportPage_obj51_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IReportPage_Bindings
        {
            private global::GSCFieldApp.Models.FieldNotes dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj51;
            private global::Windows.UI.Xaml.Controls.TextBlock obj52;
            private global::Windows.UI.Xaml.Controls.TextBlock obj53;
            private global::Windows.UI.Xaml.Controls.TextBlock obj54;
            private global::Windows.UI.Xaml.Controls.FontIcon obj55;

            public ReportPage_obj51_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 51: // Views\FieldNotesPage.xaml line 131
                        this.obj51 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.RelativePanel)target);
                        break;
                    case 52: // Views\FieldNotesPage.xaml line 153
                        this.obj52 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 53: // Views\FieldNotesPage.xaml line 155
                        this.obj53 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 54: // Views\FieldNotesPage.xaml line 157
                        this.obj54 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 55: // Views\FieldNotesPage.xaml line 147
                        this.obj55 = (global::Windows.UI.Xaml.Controls.FontIcon)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj51.Target as global::Windows.UI.Xaml.Controls.RelativePanel).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::GSCFieldApp.Models.FieldNotes) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IReportPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::GSCFieldApp.Models.FieldNotes)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::GSCFieldApp.Models.FieldNotes obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_earthmat(obj.earthmat, phase);
                    }
                }
            }
            private void Update_earthmat(global::GSCFieldApp.Models.EarthMaterial obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_earthmat_EarthMatName(obj.EarthMatName, phase);
                        this.Update_earthmat_EarthMatLithgroup(obj.EarthMatLithgroup, phase);
                        this.Update_earthmat_EarthMatLithdetail(obj.EarthMatLithdetail, phase);
                        this.Update_earthmat_isValid(obj.isValid, phase);
                    }
                }
            }
            private void Update_earthmat_EarthMatName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 153
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj52, obj, null);
                }
            }
            private void Update_earthmat_EarthMatLithgroup(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 155
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj53, obj, null);
                }
            }
            private void Update_earthmat_EarthMatLithdetail(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 157
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj54, obj, null);
                }
            }
            private void Update_earthmat_isValid(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 147
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj55, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ReportPage_obj56_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IReportPage_Bindings
        {
            private global::GSCFieldApp.Models.FieldNotes dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj56;
            private global::Windows.UI.Xaml.Controls.TextBlock obj57;
            private global::Windows.UI.Xaml.Controls.TextBlock obj58;
            private global::Windows.UI.Xaml.Controls.TextBlock obj59;
            private global::Windows.UI.Xaml.Controls.FontIcon obj60;

            public ReportPage_obj56_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 56: // Views\FieldNotesPage.xaml line 91
                        this.obj56 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.RelativePanel)target);
                        break;
                    case 57: // Views\FieldNotesPage.xaml line 112
                        this.obj57 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 58: // Views\FieldNotesPage.xaml line 116
                        this.obj58 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 59: // Views\FieldNotesPage.xaml line 119
                        this.obj59 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 60: // Views\FieldNotesPage.xaml line 106
                        this.obj60 = (global::Windows.UI.Xaml.Controls.FontIcon)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj56.Target as global::Windows.UI.Xaml.Controls.RelativePanel).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::GSCFieldApp.Models.FieldNotes) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IReportPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::GSCFieldApp.Models.FieldNotes)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::GSCFieldApp.Models.FieldNotes obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_station(obj.station, phase);
                    }
                }
            }
            private void Update_station(global::GSCFieldApp.Models.Station obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_station_StationAlias(obj.StationAlias, phase);
                        this.Update_station_StationObsType(obj.StationObsType, phase);
                        this.Update_station_StationNote(obj.StationNote, phase);
                        this.Update_station_isValid(obj.isValid, phase);
                    }
                }
            }
            private void Update_station_StationAlias(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 112
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj57, obj, null);
                }
            }
            private void Update_station_StationObsType(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 116
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj58, obj, null);
                }
            }
            private void Update_station_StationNote(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 119
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj59, obj, null);
                }
            }
            private void Update_station_isValid(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 106
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj60, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ReportPage_obj61_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IReportPage_Bindings
        {
            private global::GSCFieldApp.Models.FieldNotes dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj61;
            private global::Windows.UI.Xaml.Controls.TextBlock obj62;
            private global::Windows.UI.Xaml.Documents.Run obj63;
            private global::Windows.UI.Xaml.Documents.Run obj64;
            private global::Windows.UI.Xaml.Controls.FontIcon obj65;

            public ReportPage_obj61_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 61: // Views\FieldNotesPage.xaml line 50
                        this.obj61 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.RelativePanel)target);
                        break;
                    case 62: // Views\FieldNotesPage.xaml line 80
                        this.obj62 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 63: // Views\FieldNotesPage.xaml line 75
                        this.obj63 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 64: // Views\FieldNotesPage.xaml line 76
                        this.obj64 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 65: // Views\FieldNotesPage.xaml line 67
                        this.obj65 = (global::Windows.UI.Xaml.Controls.FontIcon)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj61.Target as global::Windows.UI.Xaml.Controls.RelativePanel).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::GSCFieldApp.Models.FieldNotes) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IReportPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::GSCFieldApp.Models.FieldNotes)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::GSCFieldApp.Models.FieldNotes obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_location(obj.location, phase);
                    }
                }
            }
            private void Update_location(global::GSCFieldApp.Models.FieldLocation obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_location_LocationElev(obj.LocationElev, phase);
                        this.Update_location_LocationLat(obj.LocationLat, phase);
                        this.Update_location_LocationLong(obj.LocationLong, phase);
                        this.Update_location_isValid(obj.isValid, phase);
                    }
                }
            }
            private void Update_location_LocationElev(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 80
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj62, (global::System.String)this.LookupConverter("ElevationConverter").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_location_LocationLat(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 75
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj63, (global::System.String)this.LookupConverter("TextWithDegreeConverter").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_location_LocationLong(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 76
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj64, (global::System.String)this.LookupConverter("TextWithDegreeConverter").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_location_isValid(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 67
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj65, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ReportPage_obj66_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IReportPage_Bindings
        {
            private global::GSCFieldApp.Models.FieldNotes dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj66;
            private global::Windows.UI.Xaml.Controls.TextBlock obj67;

            public ReportPage_obj66_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 66: // Views\FieldNotesPage.xaml line 30
                        this.obj66 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Grid)target);
                        break;
                    case 67: // Views\FieldNotesPage.xaml line 34
                        this.obj67 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj66.Target as global::Windows.UI.Xaml.Controls.Grid).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::GSCFieldApp.Models.FieldNotes) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IReportPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::GSCFieldApp.Models.FieldNotes)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::GSCFieldApp.Models.FieldNotes obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_station(obj.station, phase);
                    }
                }
            }
            private void Update_station(global::GSCFieldApp.Models.Station obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_station_StationVisitDate(obj.StationVisitDate, phase);
                    }
                }
            }
            private void Update_station_StationVisitDate(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\FieldNotesPage.xaml line 34
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj67, obj, null);
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ReportPage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IReportPage_Bindings
        {
            private global::GSCFieldApp.Views.ReportPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.Grid obj74;
            private global::Windows.UI.Xaml.Controls.Grid obj75;
            private global::Windows.UI.Xaml.Controls.Grid obj76;
            private global::Windows.UI.Xaml.Controls.Grid obj77;
            private global::Windows.UI.Xaml.Controls.Grid obj78;
            private global::Windows.UI.Xaml.Controls.Grid obj79;
            private global::Windows.UI.Xaml.Controls.Grid obj80;
            private global::Windows.UI.Xaml.Controls.Grid obj81;
            private global::GSCFieldApp.Themes.ExpandPanel obj83;
            private global::Windows.UI.Xaml.Media.SolidColorBrush obj84;
            private global::Windows.UI.Xaml.Controls.TextBlock obj87;
            private global::Windows.UI.Xaml.Media.SolidColorBrush obj88;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj89;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj90;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj91;
            private global::Windows.UI.Xaml.Controls.GridView obj92;
            private global::GSCFieldApp.Themes.ExpandPanel obj93;
            private global::Windows.UI.Xaml.Media.SolidColorBrush obj94;
            private global::Windows.UI.Xaml.Controls.TextBlock obj97;
            private global::Windows.UI.Xaml.Media.SolidColorBrush obj98;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj99;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj100;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj101;
            private global::Windows.UI.Xaml.Controls.GridView obj102;
            private global::GSCFieldApp.Themes.ExpandPanel obj103;
            private global::Windows.UI.Xaml.Media.SolidColorBrush obj104;
            private global::Windows.UI.Xaml.Controls.TextBlock obj107;
            private global::Windows.UI.Xaml.Media.SolidColorBrush obj108;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj109;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj110;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj111;
            private global::Windows.UI.Xaml.Controls.GridView obj112;
            private global::GSCFieldApp.Themes.ExpandPanel obj113;
            private global::Windows.UI.Xaml.Media.SolidColorBrush obj114;
            private global::Windows.UI.Xaml.Controls.TextBlock obj117;
            private global::Windows.UI.Xaml.Media.SolidColorBrush obj118;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj119;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj120;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj121;
            private global::Windows.UI.Xaml.Controls.GridView obj122;
            private global::GSCFieldApp.Themes.ExpandPanel obj123;
            private global::Windows.UI.Xaml.Media.SolidColorBrush obj124;
            private global::Windows.UI.Xaml.Controls.TextBlock obj127;
            private global::Windows.UI.Xaml.Media.SolidColorBrush obj128;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj129;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj130;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj131;
            private global::Windows.UI.Xaml.Controls.GridView obj132;
            private global::GSCFieldApp.Themes.ExpandPanel obj133;
            private global::Windows.UI.Xaml.Media.SolidColorBrush obj134;
            private global::Windows.UI.Xaml.Controls.TextBlock obj137;
            private global::Windows.UI.Xaml.Media.SolidColorBrush obj138;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj139;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj140;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj141;
            private global::Windows.UI.Xaml.Controls.GridView obj142;
            private global::GSCFieldApp.Themes.ExpandPanel obj143;
            private global::Windows.UI.Xaml.Media.SolidColorBrush obj144;
            private global::Windows.UI.Xaml.Controls.TextBlock obj147;
            private global::Windows.UI.Xaml.Media.SolidColorBrush obj148;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj149;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj150;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj151;
            private global::Windows.UI.Xaml.Controls.GridView obj152;
            private global::GSCFieldApp.Themes.ExpandPanel obj153;
            private global::Windows.UI.Xaml.Media.SolidColorBrush obj154;
            private global::Windows.UI.Xaml.Controls.TextBlock obj157;
            private global::Windows.UI.Xaml.Media.SolidColorBrush obj158;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj159;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj160;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj161;
            private global::Windows.UI.Xaml.Controls.GridView obj162;
            private global::GSCFieldApp.Themes.ExpandPanel obj163;
            private global::Windows.UI.Xaml.Media.SolidColorBrush obj164;
            private global::Windows.UI.Xaml.Controls.TextBlock obj167;
            private global::Windows.UI.Xaml.Media.SolidColorBrush obj168;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj169;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj170;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj171;
            private global::Windows.UI.Xaml.Controls.GridView obj172;
            private global::GSCFieldApp.Themes.ExpandPanel obj173;
            private global::Windows.UI.Xaml.Media.SolidColorBrush obj174;
            private global::Windows.UI.Xaml.Controls.TextBlock obj176;
            private global::Windows.UI.Xaml.Media.SolidColorBrush obj177;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj178;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj179;
            private global::Windows.UI.Xaml.Controls.GridView obj180;
            private global::Windows.UI.Xaml.Controls.GridView obj182;

            private ReportPage_obj1_BindingsTracking bindingsTracking;

            public ReportPage_obj1_Bindings()
            {
                this.bindingsTracking = new ReportPage_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 74: // Views\FieldNotesPage.xaml line 569
                        this.obj74 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        (this.obj74).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.VisibilityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.EarthmatPanelVisibility = this.obj74.Visibility;
                            }
                        });
                        break;
                    case 75: // Views\FieldNotesPage.xaml line 621
                        this.obj75 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        (this.obj75).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.VisibilityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.SamplePanelVisibility = this.obj75.Visibility;
                            }
                        });
                        break;
                    case 76: // Views\FieldNotesPage.xaml line 678
                        this.obj76 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        (this.obj76).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.VisibilityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.StructurePanelVisibility = this.obj76.Visibility;
                            }
                        });
                        break;
                    case 77: // Views\FieldNotesPage.xaml line 734
                        this.obj77 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        (this.obj77).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.VisibilityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.FossilPanelVisibility = this.obj77.Visibility;
                            }
                        });
                        break;
                    case 78: // Views\FieldNotesPage.xaml line 790
                        this.obj78 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        (this.obj78).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.VisibilityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.PFlowPanelVisibility = this.obj78.Visibility;
                            }
                        });
                        break;
                    case 79: // Views\FieldNotesPage.xaml line 846
                        this.obj79 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        (this.obj79).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.VisibilityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MineralPanelVisibility = this.obj79.Visibility;
                            }
                        });
                        break;
                    case 80: // Views\FieldNotesPage.xaml line 902
                        this.obj80 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        (this.obj80).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.VisibilityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MineralAltPanelVisibility = this.obj80.Visibility;
                            }
                        });
                        break;
                    case 81: // Views\FieldNotesPage.xaml line 967
                        this.obj81 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        (this.obj81).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.VisibilityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.PhotoPanelVisibility = this.obj81.Visibility;
                            }
                        });
                        break;
                    case 83: // Views\FieldNotesPage.xaml line 1026
                        this.obj83 = (global::GSCFieldApp.Themes.ExpandPanel)target;
                        (this.obj83).RegisterPropertyChangedCallback(global::GSCFieldApp.Themes.ExpandPanel.IsExpandedProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.LocationHeaderExpansion = this.obj83.IsExpanded;
                            }
                        });
                        break;
                    case 84: // Views\FieldNotesPage.xaml line 1030
                        this.obj84 = (global::Windows.UI.Xaml.Media.SolidColorBrush)target;
                        (this.obj84).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.SolidColorBrush.ColorProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.LocationColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("SolidColorBrushConverter").ConvertBack(this.obj84.Color, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        break;
                    case 87: // Views\FieldNotesPage.xaml line 1043
                        this.obj87 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        (this.obj87).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.LocationColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj87.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        break;
                    case 88: // Views\FieldNotesPage.xaml line 1039
                        this.obj88 = (global::Windows.UI.Xaml.Media.SolidColorBrush)target;
                        (this.obj88).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.SolidColorBrush.ColorProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.LocationColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("SolidColorBrushConverter").ConvertBack(this.obj88.Color, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj88).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.Brush.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.StationIconColorOpacity = this.obj88.Opacity;
                            }
                        });
                        break;
                    case 89: // Views\FieldNotesPage.xaml line 1054
                        this.obj89 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.LocationAddIcon_Tapped(sender, e);
                        };
                        (this.obj89).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.LocationAddIconColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj89.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj89).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.LocationAddIconOpacity = this.obj89.Opacity;
                            }
                        });
                        break;
                    case 90: // Views\FieldNotesPage.xaml line 1055
                        this.obj90 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.LocationEditIcon_Tapped(sender, e);
                        };
                        (this.obj90).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.LocationColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj90.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj90).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.StationIconOpacity = this.obj90.Opacity;
                            }
                        });
                        break;
                    case 91: // Views\FieldNotesPage.xaml line 1056
                        this.obj91 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.DeleteIcon_TappedAsync(sender, e);
                        };
                        (this.obj91).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.LocationColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj91.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj91).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.DocumentIconOpacity = this.obj91.Opacity;
                            }
                        });
                        break;
                    case 92: // Views\FieldNotesPage.xaml line 1062
                        this.obj92 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        ((global::Windows.UI.Xaml.Controls.GridView)target).DoubleTapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.ReportLocationList_DoubleTapped(sender, e);
                        };
                        ((global::Windows.UI.Xaml.Controls.GridView)target).ItemClick += (global::System.Object sender, global::Windows.UI.Xaml.Controls.ItemClickEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.Report_ItemClick(sender, e);
                        };
                        ((global::Windows.UI.Xaml.Controls.GridView)target).SelectionChanged += (global::System.Object sender, global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.ReportDetail_SelectionChanged(sender, e);
                        };
                        (this.obj92).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.ReportDocumentIndex = this.obj92.SelectedIndex;
                            }
                        });
                        break;
                    case 93: // Views\FieldNotesPage.xaml line 971
                        this.obj93 = (global::GSCFieldApp.Themes.ExpandPanel)target;
                        ((global::GSCFieldApp.Themes.ExpandPanel)target).ExpandedChanged += () =>
                        {
                            this.dataRoot.ViewModel.DocumentExpandPanel_ExpandedChanged();
                        };
                        (this.obj93).RegisterPropertyChangedCallback(global::GSCFieldApp.Themes.ExpandPanel.IsExpandedProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.DocumentHeaderExpand = this.obj93.IsExpanded;
                            }
                        });
                        break;
                    case 94: // Views\FieldNotesPage.xaml line 978
                        this.obj94 = (global::Windows.UI.Xaml.Media.SolidColorBrush)target;
                        (this.obj94).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.SolidColorBrush.ColorProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.DocumentColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("SolidColorBrushConverter").ConvertBack(this.obj94.Color, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        break;
                    case 97: // Views\FieldNotesPage.xaml line 987
                        this.obj97 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        (this.obj97).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.TextProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.HeaderDocument = this.obj97.Text;
                            }
                        });
                        (this.obj97).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.DocumentColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj97.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        break;
                    case 98: // Views\FieldNotesPage.xaml line 984
                        this.obj98 = (global::Windows.UI.Xaml.Media.SolidColorBrush)target;
                        (this.obj98).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.SolidColorBrush.ColorProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.DocumentColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("SolidColorBrushConverter").ConvertBack(this.obj98.Color, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj98).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.Brush.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.DocumentIconColorOpacity = this.obj98.Opacity;
                            }
                        });
                        break;
                    case 99: // Views\FieldNotesPage.xaml line 998
                        this.obj99 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.DocumentAddIcon_Tapped(sender, e);
                        };
                        (this.obj99).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.DocumentAddIconColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj99.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj99).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.DocumentAddIconOpacity = this.obj99.Opacity;
                            }
                        });
                        break;
                    case 100: // Views\FieldNotesPage.xaml line 999
                        this.obj100 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.DocumentEditIcon_Tapped(sender, e);
                        };
                        (this.obj100).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.DocumentColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj100.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj100).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.DocumentIconOpacity = this.obj100.Opacity;
                            }
                        });
                        break;
                    case 101: // Views\FieldNotesPage.xaml line 1000
                        this.obj101 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.DeleteIcon_TappedAsync(sender, e);
                        };
                        (this.obj101).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.DocumentColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj101.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj101).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.DocumentIconOpacity = this.obj101.Opacity;
                            }
                        });
                        break;
                    case 102: // Views\FieldNotesPage.xaml line 1006
                        this.obj102 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        ((global::Windows.UI.Xaml.Controls.GridView)target).ItemClick += (global::System.Object sender, global::Windows.UI.Xaml.Controls.ItemClickEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.Report_ItemClick(sender, e);
                        };
                        ((global::Windows.UI.Xaml.Controls.GridView)target).SelectionChanged += (global::System.Object sender, global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.ReportDetail_SelectionChanged(sender, e);
                        };
                        ((global::Windows.UI.Xaml.Controls.GridView)target).DoubleTapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.ReportDocumentList_DoubleTapped(sender, e);
                        };
                        (this.obj102).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.ReportDocumentIndex = this.obj102.SelectedIndex;
                            }
                        });
                        break;
                    case 103: // Views\FieldNotesPage.xaml line 906
                        this.obj103 = (global::GSCFieldApp.Themes.ExpandPanel)target;
                        ((global::GSCFieldApp.Themes.ExpandPanel)target).ExpandedChanged += () =>
                        {
                            this.dataRoot.ViewModel.MineralAltExpandPanel_ExpandedChanged();
                        };
                        (this.obj103).RegisterPropertyChangedCallback(global::GSCFieldApp.Themes.ExpandPanel.IsExpandedProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MineralAltHeaderExpansion = this.obj103.IsExpanded;
                            }
                        });
                        break;
                    case 104: // Views\FieldNotesPage.xaml line 913
                        this.obj104 = (global::Windows.UI.Xaml.Media.SolidColorBrush)target;
                        (this.obj104).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.SolidColorBrush.ColorProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MineralAltColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("SolidColorBrushConverter").ConvertBack(this.obj104.Color, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        break;
                    case 107: // Views\FieldNotesPage.xaml line 923
                        this.obj107 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        ((global::Windows.UI.Xaml.Controls.TextBlock)target).SizeChanged += (global::System.Object sender, global::Windows.UI.Xaml.SizeChangedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.textBlock_FieldMineralAlt_SizeChanged(sender, e);
                        };
                        (this.obj107).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MineralAltColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj107.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        break;
                    case 108: // Views\FieldNotesPage.xaml line 919
                        this.obj108 = (global::Windows.UI.Xaml.Media.SolidColorBrush)target;
                        (this.obj108).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.SolidColorBrush.ColorProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MineralAltColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("SolidColorBrushConverter").ConvertBack(this.obj108.Color, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj108).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.Brush.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MineralAltIconColorOpacity = this.obj108.Opacity;
                            }
                        });
                        break;
                    case 109: // Views\FieldNotesPage.xaml line 935
                        this.obj109 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.MineralAltAddIcon_Tapped(sender, e);
                        };
                        (this.obj109).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MineralAltAddIconColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj109.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj109).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MineralAltAddIconOpacity = this.obj109.Opacity;
                            }
                        });
                        break;
                    case 110: // Views\FieldNotesPage.xaml line 938
                        this.obj110 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.MineralAltEditIcon_Tapped(sender, e);
                        };
                        (this.obj110).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MineralAltColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj110.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj110).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MineralAltIconOpacity = this.obj110.Opacity;
                            }
                        });
                        break;
                    case 111: // Views\FieldNotesPage.xaml line 942
                        this.obj111 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.DeleteIcon_TappedAsync(sender, e);
                        };
                        (this.obj111).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MineralAltColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj111.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj111).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MineralAltIconOpacity = this.obj111.Opacity;
                            }
                        });
                        break;
                    case 112: // Views\FieldNotesPage.xaml line 951
                        this.obj112 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        ((global::Windows.UI.Xaml.Controls.GridView)target).ItemClick += (global::System.Object sender, global::Windows.UI.Xaml.Controls.ItemClickEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.Report_ItemClick(sender, e);
                        };
                        ((global::Windows.UI.Xaml.Controls.GridView)target).SelectionChanged += (global::System.Object sender, global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.ReportDetail_SelectionChanged(sender, e);
                        };
                        ((global::Windows.UI.Xaml.Controls.GridView)target).DoubleTapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.ReportMineralAltList_DoubleTapped(sender, e);
                        };
                        (this.obj112).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.ReportMineralizationAlterationIndex = this.obj112.SelectedIndex;
                            }
                        });
                        break;
                    case 113: // Views\FieldNotesPage.xaml line 850
                        this.obj113 = (global::GSCFieldApp.Themes.ExpandPanel)target;
                        ((global::GSCFieldApp.Themes.ExpandPanel)target).ExpandedChanged += () =>
                        {
                            this.dataRoot.ViewModel.MineralExpandPanel_ExpandedChanged();
                        };
                        (this.obj113).RegisterPropertyChangedCallback(global::GSCFieldApp.Themes.ExpandPanel.IsExpandedProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MineralHeaderExpansion = this.obj113.IsExpanded;
                            }
                        });
                        break;
                    case 114: // Views\FieldNotesPage.xaml line 857
                        this.obj114 = (global::Windows.UI.Xaml.Media.SolidColorBrush)target;
                        (this.obj114).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.SolidColorBrush.ColorProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MineralColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("SolidColorBrushConverter").ConvertBack(this.obj114.Color, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        break;
                    case 117: // Views\FieldNotesPage.xaml line 866
                        this.obj117 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        ((global::Windows.UI.Xaml.Controls.TextBlock)target).SizeChanged += (global::System.Object sender, global::Windows.UI.Xaml.SizeChangedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.textBlock_FieldMineral_SizeChanged(sender, e);
                        };
                        (this.obj117).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MineralColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj117.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        break;
                    case 118: // Views\FieldNotesPage.xaml line 863
                        this.obj118 = (global::Windows.UI.Xaml.Media.SolidColorBrush)target;
                        (this.obj118).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.SolidColorBrush.ColorProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MineralColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("SolidColorBrushConverter").ConvertBack(this.obj118.Color, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj118).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.Brush.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MineralIconColorOpacity = this.obj118.Opacity;
                            }
                        });
                        break;
                    case 119: // Views\FieldNotesPage.xaml line 878
                        this.obj119 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.MineralAddIcon_Tapped(sender, e);
                        };
                        (this.obj119).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MineralAddIconColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj119.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj119).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MineralAddIconOpacity = this.obj119.Opacity;
                            }
                        });
                        break;
                    case 120: // Views\FieldNotesPage.xaml line 879
                        this.obj120 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.MineralEditIcon_Tapped(sender, e);
                        };
                        (this.obj120).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MineralColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj120.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj120).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MineralIconOpacity = this.obj120.Opacity;
                            }
                        });
                        break;
                    case 121: // Views\FieldNotesPage.xaml line 880
                        this.obj121 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.DeleteIcon_TappedAsync(sender, e);
                        };
                        (this.obj121).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MineralColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj121.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj121).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MineralIconOpacity = this.obj121.Opacity;
                            }
                        });
                        break;
                    case 122: // Views\FieldNotesPage.xaml line 886
                        this.obj122 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        ((global::Windows.UI.Xaml.Controls.GridView)target).ItemClick += (global::System.Object sender, global::Windows.UI.Xaml.Controls.ItemClickEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.Report_ItemClick(sender, e);
                        };
                        ((global::Windows.UI.Xaml.Controls.GridView)target).SelectionChanged += (global::System.Object sender, global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.ReportDetail_SelectionChanged(sender, e);
                        };
                        ((global::Windows.UI.Xaml.Controls.GridView)target).DoubleTapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.ReportMineralList_DoubleTapped(sender, e);
                        };
                        (this.obj122).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.ReportMineralsIndex = this.obj122.SelectedIndex;
                            }
                        });
                        break;
                    case 123: // Views\FieldNotesPage.xaml line 794
                        this.obj123 = (global::GSCFieldApp.Themes.ExpandPanel)target;
                        ((global::GSCFieldApp.Themes.ExpandPanel)target).ExpandedChanged += () =>
                        {
                            this.dataRoot.ViewModel.PflowExpandPanel_ExpandedChanged();
                        };
                        (this.obj123).RegisterPropertyChangedCallback(global::GSCFieldApp.Themes.ExpandPanel.IsExpandedProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.PflowHeaderExpansion = this.obj123.IsExpanded;
                            }
                        });
                        break;
                    case 124: // Views\FieldNotesPage.xaml line 801
                        this.obj124 = (global::Windows.UI.Xaml.Media.SolidColorBrush)target;
                        (this.obj124).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.SolidColorBrush.ColorProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.PaleoflowColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("SolidColorBrushConverter").ConvertBack(this.obj124.Color, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        break;
                    case 127: // Views\FieldNotesPage.xaml line 810
                        this.obj127 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        ((global::Windows.UI.Xaml.Controls.TextBlock)target).SizeChanged += (global::System.Object sender, global::Windows.UI.Xaml.SizeChangedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.textBlock_FieldPflow_SizeChanged(sender, e);
                        };
                        (this.obj127).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.PaleoflowColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj127.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        break;
                    case 128: // Views\FieldNotesPage.xaml line 807
                        this.obj128 = (global::Windows.UI.Xaml.Media.SolidColorBrush)target;
                        (this.obj128).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.SolidColorBrush.ColorProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.PaleoflowColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("SolidColorBrushConverter").ConvertBack(this.obj128.Color, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj128).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.Brush.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.PflowIconColorOpacity = this.obj128.Opacity;
                            }
                        });
                        break;
                    case 129: // Views\FieldNotesPage.xaml line 822
                        this.obj129 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.PflowAddIcon_Tapped(sender, e);
                        };
                        (this.obj129).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.PaleoflowAddIconColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj129.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj129).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.PflowAddIconOpacity = this.obj129.Opacity;
                            }
                        });
                        break;
                    case 130: // Views\FieldNotesPage.xaml line 823
                        this.obj130 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.PflowEditIcon_Tapped(sender, e);
                        };
                        (this.obj130).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.PaleoflowColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj130.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj130).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.PflowIconOpacity = this.obj130.Opacity;
                            }
                        });
                        break;
                    case 131: // Views\FieldNotesPage.xaml line 824
                        this.obj131 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.DeleteIcon_TappedAsync(sender, e);
                        };
                        (this.obj131).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.PaleoflowColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj131.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj131).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.PflowIconOpacity = this.obj131.Opacity;
                            }
                        });
                        break;
                    case 132: // Views\FieldNotesPage.xaml line 830
                        this.obj132 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        ((global::Windows.UI.Xaml.Controls.GridView)target).ItemClick += (global::System.Object sender, global::Windows.UI.Xaml.Controls.ItemClickEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.Report_ItemClick(sender, e);
                        };
                        ((global::Windows.UI.Xaml.Controls.GridView)target).SelectionChanged += (global::System.Object sender, global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.ReportDetail_SelectionChanged(sender, e);
                        };
                        ((global::Windows.UI.Xaml.Controls.GridView)target).DoubleTapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.ReportPflowList_DoubleTapped(sender, e);
                        };
                        (this.obj132).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.ReportPflowIndex = this.obj132.SelectedIndex;
                            }
                        });
                        break;
                    case 133: // Views\FieldNotesPage.xaml line 738
                        this.obj133 = (global::GSCFieldApp.Themes.ExpandPanel)target;
                        ((global::GSCFieldApp.Themes.ExpandPanel)target).ExpandedChanged += () =>
                        {
                            this.dataRoot.ViewModel.FossilExpandPanel_ExpandedChanged();
                        };
                        (this.obj133).RegisterPropertyChangedCallback(global::GSCFieldApp.Themes.ExpandPanel.IsExpandedProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.FossilHeaderExpansion = this.obj133.IsExpanded;
                            }
                        });
                        break;
                    case 134: // Views\FieldNotesPage.xaml line 745
                        this.obj134 = (global::Windows.UI.Xaml.Media.SolidColorBrush)target;
                        (this.obj134).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.SolidColorBrush.ColorProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.FossilColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("SolidColorBrushConverter").ConvertBack(this.obj134.Color, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        break;
                    case 137: // Views\FieldNotesPage.xaml line 754
                        this.obj137 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        ((global::Windows.UI.Xaml.Controls.TextBlock)target).SizeChanged += (global::System.Object sender, global::Windows.UI.Xaml.SizeChangedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.textBlock_FieldFossil_SizeChanged(sender, e);
                        };
                        (this.obj137).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.FossilColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj137.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        break;
                    case 138: // Views\FieldNotesPage.xaml line 751
                        this.obj138 = (global::Windows.UI.Xaml.Media.SolidColorBrush)target;
                        (this.obj138).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.SolidColorBrush.ColorProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.FossilColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("SolidColorBrushConverter").ConvertBack(this.obj138.Color, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj138).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.Brush.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.FossilIconColorOpacity = this.obj138.Opacity;
                            }
                        });
                        break;
                    case 139: // Views\FieldNotesPage.xaml line 766
                        this.obj139 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.FossilAddIcon_Tapped(sender, e);
                        };
                        (this.obj139).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.FossilAddIconColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj139.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj139).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.FossilAddIconOpacity = this.obj139.Opacity;
                            }
                        });
                        break;
                    case 140: // Views\FieldNotesPage.xaml line 767
                        this.obj140 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.FossilEditIcon_Tapped(sender, e);
                        };
                        (this.obj140).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.FossilColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj140.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj140).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.FossilIconOpacity = this.obj140.Opacity;
                            }
                        });
                        break;
                    case 141: // Views\FieldNotesPage.xaml line 768
                        this.obj141 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.DeleteIcon_TappedAsync(sender, e);
                        };
                        (this.obj141).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.FossilColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj141.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj141).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.FossilIconOpacity = this.obj141.Opacity;
                            }
                        });
                        break;
                    case 142: // Views\FieldNotesPage.xaml line 774
                        this.obj142 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        ((global::Windows.UI.Xaml.Controls.GridView)target).ItemClick += (global::System.Object sender, global::Windows.UI.Xaml.Controls.ItemClickEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.Report_ItemClick(sender, e);
                        };
                        ((global::Windows.UI.Xaml.Controls.GridView)target).SelectionChanged += (global::System.Object sender, global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.ReportDetail_SelectionChanged(sender, e);
                        };
                        ((global::Windows.UI.Xaml.Controls.GridView)target).DoubleTapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.ReportFossilList_DoubleTapped(sender, e);
                        };
                        (this.obj142).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.ReportFossilIndex = this.obj142.SelectedIndex;
                            }
                        });
                        break;
                    case 143: // Views\FieldNotesPage.xaml line 682
                        this.obj143 = (global::GSCFieldApp.Themes.ExpandPanel)target;
                        ((global::GSCFieldApp.Themes.ExpandPanel)target).ExpandedChanged += () =>
                        {
                            this.dataRoot.ViewModel.StructureExpandPanel_ExpandedChanged();
                        };
                        (this.obj143).RegisterPropertyChangedCallback(global::GSCFieldApp.Themes.ExpandPanel.IsExpandedProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.StructureHeaderExpansion = this.obj143.IsExpanded;
                            }
                        });
                        break;
                    case 144: // Views\FieldNotesPage.xaml line 689
                        this.obj144 = (global::Windows.UI.Xaml.Media.SolidColorBrush)target;
                        (this.obj144).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.SolidColorBrush.ColorProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.StructColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("SolidColorBrushConverter").ConvertBack(this.obj144.Color, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        break;
                    case 147: // Views\FieldNotesPage.xaml line 698
                        this.obj147 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        ((global::Windows.UI.Xaml.Controls.TextBlock)target).SizeChanged += (global::System.Object sender, global::Windows.UI.Xaml.SizeChangedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.textBlock_FieldStructure_SizeChanged(sender, e);
                        };
                        (this.obj147).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.StructColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj147.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        break;
                    case 148: // Views\FieldNotesPage.xaml line 695
                        this.obj148 = (global::Windows.UI.Xaml.Media.SolidColorBrush)target;
                        (this.obj148).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.SolidColorBrush.ColorProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.StructColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("SolidColorBrushConverter").ConvertBack(this.obj148.Color, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj148).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.Brush.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.StructureIconColorOpacity = this.obj148.Opacity;
                            }
                        });
                        break;
                    case 149: // Views\FieldNotesPage.xaml line 710
                        this.obj149 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.StructureAddIcon_Tapped(sender, e);
                        };
                        (this.obj149).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.StructAddIconColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj149.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj149).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.StructureAddIconOpacity = this.obj149.Opacity;
                            }
                        });
                        break;
                    case 150: // Views\FieldNotesPage.xaml line 711
                        this.obj150 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.StructureEditIcon_Tapped(sender, e);
                        };
                        (this.obj150).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.StructColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj150.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj150).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.StructureIconOpacity = this.obj150.Opacity;
                            }
                        });
                        break;
                    case 151: // Views\FieldNotesPage.xaml line 712
                        this.obj151 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.DeleteIcon_TappedAsync(sender, e);
                        };
                        (this.obj151).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.StructColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj151.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj151).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.StructureIconOpacity = this.obj151.Opacity;
                            }
                        });
                        break;
                    case 152: // Views\FieldNotesPage.xaml line 718
                        this.obj152 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        ((global::Windows.UI.Xaml.Controls.GridView)target).ItemClick += (global::System.Object sender, global::Windows.UI.Xaml.Controls.ItemClickEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.Report_ItemClick(sender, e);
                        };
                        ((global::Windows.UI.Xaml.Controls.GridView)target).SelectionChanged += (global::System.Object sender, global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.ReportDetail_SelectionChanged(sender, e);
                        };
                        ((global::Windows.UI.Xaml.Controls.GridView)target).DoubleTapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.ReportStructureList_DoubleTapped(sender, e);
                        };
                        (this.obj152).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.ReportStructureIndex = this.obj152.SelectedIndex;
                            }
                        });
                        break;
                    case 153: // Views\FieldNotesPage.xaml line 625
                        this.obj153 = (global::GSCFieldApp.Themes.ExpandPanel)target;
                        ((global::GSCFieldApp.Themes.ExpandPanel)target).ExpandedChanged += () =>
                        {
                            this.dataRoot.ViewModel.SampleExpandPanel_ExpandedChanged();
                        };
                        (this.obj153).RegisterPropertyChangedCallback(global::GSCFieldApp.Themes.ExpandPanel.IsExpandedProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.SampleHeaderExpansion = this.obj153.IsExpanded;
                            }
                        });
                        break;
                    case 154: // Views\FieldNotesPage.xaml line 632
                        this.obj154 = (global::Windows.UI.Xaml.Media.SolidColorBrush)target;
                        (this.obj154).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.SolidColorBrush.ColorProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.SampleColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("SolidColorBrushConverter").ConvertBack(this.obj154.Color, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        break;
                    case 157: // Views\FieldNotesPage.xaml line 641
                        this.obj157 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        ((global::Windows.UI.Xaml.Controls.TextBlock)target).SizeChanged += (global::System.Object sender, global::Windows.UI.Xaml.SizeChangedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.textBlock_FieldSample_SizeChanged(sender, e);
                        };
                        (this.obj157).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.SampleColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj157.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        break;
                    case 158: // Views\FieldNotesPage.xaml line 638
                        this.obj158 = (global::Windows.UI.Xaml.Media.SolidColorBrush)target;
                        (this.obj158).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.SolidColorBrush.ColorProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.SampleColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("SolidColorBrushConverter").ConvertBack(this.obj158.Color, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj158).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.Brush.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.SampleIconColorOpacity = this.obj158.Opacity;
                            }
                        });
                        break;
                    case 159: // Views\FieldNotesPage.xaml line 653
                        this.obj159 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.SampleAddIcon_Tapped(sender, e);
                        };
                        (this.obj159).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.SampleAddIconColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj159.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj159).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.SampleAddIconOpacity = this.obj159.Opacity;
                            }
                        });
                        break;
                    case 160: // Views\FieldNotesPage.xaml line 654
                        this.obj160 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.SampleEditIcon_Tapped(sender, e);
                        };
                        (this.obj160).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.SampleColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj160.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj160).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.SampleIconOpacity = this.obj160.Opacity;
                            }
                        });
                        break;
                    case 161: // Views\FieldNotesPage.xaml line 655
                        this.obj161 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.DeleteIcon_TappedAsync(sender, e);
                        };
                        (this.obj161).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.SampleColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj161.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj161).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.SampleIconOpacity = this.obj161.Opacity;
                            }
                        });
                        break;
                    case 162: // Views\FieldNotesPage.xaml line 661
                        this.obj162 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        ((global::Windows.UI.Xaml.Controls.GridView)target).ItemClick += (global::System.Object sender, global::Windows.UI.Xaml.Controls.ItemClickEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.Report_ItemClick(sender, e);
                        };
                        ((global::Windows.UI.Xaml.Controls.GridView)target).SelectionChanged += (global::System.Object sender, global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.ReportDetail_SelectionChanged(sender, e);
                        };
                        ((global::Windows.UI.Xaml.Controls.GridView)target).DoubleTapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.ReportSampleList_DoubleTapped(sender, e);
                        };
                        (this.obj162).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.ReportSampleIndex = this.obj162.SelectedIndex;
                            }
                        });
                        break;
                    case 163: // Views\FieldNotesPage.xaml line 572
                        this.obj163 = (global::GSCFieldApp.Themes.ExpandPanel)target;
                        ((global::GSCFieldApp.Themes.ExpandPanel)target).ExpandedChanged += () =>
                        {
                            this.dataRoot.ViewModel.EarthMatExpandPanel_ExpandedChanged();
                        };
                        (this.obj163).RegisterPropertyChangedCallback(global::GSCFieldApp.Themes.ExpandPanel.IsExpandedProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.EarthmatHeaderExpansion = this.obj163.IsExpanded;
                            }
                        });
                        break;
                    case 164: // Views\FieldNotesPage.xaml line 578
                        this.obj164 = (global::Windows.UI.Xaml.Media.SolidColorBrush)target;
                        (this.obj164).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.SolidColorBrush.ColorProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.EarthmatColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("SolidColorBrushConverter").ConvertBack(this.obj164.Color, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        break;
                    case 167: // Views\FieldNotesPage.xaml line 589
                        this.obj167 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        (this.obj167).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.EarthmatColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj167.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        break;
                    case 168: // Views\FieldNotesPage.xaml line 586
                        this.obj168 = (global::Windows.UI.Xaml.Media.SolidColorBrush)target;
                        (this.obj168).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.SolidColorBrush.ColorProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.EarthmatColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("SolidColorBrushConverter").ConvertBack(this.obj168.Color, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj168).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.Brush.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.EarthmatIconColorOpacity = this.obj168.Opacity;
                            }
                        });
                        break;
                    case 169: // Views\FieldNotesPage.xaml line 600
                        this.obj169 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.EarthMatAddIcon_Tapped(sender, e);
                        };
                        (this.obj169).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.EarthmatAddIconColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj169.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj169).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.EarthmatAddIconOpacity = this.obj169.Opacity;
                            }
                        });
                        break;
                    case 170: // Views\FieldNotesPage.xaml line 601
                        this.obj170 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.EarthMatEditIcon_Tapped(sender, e);
                        };
                        (this.obj170).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.EarthmatColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj170.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj170).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.EarthmatIconOpacity = this.obj170.Opacity;
                            }
                        });
                        break;
                    case 171: // Views\FieldNotesPage.xaml line 602
                        this.obj171 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.DeleteIcon_TappedAsync(sender, e);
                        };
                        (this.obj171).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.EarthmatColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj171.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj171).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.EarthmatIconOpacity = this.obj171.Opacity;
                            }
                        });
                        break;
                    case 172: // Views\FieldNotesPage.xaml line 607
                        this.obj172 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        ((global::Windows.UI.Xaml.Controls.GridView)target).ItemClick += (global::System.Object sender, global::Windows.UI.Xaml.Controls.ItemClickEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.Report_ItemClick(sender, e);
                        };
                        ((global::Windows.UI.Xaml.Controls.GridView)target).SelectionChanged += (global::System.Object sender, global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.ReportDetail_SelectionChanged(sender, e);
                        };
                        ((global::Windows.UI.Xaml.Controls.GridView)target).DoubleTapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.ReportEarthmatList_DoubleTapped(sender, e);
                        };
                        (this.obj172).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.ReportEarhtmatIndex = this.obj172.SelectedIndex;
                            }
                        });
                        break;
                    case 173: // Views\FieldNotesPage.xaml line 520
                        this.obj173 = (global::GSCFieldApp.Themes.ExpandPanel)target;
                        (this.obj173).RegisterPropertyChangedCallback(global::GSCFieldApp.Themes.ExpandPanel.IsExpandedProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.StationHeaderExpansion = this.obj173.IsExpanded;
                            }
                        });
                        break;
                    case 174: // Views\FieldNotesPage.xaml line 522
                        this.obj174 = (global::Windows.UI.Xaml.Media.SolidColorBrush)target;
                        (this.obj174).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.SolidColorBrush.ColorProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.StationColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("SolidColorBrushConverter").ConvertBack(this.obj174.Color, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        break;
                    case 176: // Views\FieldNotesPage.xaml line 532
                        this.obj176 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        (this.obj176).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.StationColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj176.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        break;
                    case 177: // Views\FieldNotesPage.xaml line 528
                        this.obj177 = (global::Windows.UI.Xaml.Media.SolidColorBrush)target;
                        (this.obj177).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.SolidColorBrush.ColorProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.StationColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("SolidColorBrushConverter").ConvertBack(this.obj177.Color, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj177).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.Brush.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.StationIconColorOpacity = this.obj177.Opacity;
                            }
                        });
                        break;
                    case 178: // Views\FieldNotesPage.xaml line 542
                        this.obj178 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.StationEditIcon_Tapped(sender, e);
                        };
                        (this.obj178).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.StationColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj178.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj178).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.StationIconOpacity = this.obj178.Opacity;
                            }
                        });
                        break;
                    case 179: // Views\FieldNotesPage.xaml line 545
                        this.obj179 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.DeleteIcon_TappedAsync(sender, e);
                        };
                        (this.obj179).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.IconElement.ForegroundProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.StationColor = (global::Windows.UI.Xaml.Media.SolidColorBrush)this.LookupConverter("MediaBrushConverter").ConvertBack(this.obj179.Foreground, typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), null, null);
                            }
                        });
                        (this.obj179).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.OpacityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.StationIconOpacity = this.obj179.Opacity;
                            }
                        });
                        break;
                    case 180: // Views\FieldNotesPage.xaml line 553
                        this.obj180 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        ((global::Windows.UI.Xaml.Controls.GridView)target).ItemClick += (global::System.Object sender, global::Windows.UI.Xaml.Controls.ItemClickEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.Report_ItemClick(sender, e);
                        };
                        ((global::Windows.UI.Xaml.Controls.GridView)target).SelectionChanged += (global::System.Object sender, global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.ReportDetail_SelectionChanged(sender, e);
                        };
                        ((global::Windows.UI.Xaml.Controls.GridView)target).DoubleTapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.ReportStationList_DoubleTapped(sender, e);
                        };
                        (this.obj180).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.ReportStationListIndex = this.obj180.SelectedIndex;
                            }
                        });
                        break;
                    case 182: // Views\FieldNotesPage.xaml line 472
                        this.obj182 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        ((global::Windows.UI.Xaml.Controls.GridView)target).SelectionChanged += (global::System.Object sender, global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.ReportSummaryDate_SelectionChanged(sender, e);
                        };
                        (this.obj182).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.ReportListViewDateIndex = this.obj182.SelectedIndex;
                            }
                        });
                        break;
                    default:
                        break;
                }
            }

            // IReportPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::GSCFieldApp.Views.ReportPage)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::GSCFieldApp.Views.ReportPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::GSCFieldApp.ViewModels.FieldNotesViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_EarthmatPanelVisibility(obj.EarthmatPanelVisibility, phase);
                        this.Update_ViewModel_SamplePanelVisibility(obj.SamplePanelVisibility, phase);
                        this.Update_ViewModel_StructurePanelVisibility(obj.StructurePanelVisibility, phase);
                        this.Update_ViewModel_FossilPanelVisibility(obj.FossilPanelVisibility, phase);
                        this.Update_ViewModel_PFlowPanelVisibility(obj.PFlowPanelVisibility, phase);
                        this.Update_ViewModel_MineralPanelVisibility(obj.MineralPanelVisibility, phase);
                        this.Update_ViewModel_MineralAltPanelVisibility(obj.MineralAltPanelVisibility, phase);
                        this.Update_ViewModel_PhotoPanelVisibility(obj.PhotoPanelVisibility, phase);
                        this.Update_ViewModel_LocationHeaderExpansion(obj.LocationHeaderExpansion, phase);
                        this.Update_ViewModel_LocationColor(obj.LocationColor, phase);
                        this.Update_ViewModel_StationIconColorOpacity(obj.StationIconColorOpacity, phase);
                        this.Update_ViewModel_LocationAddIconColor(obj.LocationAddIconColor, phase);
                        this.Update_ViewModel_LocationAddIconOpacity(obj.LocationAddIconOpacity, phase);
                        this.Update_ViewModel_StationIconOpacity(obj.StationIconOpacity, phase);
                        this.Update_ViewModel_DocumentIconOpacity(obj.DocumentIconOpacity, phase);
                        this.Update_ViewModel_ReportDocumentIndex(obj.ReportDocumentIndex, phase);
                        this.Update_ViewModel_ReportDetailedLocation(obj.ReportDetailedLocation, phase);
                        this.Update_ViewModel_DocumentHeaderExpand(obj.DocumentHeaderExpand, phase);
                        this.Update_ViewModel_DocumentColor(obj.DocumentColor, phase);
                        this.Update_ViewModel_HeaderDocument(obj.HeaderDocument, phase);
                        this.Update_ViewModel_DocumentIconColorOpacity(obj.DocumentIconColorOpacity, phase);
                        this.Update_ViewModel_DocumentAddIconColor(obj.DocumentAddIconColor, phase);
                        this.Update_ViewModel_DocumentAddIconOpacity(obj.DocumentAddIconOpacity, phase);
                        this.Update_ViewModel_ReportDetailedDocument(obj.ReportDetailedDocument, phase);
                        this.Update_ViewModel_MineralAltHeaderExpansion(obj.MineralAltHeaderExpansion, phase);
                        this.Update_ViewModel_MineralAltColor(obj.MineralAltColor, phase);
                        this.Update_ViewModel_MineralAltIconColorOpacity(obj.MineralAltIconColorOpacity, phase);
                        this.Update_ViewModel_MineralAltAddIconColor(obj.MineralAltAddIconColor, phase);
                        this.Update_ViewModel_MineralAltAddIconOpacity(obj.MineralAltAddIconOpacity, phase);
                        this.Update_ViewModel_MineralAltIconOpacity(obj.MineralAltIconOpacity, phase);
                        this.Update_ViewModel_ReportMineralizationAlterationIndex(obj.ReportMineralizationAlterationIndex, phase);
                        this.Update_ViewModel_ReportDetailedMineralAlt(obj.ReportDetailedMineralAlt, phase);
                        this.Update_ViewModel_MineralHeaderExpansion(obj.MineralHeaderExpansion, phase);
                        this.Update_ViewModel_MineralColor(obj.MineralColor, phase);
                        this.Update_ViewModel_MineralIconColorOpacity(obj.MineralIconColorOpacity, phase);
                        this.Update_ViewModel_MineralAddIconColor(obj.MineralAddIconColor, phase);
                        this.Update_ViewModel_MineralAddIconOpacity(obj.MineralAddIconOpacity, phase);
                        this.Update_ViewModel_MineralIconOpacity(obj.MineralIconOpacity, phase);
                        this.Update_ViewModel_ReportMineralsIndex(obj.ReportMineralsIndex, phase);
                        this.Update_ViewModel_ReportDetailedMineral(obj.ReportDetailedMineral, phase);
                        this.Update_ViewModel_PflowHeaderExpansion(obj.PflowHeaderExpansion, phase);
                        this.Update_ViewModel_PaleoflowColor(obj.PaleoflowColor, phase);
                        this.Update_ViewModel_PflowIconColorOpacity(obj.PflowIconColorOpacity, phase);
                        this.Update_ViewModel_PaleoflowAddIconColor(obj.PaleoflowAddIconColor, phase);
                        this.Update_ViewModel_PflowAddIconOpacity(obj.PflowAddIconOpacity, phase);
                        this.Update_ViewModel_PflowIconOpacity(obj.PflowIconOpacity, phase);
                        this.Update_ViewModel_ReportDetailedPflow(obj.ReportDetailedPflow, phase);
                        this.Update_ViewModel_ReportPflowIndex(obj.ReportPflowIndex, phase);
                        this.Update_ViewModel_FossilHeaderExpansion(obj.FossilHeaderExpansion, phase);
                        this.Update_ViewModel_FossilColor(obj.FossilColor, phase);
                        this.Update_ViewModel_FossilIconColorOpacity(obj.FossilIconColorOpacity, phase);
                        this.Update_ViewModel_FossilAddIconColor(obj.FossilAddIconColor, phase);
                        this.Update_ViewModel_FossilAddIconOpacity(obj.FossilAddIconOpacity, phase);
                        this.Update_ViewModel_FossilIconOpacity(obj.FossilIconOpacity, phase);
                        this.Update_ViewModel_ReportFossilIndex(obj.ReportFossilIndex, phase);
                        this.Update_ViewModel_ReportDetailedFossil(obj.ReportDetailedFossil, phase);
                        this.Update_ViewModel_StructureHeaderExpansion(obj.StructureHeaderExpansion, phase);
                        this.Update_ViewModel_StructColor(obj.StructColor, phase);
                        this.Update_ViewModel_StructureIconColorOpacity(obj.StructureIconColorOpacity, phase);
                        this.Update_ViewModel_StructAddIconColor(obj.StructAddIconColor, phase);
                        this.Update_ViewModel_StructureAddIconOpacity(obj.StructureAddIconOpacity, phase);
                        this.Update_ViewModel_StructureIconOpacity(obj.StructureIconOpacity, phase);
                        this.Update_ViewModel_ReportDetailedStructure(obj.ReportDetailedStructure, phase);
                        this.Update_ViewModel_ReportStructureIndex(obj.ReportStructureIndex, phase);
                        this.Update_ViewModel_SampleHeaderExpansion(obj.SampleHeaderExpansion, phase);
                        this.Update_ViewModel_SampleColor(obj.SampleColor, phase);
                        this.Update_ViewModel_SampleIconColorOpacity(obj.SampleIconColorOpacity, phase);
                        this.Update_ViewModel_SampleAddIconColor(obj.SampleAddIconColor, phase);
                        this.Update_ViewModel_SampleAddIconOpacity(obj.SampleAddIconOpacity, phase);
                        this.Update_ViewModel_SampleIconOpacity(obj.SampleIconOpacity, phase);
                        this.Update_ViewModel_ReportDetailedSample(obj.ReportDetailedSample, phase);
                        this.Update_ViewModel_ReportSampleIndex(obj.ReportSampleIndex, phase);
                        this.Update_ViewModel_EarthmatHeaderExpansion(obj.EarthmatHeaderExpansion, phase);
                        this.Update_ViewModel_EarthmatColor(obj.EarthmatColor, phase);
                        this.Update_ViewModel_EarthmatIconColorOpacity(obj.EarthmatIconColorOpacity, phase);
                        this.Update_ViewModel_EarthmatAddIconColor(obj.EarthmatAddIconColor, phase);
                        this.Update_ViewModel_EarthmatAddIconOpacity(obj.EarthmatAddIconOpacity, phase);
                        this.Update_ViewModel_EarthmatIconOpacity(obj.EarthmatIconOpacity, phase);
                        this.Update_ViewModel_ReportDetailedEarthmat(obj.ReportDetailedEarthmat, phase);
                        this.Update_ViewModel_ReportEarhtmatIndex(obj.ReportEarhtmatIndex, phase);
                        this.Update_ViewModel_StationHeaderExpansion(obj.StationHeaderExpansion, phase);
                        this.Update_ViewModel_StationColor(obj.StationColor, phase);
                        this.Update_ViewModel_ReportStationListIndex(obj.ReportStationListIndex, phase);
                        this.Update_ViewModel_ReportDetailedStation(obj.ReportDetailedStation, phase);
                        this.Update_ViewModel_ReportDateItems(obj.ReportDateItems, phase);
                        this.Update_ViewModel_ReportListViewDateIndex(obj.ReportListViewDateIndex, phase);
                    }
                }
            }
            private void Update_ViewModel_EarthmatPanelVisibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 569
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj74, obj);
                }
            }
            private void Update_ViewModel_SamplePanelVisibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 621
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj75, obj);
                }
            }
            private void Update_ViewModel_StructurePanelVisibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 678
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj76, obj);
                }
            }
            private void Update_ViewModel_FossilPanelVisibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 734
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj77, obj);
                }
            }
            private void Update_ViewModel_PFlowPanelVisibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 790
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj78, obj);
                }
            }
            private void Update_ViewModel_MineralPanelVisibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 846
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj79, obj);
                }
            }
            private void Update_ViewModel_MineralAltPanelVisibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 902
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj80, obj);
                }
            }
            private void Update_ViewModel_PhotoPanelVisibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 967
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj81, obj);
                }
            }
            private void Update_ViewModel_LocationHeaderExpansion(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 1026
                    XamlBindingSetters.Set_GSCFieldApp_Themes_ExpandPanel_IsExpanded(this.obj83, obj);
                }
            }
            private void Update_ViewModel_LocationColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 1030
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_SolidColorBrush_Color(this.obj84, (global::Windows.UI.Color)this.LookupConverter("SolidColorBrushConverter").Convert(obj, typeof(global::Windows.UI.Color), null, null));
                    // Views\FieldNotesPage.xaml line 1043
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(this.obj87, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    // Views\FieldNotesPage.xaml line 1039
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_SolidColorBrush_Color(this.obj88, (global::Windows.UI.Color)this.LookupConverter("SolidColorBrushConverter").Convert(obj, typeof(global::Windows.UI.Color), null, null));
                    // Views\FieldNotesPage.xaml line 1055
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj90, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    // Views\FieldNotesPage.xaml line 1056
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj91, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                }
            }
            private void Update_ViewModel_StationIconColorOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 1039
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_Brush_Opacity(this.obj88, obj);
                    // Views\FieldNotesPage.xaml line 528
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_Brush_Opacity(this.obj177, obj);
                }
            }
            private void Update_ViewModel_LocationAddIconColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 1054
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj89, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                }
            }
            private void Update_ViewModel_LocationAddIconOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 1054
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj89, obj);
                }
            }
            private void Update_ViewModel_StationIconOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 1055
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj90, obj);
                    // Views\FieldNotesPage.xaml line 542
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj178, obj);
                    // Views\FieldNotesPage.xaml line 545
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj179, obj);
                }
            }
            private void Update_ViewModel_DocumentIconOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 1056
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj91, obj);
                    // Views\FieldNotesPage.xaml line 999
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj100, obj);
                    // Views\FieldNotesPage.xaml line 1000
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj101, obj);
                }
            }
            private void Update_ViewModel_ReportDocumentIndex(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 1062
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj92, obj);
                    // Views\FieldNotesPage.xaml line 1006
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj102, obj);
                }
            }
            private void Update_ViewModel_ReportDetailedLocation(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_ReportDetailedLocation(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 1062
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj92, obj, null);
                }
            }
            private void Update_ViewModel_DocumentHeaderExpand(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 971
                    XamlBindingSetters.Set_GSCFieldApp_Themes_ExpandPanel_IsExpanded(this.obj93, obj);
                }
            }
            private void Update_ViewModel_DocumentColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 978
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_SolidColorBrush_Color(this.obj94, (global::Windows.UI.Color)this.LookupConverter("SolidColorBrushConverter").Convert(obj, typeof(global::Windows.UI.Color), null, null));
                    // Views\FieldNotesPage.xaml line 987
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(this.obj97, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    // Views\FieldNotesPage.xaml line 984
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_SolidColorBrush_Color(this.obj98, (global::Windows.UI.Color)this.LookupConverter("SolidColorBrushConverter").Convert(obj, typeof(global::Windows.UI.Color), null, null));
                    // Views\FieldNotesPage.xaml line 999
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj100, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    // Views\FieldNotesPage.xaml line 1000
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj101, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                }
            }
            private void Update_ViewModel_HeaderDocument(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 987
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj97, obj, null);
                }
            }
            private void Update_ViewModel_DocumentIconColorOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 984
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_Brush_Opacity(this.obj98, obj);
                }
            }
            private void Update_ViewModel_DocumentAddIconColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 998
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj99, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                }
            }
            private void Update_ViewModel_DocumentAddIconOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 998
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj99, obj);
                }
            }
            private void Update_ViewModel_ReportDetailedDocument(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_ReportDetailedDocument(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 1006
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj102, obj, null);
                }
            }
            private void Update_ViewModel_MineralAltHeaderExpansion(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 906
                    XamlBindingSetters.Set_GSCFieldApp_Themes_ExpandPanel_IsExpanded(this.obj103, obj);
                }
            }
            private void Update_ViewModel_MineralAltColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 913
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_SolidColorBrush_Color(this.obj104, (global::Windows.UI.Color)this.LookupConverter("SolidColorBrushConverter").Convert(obj, typeof(global::Windows.UI.Color), null, null));
                    // Views\FieldNotesPage.xaml line 923
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(this.obj107, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    // Views\FieldNotesPage.xaml line 919
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_SolidColorBrush_Color(this.obj108, (global::Windows.UI.Color)this.LookupConverter("SolidColorBrushConverter").Convert(obj, typeof(global::Windows.UI.Color), null, null));
                    // Views\FieldNotesPage.xaml line 938
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj110, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    // Views\FieldNotesPage.xaml line 942
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj111, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                }
            }
            private void Update_ViewModel_MineralAltIconColorOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 919
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_Brush_Opacity(this.obj108, obj);
                }
            }
            private void Update_ViewModel_MineralAltAddIconColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 935
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj109, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                }
            }
            private void Update_ViewModel_MineralAltAddIconOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 935
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj109, obj);
                }
            }
            private void Update_ViewModel_MineralAltIconOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 938
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj110, obj);
                    // Views\FieldNotesPage.xaml line 942
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj111, obj);
                }
            }
            private void Update_ViewModel_ReportMineralizationAlterationIndex(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 951
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj112, obj);
                }
            }
            private void Update_ViewModel_ReportDetailedMineralAlt(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_ReportDetailedMineralAlt(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 951
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj112, obj, null);
                }
            }
            private void Update_ViewModel_MineralHeaderExpansion(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 850
                    XamlBindingSetters.Set_GSCFieldApp_Themes_ExpandPanel_IsExpanded(this.obj113, obj);
                }
            }
            private void Update_ViewModel_MineralColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 857
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_SolidColorBrush_Color(this.obj114, (global::Windows.UI.Color)this.LookupConverter("SolidColorBrushConverter").Convert(obj, typeof(global::Windows.UI.Color), null, null));
                    // Views\FieldNotesPage.xaml line 866
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(this.obj117, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    // Views\FieldNotesPage.xaml line 863
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_SolidColorBrush_Color(this.obj118, (global::Windows.UI.Color)this.LookupConverter("SolidColorBrushConverter").Convert(obj, typeof(global::Windows.UI.Color), null, null));
                    // Views\FieldNotesPage.xaml line 879
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj120, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    // Views\FieldNotesPage.xaml line 880
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj121, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                }
            }
            private void Update_ViewModel_MineralIconColorOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 863
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_Brush_Opacity(this.obj118, obj);
                }
            }
            private void Update_ViewModel_MineralAddIconColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 878
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj119, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                }
            }
            private void Update_ViewModel_MineralAddIconOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 878
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj119, obj);
                }
            }
            private void Update_ViewModel_MineralIconOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 879
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj120, obj);
                    // Views\FieldNotesPage.xaml line 880
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj121, obj);
                }
            }
            private void Update_ViewModel_ReportMineralsIndex(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 886
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj122, obj);
                }
            }
            private void Update_ViewModel_ReportDetailedMineral(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_ReportDetailedMineral(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 886
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj122, obj, null);
                }
            }
            private void Update_ViewModel_PflowHeaderExpansion(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 794
                    XamlBindingSetters.Set_GSCFieldApp_Themes_ExpandPanel_IsExpanded(this.obj123, obj);
                }
            }
            private void Update_ViewModel_PaleoflowColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 801
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_SolidColorBrush_Color(this.obj124, (global::Windows.UI.Color)this.LookupConverter("SolidColorBrushConverter").Convert(obj, typeof(global::Windows.UI.Color), null, null));
                    // Views\FieldNotesPage.xaml line 810
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(this.obj127, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    // Views\FieldNotesPage.xaml line 807
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_SolidColorBrush_Color(this.obj128, (global::Windows.UI.Color)this.LookupConverter("SolidColorBrushConverter").Convert(obj, typeof(global::Windows.UI.Color), null, null));
                    // Views\FieldNotesPage.xaml line 823
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj130, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    // Views\FieldNotesPage.xaml line 824
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj131, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                }
            }
            private void Update_ViewModel_PflowIconColorOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 807
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_Brush_Opacity(this.obj128, obj);
                }
            }
            private void Update_ViewModel_PaleoflowAddIconColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 822
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj129, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                }
            }
            private void Update_ViewModel_PflowAddIconOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 822
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj129, obj);
                }
            }
            private void Update_ViewModel_PflowIconOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 823
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj130, obj);
                    // Views\FieldNotesPage.xaml line 824
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj131, obj);
                }
            }
            private void Update_ViewModel_ReportDetailedPflow(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_ReportDetailedPflow(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 830
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj132, obj, null);
                }
            }
            private void Update_ViewModel_ReportPflowIndex(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 830
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj132, obj);
                }
            }
            private void Update_ViewModel_FossilHeaderExpansion(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 738
                    XamlBindingSetters.Set_GSCFieldApp_Themes_ExpandPanel_IsExpanded(this.obj133, obj);
                }
            }
            private void Update_ViewModel_FossilColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 745
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_SolidColorBrush_Color(this.obj134, (global::Windows.UI.Color)this.LookupConverter("SolidColorBrushConverter").Convert(obj, typeof(global::Windows.UI.Color), null, null));
                    // Views\FieldNotesPage.xaml line 754
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(this.obj137, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    // Views\FieldNotesPage.xaml line 751
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_SolidColorBrush_Color(this.obj138, (global::Windows.UI.Color)this.LookupConverter("SolidColorBrushConverter").Convert(obj, typeof(global::Windows.UI.Color), null, null));
                    // Views\FieldNotesPage.xaml line 767
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj140, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    // Views\FieldNotesPage.xaml line 768
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj141, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                }
            }
            private void Update_ViewModel_FossilIconColorOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 751
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_Brush_Opacity(this.obj138, obj);
                }
            }
            private void Update_ViewModel_FossilAddIconColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 766
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj139, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                }
            }
            private void Update_ViewModel_FossilAddIconOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 766
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj139, obj);
                }
            }
            private void Update_ViewModel_FossilIconOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 767
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj140, obj);
                    // Views\FieldNotesPage.xaml line 768
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj141, obj);
                }
            }
            private void Update_ViewModel_ReportFossilIndex(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 774
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj142, obj);
                }
            }
            private void Update_ViewModel_ReportDetailedFossil(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_ReportDetailedFossil(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 774
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj142, obj, null);
                }
            }
            private void Update_ViewModel_StructureHeaderExpansion(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 682
                    XamlBindingSetters.Set_GSCFieldApp_Themes_ExpandPanel_IsExpanded(this.obj143, obj);
                }
            }
            private void Update_ViewModel_StructColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 689
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_SolidColorBrush_Color(this.obj144, (global::Windows.UI.Color)this.LookupConverter("SolidColorBrushConverter").Convert(obj, typeof(global::Windows.UI.Color), null, null));
                    // Views\FieldNotesPage.xaml line 698
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(this.obj147, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    // Views\FieldNotesPage.xaml line 695
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_SolidColorBrush_Color(this.obj148, (global::Windows.UI.Color)this.LookupConverter("SolidColorBrushConverter").Convert(obj, typeof(global::Windows.UI.Color), null, null));
                    // Views\FieldNotesPage.xaml line 711
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj150, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    // Views\FieldNotesPage.xaml line 712
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj151, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                }
            }
            private void Update_ViewModel_StructureIconColorOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 695
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_Brush_Opacity(this.obj148, obj);
                }
            }
            private void Update_ViewModel_StructAddIconColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 710
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj149, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                }
            }
            private void Update_ViewModel_StructureAddIconOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 710
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj149, obj);
                }
            }
            private void Update_ViewModel_StructureIconOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 711
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj150, obj);
                    // Views\FieldNotesPage.xaml line 712
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj151, obj);
                }
            }
            private void Update_ViewModel_ReportDetailedStructure(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_ReportDetailedStructure(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 718
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj152, obj, null);
                }
            }
            private void Update_ViewModel_ReportStructureIndex(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 718
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj152, obj);
                }
            }
            private void Update_ViewModel_SampleHeaderExpansion(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 625
                    XamlBindingSetters.Set_GSCFieldApp_Themes_ExpandPanel_IsExpanded(this.obj153, obj);
                }
            }
            private void Update_ViewModel_SampleColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 632
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_SolidColorBrush_Color(this.obj154, (global::Windows.UI.Color)this.LookupConverter("SolidColorBrushConverter").Convert(obj, typeof(global::Windows.UI.Color), null, null));
                    // Views\FieldNotesPage.xaml line 641
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(this.obj157, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    // Views\FieldNotesPage.xaml line 638
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_SolidColorBrush_Color(this.obj158, (global::Windows.UI.Color)this.LookupConverter("SolidColorBrushConverter").Convert(obj, typeof(global::Windows.UI.Color), null, null));
                    // Views\FieldNotesPage.xaml line 654
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj160, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    // Views\FieldNotesPage.xaml line 655
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj161, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                }
            }
            private void Update_ViewModel_SampleIconColorOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 638
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_Brush_Opacity(this.obj158, obj);
                }
            }
            private void Update_ViewModel_SampleAddIconColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 653
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj159, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                }
            }
            private void Update_ViewModel_SampleAddIconOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 653
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj159, obj);
                }
            }
            private void Update_ViewModel_SampleIconOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 654
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj160, obj);
                    // Views\FieldNotesPage.xaml line 655
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj161, obj);
                }
            }
            private void Update_ViewModel_ReportDetailedSample(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_ReportDetailedSample(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 661
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj162, obj, null);
                }
            }
            private void Update_ViewModel_ReportSampleIndex(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 661
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj162, obj);
                }
            }
            private void Update_ViewModel_EarthmatHeaderExpansion(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 572
                    XamlBindingSetters.Set_GSCFieldApp_Themes_ExpandPanel_IsExpanded(this.obj163, obj);
                }
            }
            private void Update_ViewModel_EarthmatColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 578
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_SolidColorBrush_Color(this.obj164, (global::Windows.UI.Color)this.LookupConverter("SolidColorBrushConverter").Convert(obj, typeof(global::Windows.UI.Color), null, null));
                    // Views\FieldNotesPage.xaml line 589
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(this.obj167, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    // Views\FieldNotesPage.xaml line 586
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_SolidColorBrush_Color(this.obj168, (global::Windows.UI.Color)this.LookupConverter("SolidColorBrushConverter").Convert(obj, typeof(global::Windows.UI.Color), null, null));
                    // Views\FieldNotesPage.xaml line 601
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj170, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    // Views\FieldNotesPage.xaml line 602
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj171, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                }
            }
            private void Update_ViewModel_EarthmatIconColorOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 586
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_Brush_Opacity(this.obj168, obj);
                }
            }
            private void Update_ViewModel_EarthmatAddIconColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 600
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj169, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                }
            }
            private void Update_ViewModel_EarthmatAddIconOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 600
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj169, obj);
                }
            }
            private void Update_ViewModel_EarthmatIconOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 601
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj170, obj);
                    // Views\FieldNotesPage.xaml line 602
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Opacity(this.obj171, obj);
                }
            }
            private void Update_ViewModel_ReportDetailedEarthmat(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_ReportDetailedEarthmat(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 607
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj172, obj, null);
                }
            }
            private void Update_ViewModel_ReportEarhtmatIndex(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 607
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj172, obj);
                }
            }
            private void Update_ViewModel_StationHeaderExpansion(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 520
                    XamlBindingSetters.Set_GSCFieldApp_Themes_ExpandPanel_IsExpanded(this.obj173, obj);
                }
            }
            private void Update_ViewModel_StationColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 522
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_SolidColorBrush_Color(this.obj174, (global::Windows.UI.Color)this.LookupConverter("SolidColorBrushConverter").Convert(obj, typeof(global::Windows.UI.Color), null, null));
                    // Views\FieldNotesPage.xaml line 532
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(this.obj176, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    // Views\FieldNotesPage.xaml line 528
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_SolidColorBrush_Color(this.obj177, (global::Windows.UI.Color)this.LookupConverter("SolidColorBrushConverter").Convert(obj, typeof(global::Windows.UI.Color), null, null));
                    // Views\FieldNotesPage.xaml line 542
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj178, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    // Views\FieldNotesPage.xaml line 545
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_IconElement_Foreground(this.obj179, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("MediaBrushConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                }
            }
            private void Update_ViewModel_ReportStationListIndex(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 553
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj180, obj);
                }
            }
            private void Update_ViewModel_ReportDetailedStation(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_ReportDetailedStation(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 553
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj180, obj, null);
                }
            }
            private void Update_ViewModel_ReportDateItems(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_ReportDateItems(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 472
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj182, obj, null);
                }
            }
            private void Update_ViewModel_ReportListViewDateIndex(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\FieldNotesPage.xaml line 472
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj182, obj);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class ReportPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<ReportPage_obj1_Bindings> weakRefToBindingObj; 

                public ReportPage_obj1_BindingsTracking(ReportPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<ReportPage_obj1_Bindings>(obj);
                }

                public ReportPage_obj1_Bindings TryGetBindingObject()
                {
                    ReportPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_ViewModel_ReportDetailedLocation(null);
                    UpdateChildListeners_ViewModel_ReportDetailedDocument(null);
                    UpdateChildListeners_ViewModel_ReportDetailedMineralAlt(null);
                    UpdateChildListeners_ViewModel_ReportDetailedMineral(null);
                    UpdateChildListeners_ViewModel_ReportDetailedPflow(null);
                    UpdateChildListeners_ViewModel_ReportDetailedFossil(null);
                    UpdateChildListeners_ViewModel_ReportDetailedStructure(null);
                    UpdateChildListeners_ViewModel_ReportDetailedSample(null);
                    UpdateChildListeners_ViewModel_ReportDetailedEarthmat(null);
                    UpdateChildListeners_ViewModel_ReportDetailedStation(null);
                    UpdateChildListeners_ViewModel_ReportDateItems(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ReportPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::GSCFieldApp.ViewModels.FieldNotesViewModel obj = sender as global::GSCFieldApp.ViewModels.FieldNotesViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_EarthmatPanelVisibility(obj.EarthmatPanelVisibility, DATA_CHANGED);
                                bindings.Update_ViewModel_SamplePanelVisibility(obj.SamplePanelVisibility, DATA_CHANGED);
                                bindings.Update_ViewModel_StructurePanelVisibility(obj.StructurePanelVisibility, DATA_CHANGED);
                                bindings.Update_ViewModel_FossilPanelVisibility(obj.FossilPanelVisibility, DATA_CHANGED);
                                bindings.Update_ViewModel_PFlowPanelVisibility(obj.PFlowPanelVisibility, DATA_CHANGED);
                                bindings.Update_ViewModel_MineralPanelVisibility(obj.MineralPanelVisibility, DATA_CHANGED);
                                bindings.Update_ViewModel_MineralAltPanelVisibility(obj.MineralAltPanelVisibility, DATA_CHANGED);
                                bindings.Update_ViewModel_PhotoPanelVisibility(obj.PhotoPanelVisibility, DATA_CHANGED);
                                bindings.Update_ViewModel_LocationHeaderExpansion(obj.LocationHeaderExpansion, DATA_CHANGED);
                                bindings.Update_ViewModel_LocationColor(obj.LocationColor, DATA_CHANGED);
                                bindings.Update_ViewModel_StationIconColorOpacity(obj.StationIconColorOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_LocationAddIconColor(obj.LocationAddIconColor, DATA_CHANGED);
                                bindings.Update_ViewModel_LocationAddIconOpacity(obj.LocationAddIconOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_StationIconOpacity(obj.StationIconOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_DocumentIconOpacity(obj.DocumentIconOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_ReportDocumentIndex(obj.ReportDocumentIndex, DATA_CHANGED);
                                bindings.Update_ViewModel_ReportDetailedLocation(obj.ReportDetailedLocation, DATA_CHANGED);
                                bindings.Update_ViewModel_DocumentHeaderExpand(obj.DocumentHeaderExpand, DATA_CHANGED);
                                bindings.Update_ViewModel_DocumentColor(obj.DocumentColor, DATA_CHANGED);
                                bindings.Update_ViewModel_HeaderDocument(obj.HeaderDocument, DATA_CHANGED);
                                bindings.Update_ViewModel_DocumentIconColorOpacity(obj.DocumentIconColorOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_DocumentAddIconColor(obj.DocumentAddIconColor, DATA_CHANGED);
                                bindings.Update_ViewModel_DocumentAddIconOpacity(obj.DocumentAddIconOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_ReportDetailedDocument(obj.ReportDetailedDocument, DATA_CHANGED);
                                bindings.Update_ViewModel_MineralAltHeaderExpansion(obj.MineralAltHeaderExpansion, DATA_CHANGED);
                                bindings.Update_ViewModel_MineralAltColor(obj.MineralAltColor, DATA_CHANGED);
                                bindings.Update_ViewModel_MineralAltIconColorOpacity(obj.MineralAltIconColorOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_MineralAltAddIconColor(obj.MineralAltAddIconColor, DATA_CHANGED);
                                bindings.Update_ViewModel_MineralAltAddIconOpacity(obj.MineralAltAddIconOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_MineralAltIconOpacity(obj.MineralAltIconOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_ReportMineralizationAlterationIndex(obj.ReportMineralizationAlterationIndex, DATA_CHANGED);
                                bindings.Update_ViewModel_ReportDetailedMineralAlt(obj.ReportDetailedMineralAlt, DATA_CHANGED);
                                bindings.Update_ViewModel_MineralHeaderExpansion(obj.MineralHeaderExpansion, DATA_CHANGED);
                                bindings.Update_ViewModel_MineralColor(obj.MineralColor, DATA_CHANGED);
                                bindings.Update_ViewModel_MineralIconColorOpacity(obj.MineralIconColorOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_MineralAddIconColor(obj.MineralAddIconColor, DATA_CHANGED);
                                bindings.Update_ViewModel_MineralAddIconOpacity(obj.MineralAddIconOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_MineralIconOpacity(obj.MineralIconOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_ReportMineralsIndex(obj.ReportMineralsIndex, DATA_CHANGED);
                                bindings.Update_ViewModel_ReportDetailedMineral(obj.ReportDetailedMineral, DATA_CHANGED);
                                bindings.Update_ViewModel_PflowHeaderExpansion(obj.PflowHeaderExpansion, DATA_CHANGED);
                                bindings.Update_ViewModel_PaleoflowColor(obj.PaleoflowColor, DATA_CHANGED);
                                bindings.Update_ViewModel_PflowIconColorOpacity(obj.PflowIconColorOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_PaleoflowAddIconColor(obj.PaleoflowAddIconColor, DATA_CHANGED);
                                bindings.Update_ViewModel_PflowAddIconOpacity(obj.PflowAddIconOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_PflowIconOpacity(obj.PflowIconOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_ReportDetailedPflow(obj.ReportDetailedPflow, DATA_CHANGED);
                                bindings.Update_ViewModel_ReportPflowIndex(obj.ReportPflowIndex, DATA_CHANGED);
                                bindings.Update_ViewModel_FossilHeaderExpansion(obj.FossilHeaderExpansion, DATA_CHANGED);
                                bindings.Update_ViewModel_FossilColor(obj.FossilColor, DATA_CHANGED);
                                bindings.Update_ViewModel_FossilIconColorOpacity(obj.FossilIconColorOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_FossilAddIconColor(obj.FossilAddIconColor, DATA_CHANGED);
                                bindings.Update_ViewModel_FossilAddIconOpacity(obj.FossilAddIconOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_FossilIconOpacity(obj.FossilIconOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_ReportFossilIndex(obj.ReportFossilIndex, DATA_CHANGED);
                                bindings.Update_ViewModel_ReportDetailedFossil(obj.ReportDetailedFossil, DATA_CHANGED);
                                bindings.Update_ViewModel_StructureHeaderExpansion(obj.StructureHeaderExpansion, DATA_CHANGED);
                                bindings.Update_ViewModel_StructColor(obj.StructColor, DATA_CHANGED);
                                bindings.Update_ViewModel_StructureIconColorOpacity(obj.StructureIconColorOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_StructAddIconColor(obj.StructAddIconColor, DATA_CHANGED);
                                bindings.Update_ViewModel_StructureAddIconOpacity(obj.StructureAddIconOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_StructureIconOpacity(obj.StructureIconOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_ReportDetailedStructure(obj.ReportDetailedStructure, DATA_CHANGED);
                                bindings.Update_ViewModel_ReportStructureIndex(obj.ReportStructureIndex, DATA_CHANGED);
                                bindings.Update_ViewModel_SampleHeaderExpansion(obj.SampleHeaderExpansion, DATA_CHANGED);
                                bindings.Update_ViewModel_SampleColor(obj.SampleColor, DATA_CHANGED);
                                bindings.Update_ViewModel_SampleIconColorOpacity(obj.SampleIconColorOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_SampleAddIconColor(obj.SampleAddIconColor, DATA_CHANGED);
                                bindings.Update_ViewModel_SampleAddIconOpacity(obj.SampleAddIconOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_SampleIconOpacity(obj.SampleIconOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_ReportDetailedSample(obj.ReportDetailedSample, DATA_CHANGED);
                                bindings.Update_ViewModel_ReportSampleIndex(obj.ReportSampleIndex, DATA_CHANGED);
                                bindings.Update_ViewModel_EarthmatHeaderExpansion(obj.EarthmatHeaderExpansion, DATA_CHANGED);
                                bindings.Update_ViewModel_EarthmatColor(obj.EarthmatColor, DATA_CHANGED);
                                bindings.Update_ViewModel_EarthmatIconColorOpacity(obj.EarthmatIconColorOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_EarthmatAddIconColor(obj.EarthmatAddIconColor, DATA_CHANGED);
                                bindings.Update_ViewModel_EarthmatAddIconOpacity(obj.EarthmatAddIconOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_EarthmatIconOpacity(obj.EarthmatIconOpacity, DATA_CHANGED);
                                bindings.Update_ViewModel_ReportDetailedEarthmat(obj.ReportDetailedEarthmat, DATA_CHANGED);
                                bindings.Update_ViewModel_ReportEarhtmatIndex(obj.ReportEarhtmatIndex, DATA_CHANGED);
                                bindings.Update_ViewModel_StationHeaderExpansion(obj.StationHeaderExpansion, DATA_CHANGED);
                                bindings.Update_ViewModel_StationColor(obj.StationColor, DATA_CHANGED);
                                bindings.Update_ViewModel_ReportStationListIndex(obj.ReportStationListIndex, DATA_CHANGED);
                                bindings.Update_ViewModel_ReportDetailedStation(obj.ReportDetailedStation, DATA_CHANGED);
                                bindings.Update_ViewModel_ReportDateItems(obj.ReportDateItems, DATA_CHANGED);
                                bindings.Update_ViewModel_ReportListViewDateIndex(obj.ReportListViewDateIndex, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "EarthmatPanelVisibility":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_EarthmatPanelVisibility(obj.EarthmatPanelVisibility, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SamplePanelVisibility":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SamplePanelVisibility(obj.SamplePanelVisibility, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "StructurePanelVisibility":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_StructurePanelVisibility(obj.StructurePanelVisibility, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FossilPanelVisibility":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_FossilPanelVisibility(obj.FossilPanelVisibility, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PFlowPanelVisibility":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_PFlowPanelVisibility(obj.PFlowPanelVisibility, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MineralPanelVisibility":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_MineralPanelVisibility(obj.MineralPanelVisibility, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MineralAltPanelVisibility":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_MineralAltPanelVisibility(obj.MineralAltPanelVisibility, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PhotoPanelVisibility":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_PhotoPanelVisibility(obj.PhotoPanelVisibility, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "LocationHeaderExpansion":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_LocationHeaderExpansion(obj.LocationHeaderExpansion, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "LocationColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_LocationColor(obj.LocationColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "StationIconColorOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_StationIconColorOpacity(obj.StationIconColorOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "LocationAddIconColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_LocationAddIconColor(obj.LocationAddIconColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "LocationAddIconOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_LocationAddIconOpacity(obj.LocationAddIconOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "StationIconOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_StationIconOpacity(obj.StationIconOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "DocumentIconOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_DocumentIconOpacity(obj.DocumentIconOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ReportDocumentIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ReportDocumentIndex(obj.ReportDocumentIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ReportDetailedLocation":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ReportDetailedLocation(obj.ReportDetailedLocation, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "DocumentHeaderExpand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_DocumentHeaderExpand(obj.DocumentHeaderExpand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "DocumentColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_DocumentColor(obj.DocumentColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "HeaderDocument":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_HeaderDocument(obj.HeaderDocument, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "DocumentIconColorOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_DocumentIconColorOpacity(obj.DocumentIconColorOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "DocumentAddIconColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_DocumentAddIconColor(obj.DocumentAddIconColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "DocumentAddIconOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_DocumentAddIconOpacity(obj.DocumentAddIconOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ReportDetailedDocument":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ReportDetailedDocument(obj.ReportDetailedDocument, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MineralAltHeaderExpansion":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_MineralAltHeaderExpansion(obj.MineralAltHeaderExpansion, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MineralAltColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_MineralAltColor(obj.MineralAltColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MineralAltIconColorOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_MineralAltIconColorOpacity(obj.MineralAltIconColorOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MineralAltAddIconColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_MineralAltAddIconColor(obj.MineralAltAddIconColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MineralAltAddIconOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_MineralAltAddIconOpacity(obj.MineralAltAddIconOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MineralAltIconOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_MineralAltIconOpacity(obj.MineralAltIconOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ReportMineralizationAlterationIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ReportMineralizationAlterationIndex(obj.ReportMineralizationAlterationIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ReportDetailedMineralAlt":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ReportDetailedMineralAlt(obj.ReportDetailedMineralAlt, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MineralHeaderExpansion":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_MineralHeaderExpansion(obj.MineralHeaderExpansion, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MineralColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_MineralColor(obj.MineralColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MineralIconColorOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_MineralIconColorOpacity(obj.MineralIconColorOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MineralAddIconColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_MineralAddIconColor(obj.MineralAddIconColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MineralAddIconOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_MineralAddIconOpacity(obj.MineralAddIconOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MineralIconOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_MineralIconOpacity(obj.MineralIconOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ReportMineralsIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ReportMineralsIndex(obj.ReportMineralsIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ReportDetailedMineral":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ReportDetailedMineral(obj.ReportDetailedMineral, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PflowHeaderExpansion":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_PflowHeaderExpansion(obj.PflowHeaderExpansion, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PaleoflowColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_PaleoflowColor(obj.PaleoflowColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PflowIconColorOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_PflowIconColorOpacity(obj.PflowIconColorOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PaleoflowAddIconColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_PaleoflowAddIconColor(obj.PaleoflowAddIconColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PflowAddIconOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_PflowAddIconOpacity(obj.PflowAddIconOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PflowIconOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_PflowIconOpacity(obj.PflowIconOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ReportDetailedPflow":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ReportDetailedPflow(obj.ReportDetailedPflow, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ReportPflowIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ReportPflowIndex(obj.ReportPflowIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FossilHeaderExpansion":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_FossilHeaderExpansion(obj.FossilHeaderExpansion, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FossilColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_FossilColor(obj.FossilColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FossilIconColorOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_FossilIconColorOpacity(obj.FossilIconColorOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FossilAddIconColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_FossilAddIconColor(obj.FossilAddIconColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FossilAddIconOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_FossilAddIconOpacity(obj.FossilAddIconOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FossilIconOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_FossilIconOpacity(obj.FossilIconOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ReportFossilIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ReportFossilIndex(obj.ReportFossilIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ReportDetailedFossil":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ReportDetailedFossil(obj.ReportDetailedFossil, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "StructureHeaderExpansion":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_StructureHeaderExpansion(obj.StructureHeaderExpansion, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "StructColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_StructColor(obj.StructColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "StructureIconColorOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_StructureIconColorOpacity(obj.StructureIconColorOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "StructAddIconColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_StructAddIconColor(obj.StructAddIconColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "StructureAddIconOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_StructureAddIconOpacity(obj.StructureAddIconOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "StructureIconOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_StructureIconOpacity(obj.StructureIconOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ReportDetailedStructure":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ReportDetailedStructure(obj.ReportDetailedStructure, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ReportStructureIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ReportStructureIndex(obj.ReportStructureIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SampleHeaderExpansion":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SampleHeaderExpansion(obj.SampleHeaderExpansion, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SampleColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SampleColor(obj.SampleColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SampleIconColorOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SampleIconColorOpacity(obj.SampleIconColorOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SampleAddIconColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SampleAddIconColor(obj.SampleAddIconColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SampleAddIconOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SampleAddIconOpacity(obj.SampleAddIconOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SampleIconOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SampleIconOpacity(obj.SampleIconOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ReportDetailedSample":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ReportDetailedSample(obj.ReportDetailedSample, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ReportSampleIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ReportSampleIndex(obj.ReportSampleIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EarthmatHeaderExpansion":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_EarthmatHeaderExpansion(obj.EarthmatHeaderExpansion, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EarthmatColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_EarthmatColor(obj.EarthmatColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EarthmatIconColorOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_EarthmatIconColorOpacity(obj.EarthmatIconColorOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EarthmatAddIconColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_EarthmatAddIconColor(obj.EarthmatAddIconColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EarthmatAddIconOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_EarthmatAddIconOpacity(obj.EarthmatAddIconOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EarthmatIconOpacity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_EarthmatIconOpacity(obj.EarthmatIconOpacity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ReportDetailedEarthmat":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ReportDetailedEarthmat(obj.ReportDetailedEarthmat, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ReportEarhtmatIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ReportEarhtmatIndex(obj.ReportEarhtmatIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "StationHeaderExpansion":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_StationHeaderExpansion(obj.StationHeaderExpansion, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "StationColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_StationColor(obj.StationColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ReportStationListIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ReportStationListIndex(obj.ReportStationListIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ReportDetailedStation":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ReportDetailedStation(obj.ReportDetailedStation, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ReportDateItems":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ReportDateItems(obj.ReportDateItems, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ReportListViewDateIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ReportListViewDateIndex(obj.ReportListViewDateIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::GSCFieldApp.ViewModels.FieldNotesViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::GSCFieldApp.ViewModels.FieldNotesViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_ReportDetailedLocation(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ReportPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_ReportDetailedLocation(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    ReportPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> cache_ViewModel_ReportDetailedLocation = null;
                public void UpdateChildListeners_ViewModel_ReportDetailedLocation(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj)
                {
                    if (obj != cache_ViewModel_ReportDetailedLocation)
                    {
                        if (cache_ViewModel_ReportDetailedLocation != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_ReportDetailedLocation).PropertyChanged -= PropertyChanged_ViewModel_ReportDetailedLocation;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_ReportDetailedLocation).CollectionChanged -= CollectionChanged_ViewModel_ReportDetailedLocation;
                            cache_ViewModel_ReportDetailedLocation = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_ReportDetailedLocation = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_ReportDetailedLocation;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_ReportDetailedLocation;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_ReportDetailedDocument(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ReportPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_ReportDetailedDocument(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    ReportPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> cache_ViewModel_ReportDetailedDocument = null;
                public void UpdateChildListeners_ViewModel_ReportDetailedDocument(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj)
                {
                    if (obj != cache_ViewModel_ReportDetailedDocument)
                    {
                        if (cache_ViewModel_ReportDetailedDocument != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_ReportDetailedDocument).PropertyChanged -= PropertyChanged_ViewModel_ReportDetailedDocument;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_ReportDetailedDocument).CollectionChanged -= CollectionChanged_ViewModel_ReportDetailedDocument;
                            cache_ViewModel_ReportDetailedDocument = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_ReportDetailedDocument = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_ReportDetailedDocument;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_ReportDetailedDocument;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_ReportDetailedMineralAlt(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ReportPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_ReportDetailedMineralAlt(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    ReportPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> cache_ViewModel_ReportDetailedMineralAlt = null;
                public void UpdateChildListeners_ViewModel_ReportDetailedMineralAlt(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj)
                {
                    if (obj != cache_ViewModel_ReportDetailedMineralAlt)
                    {
                        if (cache_ViewModel_ReportDetailedMineralAlt != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_ReportDetailedMineralAlt).PropertyChanged -= PropertyChanged_ViewModel_ReportDetailedMineralAlt;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_ReportDetailedMineralAlt).CollectionChanged -= CollectionChanged_ViewModel_ReportDetailedMineralAlt;
                            cache_ViewModel_ReportDetailedMineralAlt = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_ReportDetailedMineralAlt = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_ReportDetailedMineralAlt;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_ReportDetailedMineralAlt;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_ReportDetailedMineral(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ReportPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_ReportDetailedMineral(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    ReportPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> cache_ViewModel_ReportDetailedMineral = null;
                public void UpdateChildListeners_ViewModel_ReportDetailedMineral(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj)
                {
                    if (obj != cache_ViewModel_ReportDetailedMineral)
                    {
                        if (cache_ViewModel_ReportDetailedMineral != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_ReportDetailedMineral).PropertyChanged -= PropertyChanged_ViewModel_ReportDetailedMineral;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_ReportDetailedMineral).CollectionChanged -= CollectionChanged_ViewModel_ReportDetailedMineral;
                            cache_ViewModel_ReportDetailedMineral = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_ReportDetailedMineral = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_ReportDetailedMineral;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_ReportDetailedMineral;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_ReportDetailedPflow(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ReportPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_ReportDetailedPflow(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    ReportPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> cache_ViewModel_ReportDetailedPflow = null;
                public void UpdateChildListeners_ViewModel_ReportDetailedPflow(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj)
                {
                    if (obj != cache_ViewModel_ReportDetailedPflow)
                    {
                        if (cache_ViewModel_ReportDetailedPflow != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_ReportDetailedPflow).PropertyChanged -= PropertyChanged_ViewModel_ReportDetailedPflow;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_ReportDetailedPflow).CollectionChanged -= CollectionChanged_ViewModel_ReportDetailedPflow;
                            cache_ViewModel_ReportDetailedPflow = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_ReportDetailedPflow = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_ReportDetailedPflow;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_ReportDetailedPflow;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_ReportDetailedFossil(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ReportPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_ReportDetailedFossil(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    ReportPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> cache_ViewModel_ReportDetailedFossil = null;
                public void UpdateChildListeners_ViewModel_ReportDetailedFossil(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj)
                {
                    if (obj != cache_ViewModel_ReportDetailedFossil)
                    {
                        if (cache_ViewModel_ReportDetailedFossil != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_ReportDetailedFossil).PropertyChanged -= PropertyChanged_ViewModel_ReportDetailedFossil;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_ReportDetailedFossil).CollectionChanged -= CollectionChanged_ViewModel_ReportDetailedFossil;
                            cache_ViewModel_ReportDetailedFossil = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_ReportDetailedFossil = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_ReportDetailedFossil;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_ReportDetailedFossil;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_ReportDetailedStructure(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ReportPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_ReportDetailedStructure(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    ReportPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> cache_ViewModel_ReportDetailedStructure = null;
                public void UpdateChildListeners_ViewModel_ReportDetailedStructure(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj)
                {
                    if (obj != cache_ViewModel_ReportDetailedStructure)
                    {
                        if (cache_ViewModel_ReportDetailedStructure != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_ReportDetailedStructure).PropertyChanged -= PropertyChanged_ViewModel_ReportDetailedStructure;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_ReportDetailedStructure).CollectionChanged -= CollectionChanged_ViewModel_ReportDetailedStructure;
                            cache_ViewModel_ReportDetailedStructure = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_ReportDetailedStructure = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_ReportDetailedStructure;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_ReportDetailedStructure;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_ReportDetailedSample(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ReportPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_ReportDetailedSample(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    ReportPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> cache_ViewModel_ReportDetailedSample = null;
                public void UpdateChildListeners_ViewModel_ReportDetailedSample(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj)
                {
                    if (obj != cache_ViewModel_ReportDetailedSample)
                    {
                        if (cache_ViewModel_ReportDetailedSample != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_ReportDetailedSample).PropertyChanged -= PropertyChanged_ViewModel_ReportDetailedSample;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_ReportDetailedSample).CollectionChanged -= CollectionChanged_ViewModel_ReportDetailedSample;
                            cache_ViewModel_ReportDetailedSample = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_ReportDetailedSample = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_ReportDetailedSample;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_ReportDetailedSample;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_ReportDetailedEarthmat(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ReportPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_ReportDetailedEarthmat(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    ReportPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> cache_ViewModel_ReportDetailedEarthmat = null;
                public void UpdateChildListeners_ViewModel_ReportDetailedEarthmat(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj)
                {
                    if (obj != cache_ViewModel_ReportDetailedEarthmat)
                    {
                        if (cache_ViewModel_ReportDetailedEarthmat != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_ReportDetailedEarthmat).PropertyChanged -= PropertyChanged_ViewModel_ReportDetailedEarthmat;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_ReportDetailedEarthmat).CollectionChanged -= CollectionChanged_ViewModel_ReportDetailedEarthmat;
                            cache_ViewModel_ReportDetailedEarthmat = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_ReportDetailedEarthmat = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_ReportDetailedEarthmat;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_ReportDetailedEarthmat;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_ReportDetailedStation(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ReportPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_ReportDetailedStation(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    ReportPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> cache_ViewModel_ReportDetailedStation = null;
                public void UpdateChildListeners_ViewModel_ReportDetailedStation(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj)
                {
                    if (obj != cache_ViewModel_ReportDetailedStation)
                    {
                        if (cache_ViewModel_ReportDetailedStation != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_ReportDetailedStation).PropertyChanged -= PropertyChanged_ViewModel_ReportDetailedStation;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_ReportDetailedStation).CollectionChanged -= CollectionChanged_ViewModel_ReportDetailedStation;
                            cache_ViewModel_ReportDetailedStation = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_ReportDetailedStation = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_ReportDetailedStation;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_ReportDetailedStation;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_ReportDateItems(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ReportPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_ReportDateItems(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    ReportPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> cache_ViewModel_ReportDateItems = null;
                public void UpdateChildListeners_ViewModel_ReportDateItems(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.FieldNotes> obj)
                {
                    if (obj != cache_ViewModel_ReportDateItems)
                    {
                        if (cache_ViewModel_ReportDateItems != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_ReportDateItems).PropertyChanged -= PropertyChanged_ViewModel_ReportDateItems;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_ReportDateItems).CollectionChanged -= CollectionChanged_ViewModel_ReportDateItems;
                            cache_ViewModel_ReportDateItems = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_ReportDateItems = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_ReportDateItems;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_ReportDateItems;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 1: // Views\FieldNotesPage.xaml line 1
                {
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)(target);
                    ((global::Windows.UI.Xaml.Controls.Page)element1).Loading += this.Page_Loading;
                    ((global::Windows.UI.Xaml.Controls.Page)element1).Loaded += this.Page_Loaded;
                }
                break;
            case 2: // Views\FieldNotesPage.xaml line 19
                {
                    this.VisibilityConverter = (global::GSCFieldApp.Converters.VisibilityFromReverseBoolConverter)(target);
                }
                break;
            case 3: // Views\FieldNotesPage.xaml line 20
                {
                    this.VisibilityFromBoolConverter = (global::GSCFieldApp.Converters.VisibilityFromBoolConverter)(target);
                }
                break;
            case 4: // Views\FieldNotesPage.xaml line 21
                {
                    this.SolidColorBrushConverter = (global::GSCFieldApp.Converters.SolidColorBrushConverter)(target);
                }
                break;
            case 5: // Views\FieldNotesPage.xaml line 22
                {
                    this.MediaBrushConverter = (global::GSCFieldApp.Converters.MediaBrushConverter)(target);
                }
                break;
            case 6: // Views\FieldNotesPage.xaml line 23
                {
                    this.TextWithDegreeConverter = (global::GSCFieldApp.Converters.TextWithDegreeConverter)(target);
                }
                break;
            case 7: // Views\FieldNotesPage.xaml line 24
                {
                    this.TextWithAzimDegreeConverter = (global::GSCFieldApp.Converters.TextWithAzimDegreeConverter)(target);
                }
                break;
            case 8: // Views\FieldNotesPage.xaml line 25
                {
                    this.PercentageConverter = (global::GSCFieldApp.Converters.TextWithPercentageConverter)(target);
                }
                break;
            case 9: // Views\FieldNotesPage.xaml line 26
                {
                    this.ElevationConverter = (global::GSCFieldApp.Converters.ElevationConverter)(target);
                }
                break;
            case 10: // Views\FieldNotesPage.xaml line 27
                {
                    this.BitmapSourceConverter = (global::GSCFieldApp.Converters.BitmapSourceConverter)(target);
                }
                break;
            case 68: // Views\FieldNotesPage.xaml line 464
                {
                    this.pageHeader = (global::Template10.Controls.PageHeader)(target);
                }
                break;
            case 69: // Views\FieldNotesPage.xaml line 470
                {
                    this.SummaryPanel = (global::Windows.UI.Xaml.Controls.RelativePanel)(target);
                }
                break;
            case 70: // Views\FieldNotesPage.xaml line 496
                {
                    this.summaryDetailSeperator = (global::Windows.UI.Xaml.Shapes.Rectangle)(target);
                }
                break;
            case 71: // Views\FieldNotesPage.xaml line 508
                {
                    this.SplitViewRelativeContent = (global::Windows.UI.Xaml.Controls.RelativePanel)(target);
                }
                break;
            case 72: // Views\FieldNotesPage.xaml line 512
                {
                    this.DetailHeader = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 73: // Views\FieldNotesPage.xaml line 515
                {
                    this.StationPanel = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 74: // Views\FieldNotesPage.xaml line 569
                {
                    this.EarthmatPanel = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 75: // Views\FieldNotesPage.xaml line 621
                {
                    this.SamplePanel = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 76: // Views\FieldNotesPage.xaml line 678
                {
                    this.StructurePanel = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 77: // Views\FieldNotesPage.xaml line 734
                {
                    this.FossilPanel = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 78: // Views\FieldNotesPage.xaml line 790
                {
                    this.PaleoFlowPanel = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 79: // Views\FieldNotesPage.xaml line 846
                {
                    this.MineralPanel = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 80: // Views\FieldNotesPage.xaml line 902
                {
                    this.MineralAltPanel = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 81: // Views\FieldNotesPage.xaml line 967
                {
                    this.DocumentPanel = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 82: // Views\FieldNotesPage.xaml line 1022
                {
                    this.LocationPanel = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 83: // Views\FieldNotesPage.xaml line 1026
                {
                    this.ObservationExpandPanel = (global::GSCFieldApp.Themes.ExpandPanel)(target);
                }
                break;
            case 85: // Views\FieldNotesPage.xaml line 1033
                {
                    this.ObservationRelativePanel = (global::Windows.UI.Xaml.Controls.RelativePanel)(target);
                }
                break;
            case 86: // Views\FieldNotesPage.xaml line 1035
                {
                    this.textBlockBackground_FieldObservation = (global::Windows.UI.Xaml.Shapes.Rectangle)(target);
                }
                break;
            case 87: // Views\FieldNotesPage.xaml line 1043
                {
                    this.textBlock_FieldObservation = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 89: // Views\FieldNotesPage.xaml line 1054
                {
                    this.ObservationAddIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 90: // Views\FieldNotesPage.xaml line 1055
                {
                    this.ObservationEditIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 91: // Views\FieldNotesPage.xaml line 1056
                {
                    this.ObservationDeleteIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 92: // Views\FieldNotesPage.xaml line 1062
                {
                    this.ReportLocationList = (global::Windows.UI.Xaml.Controls.GridView)(target);
                }
                break;
            case 93: // Views\FieldNotesPage.xaml line 971
                {
                    this.DocumentExpandPanel = (global::GSCFieldApp.Themes.ExpandPanel)(target);
                }
                break;
            case 95: // Views\FieldNotesPage.xaml line 981
                {
                    this.DocumentRelativePanel = (global::Windows.UI.Xaml.Controls.RelativePanel)(target);
                }
                break;
            case 96: // Views\FieldNotesPage.xaml line 982
                {
                    this.DocumentBackground = (global::Windows.UI.Xaml.Shapes.Rectangle)(target);
                }
                break;
            case 97: // Views\FieldNotesPage.xaml line 987
                {
                    this.textBlock_FieldDocument = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 99: // Views\FieldNotesPage.xaml line 998
                {
                    this.DocumentAddIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 100: // Views\FieldNotesPage.xaml line 999
                {
                    this.DocumentEditIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 101: // Views\FieldNotesPage.xaml line 1000
                {
                    this.DocumentDeleteIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 102: // Views\FieldNotesPage.xaml line 1006
                {
                    this.ReportDocumentList = (global::Windows.UI.Xaml.Controls.GridView)(target);
                }
                break;
            case 103: // Views\FieldNotesPage.xaml line 906
                {
                    this.MineralAltExpandPanel = (global::GSCFieldApp.Themes.ExpandPanel)(target);
                }
                break;
            case 105: // Views\FieldNotesPage.xaml line 916
                {
                    this.MineralAltRelativePanel = (global::Windows.UI.Xaml.Controls.RelativePanel)(target);
                }
                break;
            case 106: // Views\FieldNotesPage.xaml line 917
                {
                    this.MineralAltBackground = (global::Windows.UI.Xaml.Shapes.Rectangle)(target);
                }
                break;
            case 107: // Views\FieldNotesPage.xaml line 923
                {
                    this.textBlock_FieldMineralAlt = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 109: // Views\FieldNotesPage.xaml line 935
                {
                    this.MineralAltAddIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 110: // Views\FieldNotesPage.xaml line 938
                {
                    this.MineralAltEditIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 111: // Views\FieldNotesPage.xaml line 942
                {
                    this.alterationDeleteIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 112: // Views\FieldNotesPage.xaml line 951
                {
                    this.ReportMineralAltList = (global::Windows.UI.Xaml.Controls.GridView)(target);
                }
                break;
            case 113: // Views\FieldNotesPage.xaml line 850
                {
                    this.MineralExpandPanel = (global::GSCFieldApp.Themes.ExpandPanel)(target);
                }
                break;
            case 115: // Views\FieldNotesPage.xaml line 860
                {
                    this.MineralRelativePanel = (global::Windows.UI.Xaml.Controls.RelativePanel)(target);
                }
                break;
            case 116: // Views\FieldNotesPage.xaml line 861
                {
                    this.MineralBackground = (global::Windows.UI.Xaml.Shapes.Rectangle)(target);
                }
                break;
            case 117: // Views\FieldNotesPage.xaml line 866
                {
                    this.textBlock_FieldMineral = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 119: // Views\FieldNotesPage.xaml line 878
                {
                    this.MineralAddIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 120: // Views\FieldNotesPage.xaml line 879
                {
                    this.MineralEditIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 121: // Views\FieldNotesPage.xaml line 880
                {
                    this.MineralDeleteIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 122: // Views\FieldNotesPage.xaml line 886
                {
                    this.ReportMineralList = (global::Windows.UI.Xaml.Controls.GridView)(target);
                }
                break;
            case 123: // Views\FieldNotesPage.xaml line 794
                {
                    this.PflowExpandPanel = (global::GSCFieldApp.Themes.ExpandPanel)(target);
                }
                break;
            case 125: // Views\FieldNotesPage.xaml line 804
                {
                    this.PflowRelativePanel = (global::Windows.UI.Xaml.Controls.RelativePanel)(target);
                }
                break;
            case 126: // Views\FieldNotesPage.xaml line 805
                {
                    this.PflowBackground = (global::Windows.UI.Xaml.Shapes.Rectangle)(target);
                }
                break;
            case 127: // Views\FieldNotesPage.xaml line 810
                {
                    this.textBlock_FieldPflow = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 129: // Views\FieldNotesPage.xaml line 822
                {
                    this.PflowAddIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 130: // Views\FieldNotesPage.xaml line 823
                {
                    this.PflowEditIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 131: // Views\FieldNotesPage.xaml line 824
                {
                    this.Paleo_flowDeleteIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 132: // Views\FieldNotesPage.xaml line 830
                {
                    this.ReportPflowList = (global::Windows.UI.Xaml.Controls.GridView)(target);
                }
                break;
            case 133: // Views\FieldNotesPage.xaml line 738
                {
                    this.FossilExpandPanel = (global::GSCFieldApp.Themes.ExpandPanel)(target);
                }
                break;
            case 135: // Views\FieldNotesPage.xaml line 748
                {
                    this.FossilRelativePanel = (global::Windows.UI.Xaml.Controls.RelativePanel)(target);
                }
                break;
            case 136: // Views\FieldNotesPage.xaml line 749
                {
                    this.FossilBackground = (global::Windows.UI.Xaml.Shapes.Rectangle)(target);
                }
                break;
            case 137: // Views\FieldNotesPage.xaml line 754
                {
                    this.textBlock_FieldFossil = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 139: // Views\FieldNotesPage.xaml line 766
                {
                    this.FossilAddIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 140: // Views\FieldNotesPage.xaml line 767
                {
                    this.FossilEditIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 141: // Views\FieldNotesPage.xaml line 768
                {
                    this.FossilDeleteIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 142: // Views\FieldNotesPage.xaml line 774
                {
                    this.ReportFossilList = (global::Windows.UI.Xaml.Controls.GridView)(target);
                }
                break;
            case 143: // Views\FieldNotesPage.xaml line 682
                {
                    this.StructureExpandPanel = (global::GSCFieldApp.Themes.ExpandPanel)(target);
                }
                break;
            case 145: // Views\FieldNotesPage.xaml line 692
                {
                    this.StructureRelativePanel = (global::Windows.UI.Xaml.Controls.RelativePanel)(target);
                }
                break;
            case 146: // Views\FieldNotesPage.xaml line 693
                {
                    this.StructureBackground = (global::Windows.UI.Xaml.Shapes.Rectangle)(target);
                }
                break;
            case 147: // Views\FieldNotesPage.xaml line 698
                {
                    this.textBlock_FieldStructure = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 149: // Views\FieldNotesPage.xaml line 710
                {
                    this.StrucAddIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 150: // Views\FieldNotesPage.xaml line 711
                {
                    this.StrucEditIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 151: // Views\FieldNotesPage.xaml line 712
                {
                    this.StrucDeleteIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 152: // Views\FieldNotesPage.xaml line 718
                {
                    this.ReportStructureList = (global::Windows.UI.Xaml.Controls.GridView)(target);
                }
                break;
            case 153: // Views\FieldNotesPage.xaml line 625
                {
                    this.SampleExpandPanel = (global::GSCFieldApp.Themes.ExpandPanel)(target);
                }
                break;
            case 155: // Views\FieldNotesPage.xaml line 635
                {
                    this.SampleRelativePanel = (global::Windows.UI.Xaml.Controls.RelativePanel)(target);
                }
                break;
            case 156: // Views\FieldNotesPage.xaml line 636
                {
                    this.SampleBackground = (global::Windows.UI.Xaml.Shapes.Rectangle)(target);
                }
                break;
            case 157: // Views\FieldNotesPage.xaml line 641
                {
                    this.textBlock_FieldSample = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 159: // Views\FieldNotesPage.xaml line 653
                {
                    this.SampleAddIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 160: // Views\FieldNotesPage.xaml line 654
                {
                    this.SampleEditIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 161: // Views\FieldNotesPage.xaml line 655
                {
                    this.SampleDeleteIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 162: // Views\FieldNotesPage.xaml line 661
                {
                    this.ReportSampleList = (global::Windows.UI.Xaml.Controls.GridView)(target);
                }
                break;
            case 163: // Views\FieldNotesPage.xaml line 572
                {
                    this.EarthMatExpandPanel = (global::GSCFieldApp.Themes.ExpandPanel)(target);
                }
                break;
            case 165: // Views\FieldNotesPage.xaml line 581
                {
                    this.EarthMatRelativePanel = (global::Windows.UI.Xaml.Controls.RelativePanel)(target);
                }
                break;
            case 166: // Views\FieldNotesPage.xaml line 582
                {
                    this.EarthMaterialBackground = (global::Windows.UI.Xaml.Shapes.Rectangle)(target);
                }
                break;
            case 167: // Views\FieldNotesPage.xaml line 589
                {
                    this.textBlock_FieldEarthMat = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 169: // Views\FieldNotesPage.xaml line 600
                {
                    this.EarthMatAddIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 170: // Views\FieldNotesPage.xaml line 601
                {
                    this.EarthMatEditIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 171: // Views\FieldNotesPage.xaml line 602
                {
                    this.Earth_materialDeleteIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 172: // Views\FieldNotesPage.xaml line 607
                {
                    this.ReportEarthmatList = (global::Windows.UI.Xaml.Controls.GridView)(target);
                }
                break;
            case 173: // Views\FieldNotesPage.xaml line 520
                {
                    this.StationExpandPanel = (global::GSCFieldApp.Themes.ExpandPanel)(target);
                }
                break;
            case 175: // Views\FieldNotesPage.xaml line 526
                {
                    this.StationBackground = (global::Windows.UI.Xaml.Shapes.Rectangle)(target);
                }
                break;
            case 176: // Views\FieldNotesPage.xaml line 532
                {
                    this.textBlock_FieldStation = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 178: // Views\FieldNotesPage.xaml line 542
                {
                    this.StationEditIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 179: // Views\FieldNotesPage.xaml line 545
                {
                    this.StationDeleteIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 180: // Views\FieldNotesPage.xaml line 553
                {
                    this.ReportStationList = (global::Windows.UI.Xaml.Controls.GridView)(target);
                }
                break;
            case 181: // Views\FieldNotesPage.xaml line 471
                {
                    this.SummaryHeader = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 182: // Views\FieldNotesPage.xaml line 472
                {
                    this.ReportListViewDates = (global::Windows.UI.Xaml.Controls.GridView)(target);
                    ((global::Windows.UI.Xaml.Controls.GridView)this.ReportListViewDates).Loaded += this.Grid_Loaded;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\FieldNotesPage.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    ReportPage_obj1_Bindings bindings = new ReportPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            case 11: // Views\FieldNotesPage.xaml line 421
                {                    
                    global::Windows.UI.Xaml.Controls.RelativePanel element11 = (global::Windows.UI.Xaml.Controls.RelativePanel)target;
                    ReportPage_obj11_Bindings bindings = new ReportPage_obj11_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element11.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element11.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element11, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element11, bindings);
                }
                break;
            case 16: // Views\FieldNotesPage.xaml line 378
                {                    
                    global::Windows.UI.Xaml.Controls.RelativePanel element16 = (global::Windows.UI.Xaml.Controls.RelativePanel)target;
                    ReportPage_obj16_Bindings bindings = new ReportPage_obj16_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element16.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element16.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element16, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element16, bindings);
                }
                break;
            case 22: // Views\FieldNotesPage.xaml line 341
                {                    
                    global::Windows.UI.Xaml.Controls.RelativePanel element22 = (global::Windows.UI.Xaml.Controls.RelativePanel)target;
                    ReportPage_obj22_Bindings bindings = new ReportPage_obj22_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element22.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element22.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element22, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element22, bindings);
                }
                break;
            case 26: // Views\FieldNotesPage.xaml line 300
                {                    
                    global::Windows.UI.Xaml.Controls.RelativePanel element26 = (global::Windows.UI.Xaml.Controls.RelativePanel)target;
                    ReportPage_obj26_Bindings bindings = new ReportPage_obj26_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element26.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element26.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element26, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element26, bindings);
                }
                break;
            case 31: // Views\FieldNotesPage.xaml line 251
                {                    
                    global::Windows.UI.Xaml.Controls.RelativePanel element31 = (global::Windows.UI.Xaml.Controls.RelativePanel)target;
                    ReportPage_obj31_Bindings bindings = new ReportPage_obj31_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element31.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element31.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element31, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element31, bindings);
                }
                break;
            case 38: // Views\FieldNotesPage.xaml line 203
                {                    
                    global::Windows.UI.Xaml.Controls.RelativePanel element38 = (global::Windows.UI.Xaml.Controls.RelativePanel)target;
                    ReportPage_obj38_Bindings bindings = new ReportPage_obj38_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element38.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element38.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element38, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element38, bindings);
                }
                break;
            case 46: // Views\FieldNotesPage.xaml line 167
                {                    
                    global::Windows.UI.Xaml.Controls.RelativePanel element46 = (global::Windows.UI.Xaml.Controls.RelativePanel)target;
                    ReportPage_obj46_Bindings bindings = new ReportPage_obj46_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element46.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element46.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element46, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element46, bindings);
                }
                break;
            case 51: // Views\FieldNotesPage.xaml line 131
                {                    
                    global::Windows.UI.Xaml.Controls.RelativePanel element51 = (global::Windows.UI.Xaml.Controls.RelativePanel)target;
                    ReportPage_obj51_Bindings bindings = new ReportPage_obj51_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element51.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element51.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element51, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element51, bindings);
                }
                break;
            case 56: // Views\FieldNotesPage.xaml line 91
                {                    
                    global::Windows.UI.Xaml.Controls.RelativePanel element56 = (global::Windows.UI.Xaml.Controls.RelativePanel)target;
                    ReportPage_obj56_Bindings bindings = new ReportPage_obj56_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element56.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element56.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element56, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element56, bindings);
                }
                break;
            case 61: // Views\FieldNotesPage.xaml line 50
                {                    
                    global::Windows.UI.Xaml.Controls.RelativePanel element61 = (global::Windows.UI.Xaml.Controls.RelativePanel)target;
                    ReportPage_obj61_Bindings bindings = new ReportPage_obj61_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element61.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element61.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element61, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element61, bindings);
                }
                break;
            case 66: // Views\FieldNotesPage.xaml line 30
                {                    
                    global::Windows.UI.Xaml.Controls.Grid element66 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    ReportPage_obj66_Bindings bindings = new ReportPage_obj66_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element66.DataContext);
                    element66.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element66, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element66, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

