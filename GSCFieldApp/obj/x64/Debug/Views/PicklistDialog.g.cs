#pragma checksum "C:\Users\Gab\Documents\DEV\gsc-field-application\GSCFieldApp\Views\PicklistDialog.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "A2B692C67DBFDB2B95CF138F0A6C8DA9"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GSCFieldApp.Views
{
    partial class PicklistDialog : 
        global::Windows.UI.Xaml.Controls.UserControl, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedValue(global::Windows.UI.Xaml.Controls.Primitives.Selector obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedValue = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBox_Text(global::Windows.UI.Xaml.Controls.TextBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_FrameworkElement_Tag(global::Windows.UI.Xaml.FrameworkElement obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Tag = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(global::Windows.UI.Xaml.Controls.Primitives.Selector obj, global::System.Int32 value)
            {
                obj.SelectedIndex = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_FontWeight(global::Windows.UI.Xaml.Controls.TextBlock obj, global::Windows.UI.Text.FontWeight value)
            {
                obj.FontWeight = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class PicklistDialog_obj4_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IPicklistDialog_Bindings
        {
            private global::GSCFieldApp.Models.Vocabularies dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj4;
            private global::Windows.UI.Xaml.Controls.TextBlock obj5;
            private global::Windows.UI.Xaml.Controls.TextBlock obj6;

            public PicklistDialog_obj4_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 4: // Views\PicklistDialog.xaml line 26
                        this.obj4 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.RelativePanel)target);
                        break;
                    case 5: // Views\PicklistDialog.xaml line 27
                        this.obj5 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 6: // Views\PicklistDialog.xaml line 30
                        this.obj6 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj4.Target as global::Windows.UI.Xaml.Controls.RelativePanel).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::GSCFieldApp.Models.Vocabularies) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IPicklistDialog_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::GSCFieldApp.Models.Vocabularies)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::GSCFieldApp.Models.Vocabularies obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_RelatedTo(obj.RelatedTo, phase);
                        this.Update_Description(obj.Description, phase);
                        this.Update_DefaultValue(obj.DefaultValue, phase);
                    }
                }
            }
            private void Update_RelatedTo(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\PicklistDialog.xaml line 27
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj5, (global::System.String)this.LookupConverter("PicklistDescriptionConverter").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_Description(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\PicklistDialog.xaml line 30
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj6, obj, null);
                }
            }
            private void Update_DefaultValue(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\PicklistDialog.xaml line 30
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_FontWeight(this.obj6, (global::Windows.UI.Text.FontWeight)this.LookupConverter("PicklistDefaultValueConverter").Convert(obj, typeof(global::Windows.UI.Text.FontWeight), null, null));
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class PicklistDialog_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IPicklistDialog_Bindings
        {
            private global::GSCFieldApp.Views.PicklistDialog dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.ComboBox obj12;
            private global::Windows.UI.Xaml.Controls.ComboBox obj14;
            private global::Windows.UI.Xaml.Controls.TextBox obj15;
            private global::Windows.UI.Xaml.Controls.ListView obj17;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj20;
            private global::Windows.UI.Xaml.Controls.TextBlock obj21;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj22;

            private PicklistDialog_obj1_BindingsTracking bindingsTracking;

            public PicklistDialog_obj1_Bindings()
            {
                this.bindingsTracking = new PicklistDialog_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 12: // Views\PicklistDialog.xaml line 85
                        this.obj12 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        (this.obj12).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedValueProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.picklistVM.SelectedPicklist = (global::System.String)this.obj12.SelectedValue;
                            }
                        });
                        break;
                    case 14: // Views\PicklistDialog.xaml line 94
                        this.obj14 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        ((global::Windows.UI.Xaml.Controls.ComboBox)target).SelectionChanged += (global::System.Object sender, global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs e) =>
                        {
                            this.dataRoot.picklistVM.picklistParent_SelectionChanged(sender, e);
                        };
                        (this.obj14).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedValueProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.picklistVM.SelectedParent = (global::System.String)this.obj14.SelectedValue;
                            }
                        });
                        (this.obj14).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.VisibilityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.picklistVM.ParentVisibility = this.obj14.Visibility;
                            }
                        });
                        break;
                    case 15: // Views\PicklistDialog.xaml line 101
                        this.obj15 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        ((global::Windows.UI.Xaml.Controls.TextBox)target).TextChanged += (global::System.Object sender, global::Windows.UI.Xaml.Controls.TextChangedEventArgs e) =>
                        {
                            this.dataRoot.picklistVM.picklistAddTextbox_TextChanged(sender, e);
                        };
                        (this.obj15).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Control.IsEnabledProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.picklistVM.PicklistEditEnableDisable = this.obj15.IsEnabled;
                            }
                        });
                        (this.obj15).LostFocus += (global::System.Object sender, global::Windows.UI.Xaml.RoutedEventArgs e) =>
                        {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.picklistVM.AddModifyTerm = this.obj15.Text;
                            }
                        };
                        (this.obj15).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.FrameworkElement.TagProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.picklistVM.AddModifyObject = this.obj15.Tag;
                            }
                        });
                        break;
                    case 17: // Views\PicklistDialog.xaml line 107
                        this.obj17 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        ((global::Windows.UI.Xaml.Controls.ListView)target).SelectionChanged += (global::System.Object sender, global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs e) =>
                        {
                            this.dataRoot.picklistVM.picklistValues_SelectionChanged(sender, e);
                        };
                        (this.obj17).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.picklistVM.SelectedPicklistValueIndex = this.obj17.SelectedIndex;
                            }
                        });
                        break;
                    case 20: // Views\PicklistDialog.xaml line 130
                        this.obj20 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.picklistVM.PicklistValueDefaultIcon_Tapped(sender, e);
                        };
                        break;
                    case 21: // Views\PicklistDialog.xaml line 133
                        this.obj21 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        ((global::Windows.UI.Xaml.Controls.TextBlock)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.picklistVM.PicklistValueDefaultIcon_Tapped(sender, e);
                        };
                        break;
                    case 22: // Views\PicklistDialog.xaml line 134
                        this.obj22 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        ((global::Windows.UI.Xaml.Controls.SymbolIcon)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.picklistVM.PicklistValueAddIcon_Tapped(sender, e);
                        };
                        break;
                    default:
                        break;
                }
            }

            // IPicklistDialog_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::GSCFieldApp.Views.PicklistDialog)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::GSCFieldApp.Views.PicklistDialog obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_picklistVM(obj.picklistVM, phase);
                    }
                }
            }
            private void Update_picklistVM(global::GSCFieldApp.ViewModels.PicklistViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_picklistVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_picklistVM_Picklists(obj.Picklists, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_picklistVM_SelectedPicklist(obj.SelectedPicklist, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_picklistVM_ParentPicklist(obj.ParentPicklist, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_picklistVM_SelectedParent(obj.SelectedParent, phase);
                        this.Update_picklistVM_ParentVisibility(obj.ParentVisibility, phase);
                        this.Update_picklistVM_PicklistEditEnableDisable(obj.PicklistEditEnableDisable, phase);
                        this.Update_picklistVM_AddModifyTerm(obj.AddModifyTerm, phase);
                        this.Update_picklistVM_AddModifyObject(obj.AddModifyObject, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_picklistVM_PicklistValues(obj.PicklistValues, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_picklistVM_SelectedPicklistValueIndex(obj.SelectedPicklistValueIndex, phase);
                    }
                }
            }
            private void Update_picklistVM_Picklists(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Themes.ComboBoxItem> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\PicklistDialog.xaml line 85
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj12, obj, null);
                }
            }
            private void Update_picklistVM_SelectedPicklist(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\PicklistDialog.xaml line 85
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedValue(this.obj12, obj, null);
                }
            }
            private void Update_picklistVM_ParentPicklist(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Themes.ComboBoxItem> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\PicklistDialog.xaml line 94
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj14, obj, null);
                }
            }
            private void Update_picklistVM_SelectedParent(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\PicklistDialog.xaml line 94
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedValue(this.obj14, obj, null);
                }
            }
            private void Update_picklistVM_ParentVisibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\PicklistDialog.xaml line 94
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj14, obj);
                }
            }
            private void Update_picklistVM_PicklistEditEnableDisable(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\PicklistDialog.xaml line 101
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj15, obj);
                }
            }
            private void Update_picklistVM_AddModifyTerm(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\PicklistDialog.xaml line 101
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj15, obj, null);
                }
            }
            private void Update_picklistVM_AddModifyObject(global::System.Object obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\PicklistDialog.xaml line 101
                    XamlBindingSetters.Set_Windows_UI_Xaml_FrameworkElement_Tag(this.obj15, obj, null);
                }
            }
            private void Update_picklistVM_PicklistValues(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.Vocabularies> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\PicklistDialog.xaml line 107
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj17, obj, null);
                }
            }
            private void Update_picklistVM_SelectedPicklistValueIndex(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\PicklistDialog.xaml line 107
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj17, obj);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class PicklistDialog_obj1_BindingsTracking
            {
                private global::System.WeakReference<PicklistDialog_obj1_Bindings> weakRefToBindingObj; 

                public PicklistDialog_obj1_BindingsTracking(PicklistDialog_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<PicklistDialog_obj1_Bindings>(obj);
                }

                public PicklistDialog_obj1_Bindings TryGetBindingObject()
                {
                    PicklistDialog_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_picklistVM(null);
                }

                public void PropertyChanged_picklistVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    PicklistDialog_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::GSCFieldApp.ViewModels.PicklistViewModel obj = sender as global::GSCFieldApp.ViewModels.PicklistViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_picklistVM_SelectedPicklist(obj.SelectedPicklist, DATA_CHANGED);
                                bindings.Update_picklistVM_SelectedParent(obj.SelectedParent, DATA_CHANGED);
                                bindings.Update_picklistVM_ParentVisibility(obj.ParentVisibility, DATA_CHANGED);
                                bindings.Update_picklistVM_PicklistEditEnableDisable(obj.PicklistEditEnableDisable, DATA_CHANGED);
                                bindings.Update_picklistVM_AddModifyTerm(obj.AddModifyTerm, DATA_CHANGED);
                                bindings.Update_picklistVM_AddModifyObject(obj.AddModifyObject, DATA_CHANGED);
                                bindings.Update_picklistVM_SelectedPicklistValueIndex(obj.SelectedPicklistValueIndex, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "SelectedPicklist":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_picklistVM_SelectedPicklist(obj.SelectedPicklist, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedParent":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_picklistVM_SelectedParent(obj.SelectedParent, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ParentVisibility":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_picklistVM_ParentVisibility(obj.ParentVisibility, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PicklistEditEnableDisable":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_picklistVM_PicklistEditEnableDisable(obj.PicklistEditEnableDisable, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "AddModifyTerm":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_picklistVM_AddModifyTerm(obj.AddModifyTerm, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "AddModifyObject":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_picklistVM_AddModifyObject(obj.AddModifyObject, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedPicklistValueIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_picklistVM_SelectedPicklistValueIndex(obj.SelectedPicklistValueIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::GSCFieldApp.ViewModels.PicklistViewModel cache_picklistVM = null;
                public void UpdateChildListeners_picklistVM(global::GSCFieldApp.ViewModels.PicklistViewModel obj)
                {
                    if (obj != cache_picklistVM)
                    {
                        if (cache_picklistVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_picklistVM).PropertyChanged -= PropertyChanged_picklistVM;
                            cache_picklistVM = null;
                        }
                        if (obj != null)
                        {
                            cache_picklistVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_picklistVM;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // Views\PicklistDialog.xaml line 20
                {
                    this.PicklistDescriptionConverter = (global::GSCFieldApp.Converters.PicklistDescriptionConverter)(target);
                }
                break;
            case 3: // Views\PicklistDialog.xaml line 21
                {
                    this.PicklistDefaultValueConverter = (global::GSCFieldApp.Converters.PicklistDefaultValueConverter)(target);
                }
                break;
            case 7: // Views\PicklistDialog.xaml line 33
                {
                    global::Windows.UI.Xaml.Controls.SymbolIcon element7 = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                    ((global::Windows.UI.Xaml.Controls.SymbolIcon)element7).Tapped += this.PicklistValueCheck_Tapped;
                }
                break;
            case 8: // Views\PicklistDialog.xaml line 44
                {
                    this.pageHeader = (global::Template10.Controls.PageHeader)(target);
                }
                break;
            case 9: // Views\PicklistDialog.xaml line 61
                {
                    this.pageFooter = (global::Template10.Controls.PageHeader)(target);
                }
                break;
            case 10: // Views\PicklistDialog.xaml line 67
                {
                    this.picklistRelativePanel = (global::Windows.UI.Xaml.Controls.RelativePanel)(target);
                }
                break;
            case 11: // Views\PicklistDialog.xaml line 80
                {
                    this.picklistScrollRelativePanel = (global::Windows.UI.Xaml.Controls.RelativePanel)(target);
                }
                break;
            case 12: // Views\PicklistDialog.xaml line 85
                {
                    this.picklistSelector = (global::Windows.UI.Xaml.Controls.ComboBox)(target);
                    ((global::Windows.UI.Xaml.Controls.ComboBox)this.picklistSelector).SelectionChanged += this.picklistSelector_SelectionChangedAsync;
                }
                break;
            case 13: // Views\PicklistDialog.xaml line 91
                {
                    this.MainSeparator_01 = (global::Windows.UI.Xaml.Shapes.Rectangle)(target);
                }
                break;
            case 14: // Views\PicklistDialog.xaml line 94
                {
                    this.picklistAddParentTextbox = (global::Windows.UI.Xaml.Controls.ComboBox)(target);
                }
                break;
            case 15: // Views\PicklistDialog.xaml line 101
                {
                    this.picklistAddTextbox = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 16: // Views\PicklistDialog.xaml line 105
                {
                    this.picklistTermsTextbox = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 17: // Views\PicklistDialog.xaml line 107
                {
                    this.picklistValues = (global::Windows.UI.Xaml.Controls.ListView)(target);
                    ((global::Windows.UI.Xaml.Controls.ListView)this.picklistValues).ItemClick += this.picklistValues_ItemClick;
                    ((global::Windows.UI.Xaml.Controls.ListView)this.picklistValues).ContainerContentChanging += this.picklistValues_ContainerContentChanging;
                }
                break;
            case 18: // Views\PicklistDialog.xaml line 126
                {
                    this.PicklistValueDeleteIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                    ((global::Windows.UI.Xaml.Controls.SymbolIcon)this.PicklistValueDeleteIcon).Tapped += this.PicklistValueDeleteIcon_Tapped;
                }
                break;
            case 19: // Views\PicklistDialog.xaml line 129
                {
                    this.PicklistValueDeleteName = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                    ((global::Windows.UI.Xaml.Controls.TextBlock)this.PicklistValueDeleteName).Tapped += this.PicklistValueDeleteIcon_Tapped;
                }
                break;
            case 20: // Views\PicklistDialog.xaml line 130
                {
                    this.PicklistValueDefaultIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 21: // Views\PicklistDialog.xaml line 133
                {
                    this.PicklistValueDefaultName = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 22: // Views\PicklistDialog.xaml line 134
                {
                    this.PicklistValueAddIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 23: // Views\PicklistDialog.xaml line 50
                {
                    this.picklistBackButton = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)this.picklistBackButton).Tapped += this.picklistBackButton_TappedAsync;
                }
                break;
            case 24: // Views\PicklistDialog.xaml line 51
                {
                    this.picklistSaveButton = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)this.picklistSaveButton).Tapped += this.PicklistSaveButton_TappedAsync;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\PicklistDialog.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.UserControl element1 = (global::Windows.UI.Xaml.Controls.UserControl)target;
                    PicklistDialog_obj1_Bindings bindings = new PicklistDialog_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            case 4: // Views\PicklistDialog.xaml line 26
                {                    
                    global::Windows.UI.Xaml.Controls.RelativePanel element4 = (global::Windows.UI.Xaml.Controls.RelativePanel)target;
                    PicklistDialog_obj4_Bindings bindings = new PicklistDialog_obj4_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element4.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element4.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element4, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element4, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

