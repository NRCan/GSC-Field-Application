#pragma checksum "C:\Users\Gab\Documents\DEV\gsc-field-application\GSCFieldApp\Views\MapPage.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "6D32BE9D27648CBBEB514AE9245934C5"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GSCFieldApp.Views
{
    partial class MapPage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ProgressRing_IsActive(global::Windows.UI.Xaml.Controls.ProgressRing obj, global::System.Boolean value)
            {
                obj.IsActive = value;
            }
            public static void Set_Esri_ArcGISRuntime_Toolkit_UI_Controls_ScaleLine_MapView(global::Esri.ArcGISRuntime.Toolkit.UI.Controls.ScaleLine obj, global::Esri.ArcGISRuntime.UI.Controls.MapView value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Esri.ArcGISRuntime.UI.Controls.MapView) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Esri.ArcGISRuntime.UI.Controls.MapView), targetNullValue);
                }
                obj.MapView = value;
            }
            public static void Set_Windows_UI_Xaml_Documents_Run_Text(global::Windows.UI.Xaml.Documents.Run obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_SymbolIcon_Symbol(global::Windows.UI.Xaml.Controls.SymbolIcon obj, global::Windows.UI.Xaml.Controls.Symbol value)
            {
                obj.Symbol = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(global::Windows.UI.Xaml.Controls.Primitives.Selector obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ToggleSwitch_Header(global::Windows.UI.Xaml.Controls.ToggleSwitch obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Header = value;
            }
            public static void Set_Windows_UI_Xaml_FrameworkElement_Tag(global::Windows.UI.Xaml.FrameworkElement obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Tag = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(global::Windows.UI.Xaml.Controls.ToggleSwitch obj, global::System.Boolean value)
            {
                obj.IsOn = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_RangeBase_Value(global::Windows.UI.Xaml.Controls.Primitives.RangeBase obj, global::System.Double value)
            {
                obj.Value = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class MapPage_obj8_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMapPage_Bindings
        {
            private global::GSCFieldApp.Models.Files dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj8;
            private global::Windows.UI.Xaml.Controls.ToggleSwitch obj9;
            private global::Windows.UI.Xaml.Controls.Slider obj10;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj11;

            public MapPage_obj8_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 8: // Views\MapPage.xaml line 34
                        this.obj8 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.RelativePanel)target);
                        break;
                    case 9: // Views\MapPage.xaml line 36
                        this.obj9 = (global::Windows.UI.Xaml.Controls.ToggleSwitch)target;
                        break;
                    case 10: // Views\MapPage.xaml line 39
                        this.obj10 = (global::Windows.UI.Xaml.Controls.Slider)target;
                        break;
                    case 11: // Views\MapPage.xaml line 46
                        this.obj11 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj8.Target as global::Windows.UI.Xaml.Controls.RelativePanel).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::GSCFieldApp.Models.Files) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IMapPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::GSCFieldApp.Models.Files)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::GSCFieldApp.Models.Files obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_FileName(obj.FileName, phase);
                        this.Update_FileVisible(obj.FileVisible, phase);
                        this.Update_FileOpacity(obj.FileOpacity, phase);
                        this.Update_FileCanDelete(obj.FileCanDelete, phase);
                    }
                }
            }
            private void Update_FileName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\MapPage.xaml line 36
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToggleSwitch_Header(this.obj9, obj, null);
                    // Views\MapPage.xaml line 39
                    XamlBindingSetters.Set_Windows_UI_Xaml_FrameworkElement_Tag(this.obj10, obj, null);
                }
            }
            private void Update_FileVisible(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\MapPage.xaml line 36
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this.obj9, obj);
                }
            }
            private void Update_FileOpacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\MapPage.xaml line 39
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_RangeBase_Value(this.obj10, obj);
                }
            }
            private void Update_FileCanDelete(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\MapPage.xaml line 46
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj11, obj);
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class MapPage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMapPage_Bindings
        {
            private global::GSCFieldApp.Views.MapPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.TextBlock obj14;
            private global::Windows.UI.Xaml.Controls.ProgressRing obj16;
            private global::Windows.UI.Xaml.Controls.TextBlock obj17;
            private global::Esri.ArcGISRuntime.UI.Controls.MapView obj18;
            private global::Esri.ArcGISRuntime.Toolkit.UI.Controls.ScaleLine obj20;
            private global::Windows.UI.Xaml.Documents.Run obj24;
            private global::Windows.UI.Xaml.Documents.Run obj26;
            private global::Windows.UI.Xaml.Documents.Run obj27;
            private global::Windows.UI.Xaml.Documents.Run obj28;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj33;
            private global::Windows.UI.Xaml.Controls.Flyout obj34;
            private global::Windows.UI.Xaml.Controls.ListView obj35;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj36;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj37;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj38;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj39;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj40;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj41;

            private MapPage_obj1_BindingsTracking bindingsTracking;

            public MapPage_obj1_Bindings()
            {
                this.bindingsTracking = new MapPage_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 14: // Views\MapPage.xaml line 117
                        this.obj14 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        (this.obj14).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.VisibilityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.NoMapsWatermark = (global::System.Boolean)this.LookupConverter("VisibilityFromBoolConverter").ConvertBack(this.obj14.Visibility, typeof(global::System.Boolean), null, null);
                            }
                        });
                        break;
                    case 16: // Views\MapPage.xaml line 171
                        this.obj16 = (global::Windows.UI.Xaml.Controls.ProgressRing)target;
                        (this.obj16).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ProgressRing.IsActiveProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MapRingActive = this.obj16.IsActive;
                            }
                        });
                        (this.obj16).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.VisibilityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MapRingVisibility = (global::System.Boolean)this.LookupConverter("VisibilityFromBoolConverter").ConvertBack(this.obj16.Visibility, typeof(global::System.Boolean), null, null);
                            }
                        });
                        break;
                    case 17: // Views\MapPage.xaml line 174
                        this.obj17 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        (this.obj17).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.VisibilityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MapRingLabelAcquiringGPSVisibility = (global::System.Boolean)this.LookupConverter("VisibilityFromBoolConverter").ConvertBack(this.obj17.Visibility, typeof(global::System.Boolean), null, null);
                            }
                        });
                        break;
                    case 18: // Views\MapPage.xaml line 124
                        this.obj18 = (global::Esri.ArcGISRuntime.UI.Controls.MapView)target;
                        ((global::Esri.ArcGISRuntime.UI.Controls.MapView)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.myMapView_IdentifyFeature(sender, e);
                        };
                        break;
                    case 20: // Views\MapPage.xaml line 152
                        this.obj20 = (global::Esri.ArcGISRuntime.Toolkit.UI.Controls.ScaleLine)target;
                        break;
                    case 24: // Views\MapPage.xaml line 144
                        this.obj24 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 26: // Views\MapPage.xaml line 132
                        this.obj26 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 27: // Views\MapPage.xaml line 133
                        this.obj27 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 28: // Views\MapPage.xaml line 134
                        this.obj28 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 33: // Views\MapPage.xaml line 103
                        this.obj33 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        (this.obj33).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.SymbolIcon.SymbolProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.GPSModeSymbol = this.obj33.Symbol;
                            }
                        });
                        break;
                    case 34: // Views\MapPage.xaml line 84
                        this.obj34 = (global::Windows.UI.Xaml.Controls.Flyout)target;
                        ((global::Windows.UI.Xaml.Controls.Flyout)target).Closed += (global::System.Object sender, global::System.Object e) =>
                        {
                            this.dataRoot.ViewModel.LayerFlyout_Closed(sender, e);
                        };
                        break;
                    case 35: // Views\MapPage.xaml line 86
                        this.obj35 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        (this.obj35).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.SelectedLayer = this.obj35.SelectedItem;
                            }
                        });
                        break;
                    case 36: // Views\MapPage.xaml line 63
                        this.obj36 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        ((global::Windows.UI.Xaml.Controls.AppBarButton)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.MapPageQuickButtons_Tapped(sender, e);
                        };
                        break;
                    case 37: // Views\MapPage.xaml line 64
                        this.obj37 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        ((global::Windows.UI.Xaml.Controls.AppBarButton)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.MapPageQuickButtons_Tapped(sender, e);
                        };
                        (this.obj37).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Control.IsEnabledProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MapPageQuickSampleEnable = this.obj37.IsEnabled;
                            }
                        });
                        break;
                    case 38: // Views\MapPage.xaml line 65
                        this.obj38 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        ((global::Windows.UI.Xaml.Controls.AppBarButton)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.MapPageQuickButtons_Tapped(sender, e);
                        };
                        (this.obj38).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Control.IsEnabledProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MapPageQuickPhotoEnable = this.obj38.IsEnabled;
                            }
                        });
                        break;
                    case 39: // Views\MapPage.xaml line 66
                        this.obj39 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        ((global::Windows.UI.Xaml.Controls.AppBarButton)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.MapPageQuickButtons_Tapped(sender, e);
                        };
                        (this.obj39).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Control.IsEnabledProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MapPageQuickMeasurementEnable = this.obj39.IsEnabled;
                            }
                        });
                        break;
                    case 40: // Views\MapPage.xaml line 67
                        this.obj40 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        ((global::Windows.UI.Xaml.Controls.AppBarButton)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.MapPageQuickButtons_Tapped(sender, e);
                        };
                        break;
                    case 41: // Views\MapPage.xaml line 70
                        this.obj41 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        ((global::Windows.UI.Xaml.Controls.AppBarButton)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.MapPageQuickButtons_Tapped(sender, e);
                        };
                        break;
                    default:
                        break;
                }
            }

            // IMapPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::GSCFieldApp.Views.MapPage)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::GSCFieldApp.Views.MapPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_myMapView(obj.myMapView, phase);
                    }
                }
            }
            private void Update_ViewModel(global::GSCFieldApp.ViewModels.MapPageViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_NoMapsWatermark(obj.NoMapsWatermark, phase);
                        this.Update_ViewModel_MapRingActive(obj.MapRingActive, phase);
                        this.Update_ViewModel_MapRingVisibility(obj.MapRingVisibility, phase);
                        this.Update_ViewModel_MapRingLabelAcquiringGPSVisibility(obj.MapRingLabelAcquiringGPSVisibility, phase);
                        this.Update_ViewModel_CurrentAccuracy(obj.CurrentAccuracy, phase);
                        this.Update_ViewModel_CurrentLatitude(obj.CurrentLatitude, phase);
                        this.Update_ViewModel_CurrentLongitude(obj.CurrentLongitude, phase);
                        this.Update_ViewModel_CurrentAltitude(obj.CurrentAltitude, phase);
                        this.Update_ViewModel_GPSModeSymbol(obj.GPSModeSymbol, phase);
                        this.Update_ViewModel_SelectedLayer(obj.SelectedLayer, phase);
                        this.Update_ViewModel_FilenameValues(obj.FilenameValues, phase);
                        this.Update_ViewModel_MapPageQuickSampleEnable(obj.MapPageQuickSampleEnable, phase);
                        this.Update_ViewModel_MapPageQuickPhotoEnable(obj.MapPageQuickPhotoEnable, phase);
                        this.Update_ViewModel_MapPageQuickMeasurementEnable(obj.MapPageQuickMeasurementEnable, phase);
                    }
                }
            }
            private void Update_ViewModel_NoMapsWatermark(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MapPage.xaml line 117
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj14, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityFromBoolConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_ViewModel_MapRingActive(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MapPage.xaml line 171
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ProgressRing_IsActive(this.obj16, obj);
                }
            }
            private void Update_ViewModel_MapRingVisibility(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MapPage.xaml line 171
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj16, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityFromBoolConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_ViewModel_MapRingLabelAcquiringGPSVisibility(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MapPage.xaml line 174
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj17, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityFromBoolConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_myMapView(global::Esri.ArcGISRuntime.UI.Controls.MapView obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\MapPage.xaml line 152
                    XamlBindingSetters.Set_Esri_ArcGISRuntime_Toolkit_UI_Controls_ScaleLine_MapView(this.obj20, obj, null);
                }
            }
            private void Update_ViewModel_CurrentAccuracy(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MapPage.xaml line 144
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj24, (global::System.String)this.LookupConverter("FormatAccuracy").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_ViewModel_CurrentLatitude(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MapPage.xaml line 132
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj26, (global::System.String)this.LookupConverter("DD2DMS").Convert(obj, typeof(global::System.String), "Latitude", null), null);
                }
            }
            private void Update_ViewModel_CurrentLongitude(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MapPage.xaml line 133
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj27, (global::System.String)this.LookupConverter("DD2DMS").Convert(obj, typeof(global::System.String), "Longitude", null), null);
                }
            }
            private void Update_ViewModel_CurrentAltitude(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MapPage.xaml line 134
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj28, (global::System.String)this.LookupConverter("FormatElevation").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_ViewModel_GPSModeSymbol(global::Windows.UI.Xaml.Controls.Symbol obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MapPage.xaml line 103
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_SymbolIcon_Symbol(this.obj33, obj);
                }
            }
            private void Update_ViewModel_SelectedLayer(global::System.Object obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MapPage.xaml line 86
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj35, obj, null);
                }
            }
            private void Update_ViewModel_FilenameValues(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.Files> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_FilenameValues(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MapPage.xaml line 86
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj35, obj, null);
                }
            }
            private void Update_ViewModel_MapPageQuickSampleEnable(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MapPage.xaml line 64
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj37, obj);
                }
            }
            private void Update_ViewModel_MapPageQuickPhotoEnable(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MapPage.xaml line 65
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj38, obj);
                }
            }
            private void Update_ViewModel_MapPageQuickMeasurementEnable(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\MapPage.xaml line 66
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj39, obj);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class MapPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<MapPage_obj1_Bindings> weakRefToBindingObj; 

                public MapPage_obj1_BindingsTracking(MapPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<MapPage_obj1_Bindings>(obj);
                }

                public MapPage_obj1_Bindings TryGetBindingObject()
                {
                    MapPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_ViewModel_FilenameValues(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MapPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::GSCFieldApp.ViewModels.MapPageViewModel obj = sender as global::GSCFieldApp.ViewModels.MapPageViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_NoMapsWatermark(obj.NoMapsWatermark, DATA_CHANGED);
                                bindings.Update_ViewModel_MapRingActive(obj.MapRingActive, DATA_CHANGED);
                                bindings.Update_ViewModel_MapRingVisibility(obj.MapRingVisibility, DATA_CHANGED);
                                bindings.Update_ViewModel_MapRingLabelAcquiringGPSVisibility(obj.MapRingLabelAcquiringGPSVisibility, DATA_CHANGED);
                                bindings.Update_ViewModel_CurrentAccuracy(obj.CurrentAccuracy, DATA_CHANGED);
                                bindings.Update_ViewModel_CurrentLatitude(obj.CurrentLatitude, DATA_CHANGED);
                                bindings.Update_ViewModel_CurrentLongitude(obj.CurrentLongitude, DATA_CHANGED);
                                bindings.Update_ViewModel_CurrentAltitude(obj.CurrentAltitude, DATA_CHANGED);
                                bindings.Update_ViewModel_GPSModeSymbol(obj.GPSModeSymbol, DATA_CHANGED);
                                bindings.Update_ViewModel_SelectedLayer(obj.SelectedLayer, DATA_CHANGED);
                                bindings.Update_ViewModel_FilenameValues(obj.FilenameValues, DATA_CHANGED);
                                bindings.Update_ViewModel_MapPageQuickSampleEnable(obj.MapPageQuickSampleEnable, DATA_CHANGED);
                                bindings.Update_ViewModel_MapPageQuickPhotoEnable(obj.MapPageQuickPhotoEnable, DATA_CHANGED);
                                bindings.Update_ViewModel_MapPageQuickMeasurementEnable(obj.MapPageQuickMeasurementEnable, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "NoMapsWatermark":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_NoMapsWatermark(obj.NoMapsWatermark, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MapRingActive":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_MapRingActive(obj.MapRingActive, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MapRingVisibility":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_MapRingVisibility(obj.MapRingVisibility, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MapRingLabelAcquiringGPSVisibility":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_MapRingLabelAcquiringGPSVisibility(obj.MapRingLabelAcquiringGPSVisibility, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CurrentAccuracy":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CurrentAccuracy(obj.CurrentAccuracy, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CurrentLatitude":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CurrentLatitude(obj.CurrentLatitude, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CurrentLongitude":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CurrentLongitude(obj.CurrentLongitude, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CurrentAltitude":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CurrentAltitude(obj.CurrentAltitude, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "GPSModeSymbol":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_GPSModeSymbol(obj.GPSModeSymbol, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedLayer":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedLayer(obj.SelectedLayer, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FilenameValues":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_FilenameValues(obj.FilenameValues, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MapPageQuickSampleEnable":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_MapPageQuickSampleEnable(obj.MapPageQuickSampleEnable, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MapPageQuickPhotoEnable":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_MapPageQuickPhotoEnable(obj.MapPageQuickPhotoEnable, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MapPageQuickMeasurementEnable":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_MapPageQuickMeasurementEnable(obj.MapPageQuickMeasurementEnable, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::GSCFieldApp.ViewModels.MapPageViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::GSCFieldApp.ViewModels.MapPageViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_FilenameValues(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MapPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.Files> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.Files>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_FilenameValues(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    MapPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.Files> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.Files>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.Files> cache_ViewModel_FilenameValues = null;
                public void UpdateChildListeners_ViewModel_FilenameValues(global::System.Collections.ObjectModel.ObservableCollection<global::GSCFieldApp.Models.Files> obj)
                {
                    if (obj != cache_ViewModel_FilenameValues)
                    {
                        if (cache_ViewModel_FilenameValues != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_FilenameValues).PropertyChanged -= PropertyChanged_ViewModel_FilenameValues;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_FilenameValues).CollectionChanged -= CollectionChanged_ViewModel_FilenameValues;
                            cache_ViewModel_FilenameValues = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_FilenameValues = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_FilenameValues;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_FilenameValues;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // Views\MapPage.xaml line 21
                {
                    this.ViewModel = (global::GSCFieldApp.ViewModels.MapPageViewModel)(target);
                }
                break;
            case 3: // Views\MapPage.xaml line 25
                {
                    this.FormatScale = (global::GSCFieldApp.Converters.ScaleConverter)(target);
                }
                break;
            case 4: // Views\MapPage.xaml line 26
                {
                    this.DD2DMS = (global::GSCFieldApp.Converters.DD2DMSConverter)(target);
                }
                break;
            case 5: // Views\MapPage.xaml line 27
                {
                    this.FormatAccuracy = (global::GSCFieldApp.Converters.HorizontalAccuracyConverter)(target);
                }
                break;
            case 6: // Views\MapPage.xaml line 28
                {
                    this.FormatElevation = (global::GSCFieldApp.Converters.ElevationConverter)(target);
                }
                break;
            case 7: // Views\MapPage.xaml line 29
                {
                    this.VisibilityFromBoolConverter = (global::GSCFieldApp.Converters.VisibilityFromBoolConverter)(target);
                }
                break;
            case 9: // Views\MapPage.xaml line 36
                {
                    global::Windows.UI.Xaml.Controls.ToggleSwitch element9 = (global::Windows.UI.Xaml.Controls.ToggleSwitch)(target);
                    ((global::Windows.UI.Xaml.Controls.ToggleSwitch)element9).Toggled += this.mapFileName_Toggled;
                }
                break;
            case 10: // Views\MapPage.xaml line 39
                {
                    global::Windows.UI.Xaml.Controls.Slider element10 = (global::Windows.UI.Xaml.Controls.Slider)(target);
                    ((global::Windows.UI.Xaml.Controls.Slider)element10).ValueChanged += this.OpacitySlider_ValueChanged;
                }
                break;
            case 11: // Views\MapPage.xaml line 46
                {
                    global::Windows.UI.Xaml.Controls.SymbolIcon element11 = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                    ((global::Windows.UI.Xaml.Controls.SymbolIcon)element11).Tapped += this.MapDeleteIcon_Tapped;
                }
                break;
            case 12: // Views\MapPage.xaml line 58
                {
                    this.pageHeader = (global::Template10.Controls.PageHeader)(target);
                }
                break;
            case 13: // Views\MapPage.xaml line 75
                {
                    this.pageFooter = (global::Template10.Controls.PageHeader)(target);
                }
                break;
            case 15: // Views\MapPage.xaml line 121
                {
                    this.MapBorder = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 16: // Views\MapPage.xaml line 171
                {
                    this.MapProgressRing = (global::Windows.UI.Xaml.Controls.ProgressRing)(target);
                }
                break;
            case 17: // Views\MapPage.xaml line 174
                {
                    this.MapProgressRingAcquiringGPSLabel = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 18: // Views\MapPage.xaml line 124
                {
                    this.myMapView = (global::Esri.ArcGISRuntime.UI.Controls.MapView)(target);
                }
                break;
            case 19: // Views\MapPage.xaml line 151
                {
                    this.MapScaleInfo = (global::Windows.UI.Xaml.Controls.Border)(target);
                }
                break;
            case 21: // Views\MapPage.xaml line 127
                {
                    this.MapCoordinateInfo = (global::Windows.UI.Xaml.Controls.Border)(target);
                }
                break;
            case 22: // Views\MapPage.xaml line 139
                {
                    this.MapCoordinateInfo2 = (global::Windows.UI.Xaml.Controls.Border)(target);
                }
                break;
            case 23: // Views\MapPage.xaml line 141
                {
                    this.MapCoordinateAccuracyText = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 25: // Views\MapPage.xaml line 129
                {
                    this.MapCoordinateText = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 29: // Views\MapPage.xaml line 77
                {
                    this.MapPageAddMap = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)this.MapPageAddMap).Tapped += this.MapPageAddMap_Tapped;
                }
                break;
            case 30: // Views\MapPage.xaml line 78
                {
                    this.AddMaps = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                }
                break;
            case 31: // Views\MapPage.xaml line 100
                {
                    this.MapInfo = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)this.MapInfo).Click += this.MapInfoButtonClicked;
                }
                break;
            case 32: // Views\MapPage.xaml line 101
                {
                    this.GPSMode = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)this.GPSMode).Tapped += this.GPSMode_TappedAsync;
                }
                break;
            case 33: // Views\MapPage.xaml line 103
                {
                    this.GPSModeIcon = (global::Windows.UI.Xaml.Controls.SymbolIcon)(target);
                }
                break;
            case 34: // Views\MapPage.xaml line 84
                {
                    this.mapPageLayerFlyout = (global::Windows.UI.Xaml.Controls.Flyout)(target);
                }
                break;
            case 35: // Views\MapPage.xaml line 86
                {
                    this.MapLayerListView = (global::Windows.UI.Xaml.Controls.ListView)(target);
                }
                break;
            case 36: // Views\MapPage.xaml line 63
                {
                    this.MapPageStationCommandButton = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                }
                break;
            case 37: // Views\MapPage.xaml line 64
                {
                    this.MapPageSampleCommandButton = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                }
                break;
            case 38: // Views\MapPage.xaml line 65
                {
                    this.MapPagePhotoCommandButton = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                }
                break;
            case 39: // Views\MapPage.xaml line 66
                {
                    this.MapPageStrucCommandButton = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                }
                break;
            case 40: // Views\MapPage.xaml line 67
                {
                    this.AddWaypoint = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                }
                break;
            case 41: // Views\MapPage.xaml line 70
                {
                    this.MapPageLocationCommandButton = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\MapPage.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    MapPage_obj1_Bindings bindings = new MapPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            case 8: // Views\MapPage.xaml line 34
                {                    
                    global::Windows.UI.Xaml.Controls.RelativePanel element8 = (global::Windows.UI.Xaml.Controls.RelativePanel)target;
                    MapPage_obj8_Bindings bindings = new MapPage_obj8_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element8.DataContext);
                    element8.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element8, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element8, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

