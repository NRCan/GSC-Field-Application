#pragma checksum "C:\Users\Gab\Documents\DEV\gsc-field-application\GSCFieldApp\Views\SettingsPage.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "AAFF9A98D13DCD23DCA887D20704DD21"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GSCFieldApp.Views
{
    partial class SettingsPage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Template10_Controls_PageHeader_Frame(global::Template10.Controls.PageHeader obj, global::Windows.UI.Xaml.Controls.Frame value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Controls.Frame) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Controls.Frame), targetNullValue);
                }
                obj.Frame = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Pivot_SelectedIndex(global::Windows.UI.Xaml.Controls.Pivot obj, global::System.Int32 value)
            {
                obj.SelectedIndex = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(global::Windows.UI.Xaml.Controls.ToggleSwitch obj, global::System.Boolean value)
            {
                obj.IsOn = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class SettingsPage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ISettingsPage_Bindings
        {
            private global::GSCFieldApp.Views.SettingsPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Template10.Controls.PageHeader obj7;
            private global::Windows.UI.Xaml.Controls.Pivot obj8;
            private global::Windows.UI.Xaml.Controls.GridView obj13;
            private global::Windows.UI.Xaml.Controls.ToggleSwitch obj41;
            private global::Windows.UI.Xaml.Controls.ToggleSwitch obj42;
            private global::Windows.UI.Xaml.Controls.ToggleSwitch obj43;
            private global::Windows.UI.Xaml.Controls.ToggleSwitch obj44;
            private global::Windows.UI.Xaml.Controls.ToggleSwitch obj45;
            private global::Windows.UI.Xaml.Controls.ToggleSwitch obj46;
            private global::Windows.UI.Xaml.Controls.ToggleSwitch obj47;
            private global::Windows.UI.Xaml.Controls.ToggleSwitch obj48;
            private global::Windows.UI.Xaml.Controls.ToggleSwitch obj49;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj50;

            private SettingsPage_obj1_BindingsTracking bindingsTracking;

            public SettingsPage_obj1_Bindings()
            {
                this.bindingsTracking = new SettingsPage_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 7: // Views\SettingsPage.xaml line 50
                        this.obj7 = (global::Template10.Controls.PageHeader)target;
                        break;
                    case 8: // Views\SettingsPage.xaml line 63
                        this.obj8 = (global::Windows.UI.Xaml.Controls.Pivot)target;
                        ((global::Windows.UI.Xaml.Controls.Pivot)target).SelectionChanged += (global::System.Object sender, global::Windows.UI.Xaml.Controls.SelectionChangedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.MyPivot_SelectionChanged(sender, e);
                        };
                        (this.obj8).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Pivot.SelectedIndexProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.SelectedPivotIndex = this.obj8.SelectedIndex;
                            }
                        });
                        break;
                    case 13: // Views\SettingsPage.xaml line 227
                        this.obj13 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        ((global::Windows.UI.Xaml.Controls.GridView)target).DoubleTapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.Image_DoubleTapped(sender, e);
                        };
                        break;
                    case 41: // Views\SettingsPage.xaml line 117
                        this.obj41 = (global::Windows.UI.Xaml.Controls.ToggleSwitch)target;
                        (this.obj41).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.PflowToggle = this.obj41.IsOn;
                            }
                        });
                        break;
                    case 42: // Views\SettingsPage.xaml line 119
                        this.obj42 = (global::Windows.UI.Xaml.Controls.ToggleSwitch)target;
                        (this.obj42).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.SurficialToggle = this.obj42.IsOn;
                            }
                        });
                        break;
                    case 43: // Views\SettingsPage.xaml line 103
                        this.obj43 = (global::Windows.UI.Xaml.Controls.ToggleSwitch)target;
                        (this.obj43).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MineralToggle = this.obj43.IsOn;
                            }
                        });
                        break;
                    case 44: // Views\SettingsPage.xaml line 105
                        this.obj44 = (global::Windows.UI.Xaml.Controls.ToggleSwitch)target;
                        (this.obj44).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.MAToggle = this.obj44.IsOn;
                            }
                        });
                        break;
                    case 45: // Views\SettingsPage.xaml line 108
                        this.obj45 = (global::Windows.UI.Xaml.Controls.ToggleSwitch)target;
                        (this.obj45).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.StructureToggle = this.obj45.IsOn;
                            }
                        });
                        break;
                    case 46: // Views\SettingsPage.xaml line 87
                        this.obj46 = (global::Windows.UI.Xaml.Controls.ToggleSwitch)target;
                        ((global::Windows.UI.Xaml.Controls.ToggleSwitch)target).Toggled += (global::System.Object sender, global::Windows.UI.Xaml.RoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.ToggleSwitch_Toggled(sender, e);
                        };
                        (this.obj46).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.EarthToggle = this.obj46.IsOn;
                            }
                        });
                        break;
                    case 47: // Views\SettingsPage.xaml line 90
                        this.obj47 = (global::Windows.UI.Xaml.Controls.ToggleSwitch)target;
                        (this.obj47).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.FossilToggle = this.obj47.IsOn;
                            }
                        });
                        break;
                    case 48: // Views\SettingsPage.xaml line 93
                        this.obj48 = (global::Windows.UI.Xaml.Controls.ToggleSwitch)target;
                        (this.obj48).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.PhotoToggle = this.obj48.IsOn;
                            }
                        });
                        break;
                    case 49: // Views\SettingsPage.xaml line 96
                        this.obj49 = (global::Windows.UI.Xaml.Controls.ToggleSwitch)target;
                        (this.obj49).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.SampleToggle = this.obj49.IsOn;
                            }
                        });
                        break;
                    case 50: // Views\SettingsPage.xaml line 56
                        this.obj50 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        ((global::Windows.UI.Xaml.Controls.AppBarButton)target).Tapped += (global::System.Object sender, global::Windows.UI.Xaml.Input.TappedRoutedEventArgs e) =>
                        {
                            this.dataRoot.ViewModel.settingLoadPicklistButton_TappedAsync(sender, e);
                        };
                        (this.obj50).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.VisibilityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.ViewModel.LoadPicklistVisibility = this.obj50.Visibility;
                            }
                        });
                        break;
                    default:
                        break;
                }
            }

            // ISettingsPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::GSCFieldApp.Views.SettingsPage)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::GSCFieldApp.Views.SettingsPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_Frame(obj.Frame, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_Frame(global::Windows.UI.Xaml.Controls.Frame obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\SettingsPage.xaml line 50
                    XamlBindingSetters.Set_Template10_Controls_PageHeader_Frame(this.obj7, obj, null);
                }
            }
            private void Update_ViewModel(global::GSCFieldApp.ViewModels.SettingsPageViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_SelectedPivotIndex(obj.SelectedPivotIndex, phase);
                        this.Update_ViewModel_PflowToggle(obj.PflowToggle, phase);
                        this.Update_ViewModel_SurficialToggle(obj.SurficialToggle, phase);
                        this.Update_ViewModel_MineralToggle(obj.MineralToggle, phase);
                        this.Update_ViewModel_MAToggle(obj.MAToggle, phase);
                        this.Update_ViewModel_StructureToggle(obj.StructureToggle, phase);
                        this.Update_ViewModel_EarthToggle(obj.EarthToggle, phase);
                        this.Update_ViewModel_FossilToggle(obj.FossilToggle, phase);
                        this.Update_ViewModel_PhotoToggle(obj.PhotoToggle, phase);
                        this.Update_ViewModel_SampleToggle(obj.SampleToggle, phase);
                        this.Update_ViewModel_LoadPicklistVisibility(obj.LoadPicklistVisibility, phase);
                    }
                }
            }
            private void Update_ViewModel_SelectedPivotIndex(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SettingsPage.xaml line 63
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Pivot_SelectedIndex(this.obj8, obj);
                }
            }
            private void Update_ViewModel_PflowToggle(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SettingsPage.xaml line 117
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this.obj41, obj);
                }
            }
            private void Update_ViewModel_SurficialToggle(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SettingsPage.xaml line 119
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this.obj42, obj);
                }
            }
            private void Update_ViewModel_MineralToggle(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SettingsPage.xaml line 103
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this.obj43, obj);
                }
            }
            private void Update_ViewModel_MAToggle(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SettingsPage.xaml line 105
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this.obj44, obj);
                }
            }
            private void Update_ViewModel_StructureToggle(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SettingsPage.xaml line 108
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this.obj45, obj);
                }
            }
            private void Update_ViewModel_EarthToggle(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SettingsPage.xaml line 87
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this.obj46, obj);
                }
            }
            private void Update_ViewModel_FossilToggle(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SettingsPage.xaml line 90
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this.obj47, obj);
                }
            }
            private void Update_ViewModel_PhotoToggle(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SettingsPage.xaml line 93
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this.obj48, obj);
                }
            }
            private void Update_ViewModel_SampleToggle(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SettingsPage.xaml line 96
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this.obj49, obj);
                }
            }
            private void Update_ViewModel_LoadPicklistVisibility(global::Windows.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\SettingsPage.xaml line 56
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj50, obj);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class SettingsPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<SettingsPage_obj1_Bindings> weakRefToBindingObj; 

                public SettingsPage_obj1_BindingsTracking(SettingsPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<SettingsPage_obj1_Bindings>(obj);
                }

                public SettingsPage_obj1_Bindings TryGetBindingObject()
                {
                    SettingsPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SettingsPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::GSCFieldApp.ViewModels.SettingsPageViewModel obj = sender as global::GSCFieldApp.ViewModels.SettingsPageViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_SelectedPivotIndex(obj.SelectedPivotIndex, DATA_CHANGED);
                                bindings.Update_ViewModel_PflowToggle(obj.PflowToggle, DATA_CHANGED);
                                bindings.Update_ViewModel_SurficialToggle(obj.SurficialToggle, DATA_CHANGED);
                                bindings.Update_ViewModel_MineralToggle(obj.MineralToggle, DATA_CHANGED);
                                bindings.Update_ViewModel_MAToggle(obj.MAToggle, DATA_CHANGED);
                                bindings.Update_ViewModel_StructureToggle(obj.StructureToggle, DATA_CHANGED);
                                bindings.Update_ViewModel_EarthToggle(obj.EarthToggle, DATA_CHANGED);
                                bindings.Update_ViewModel_FossilToggle(obj.FossilToggle, DATA_CHANGED);
                                bindings.Update_ViewModel_PhotoToggle(obj.PhotoToggle, DATA_CHANGED);
                                bindings.Update_ViewModel_SampleToggle(obj.SampleToggle, DATA_CHANGED);
                                bindings.Update_ViewModel_LoadPicklistVisibility(obj.LoadPicklistVisibility, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "SelectedPivotIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedPivotIndex(obj.SelectedPivotIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PflowToggle":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_PflowToggle(obj.PflowToggle, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SurficialToggle":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SurficialToggle(obj.SurficialToggle, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MineralToggle":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_MineralToggle(obj.MineralToggle, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MAToggle":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_MAToggle(obj.MAToggle, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "StructureToggle":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_StructureToggle(obj.StructureToggle, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EarthToggle":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_EarthToggle(obj.EarthToggle, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FossilToggle":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_FossilToggle(obj.FossilToggle, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PhotoToggle":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_PhotoToggle(obj.PhotoToggle, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SampleToggle":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SampleToggle(obj.SampleToggle, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "LoadPicklistVisibility":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_LoadPicklistVisibility(obj.LoadPicklistVisibility, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::GSCFieldApp.ViewModels.SettingsPageViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::GSCFieldApp.ViewModels.SettingsPageViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // Views\SettingsPage.xaml line 14
                {
                    this.ViewModel = (global::GSCFieldApp.ViewModels.SettingsPageViewModel)(target);
                }
                break;
            case 3: // Views\SettingsPage.xaml line 21
                {
                    this.AdaptiveVisualStateGroup = (global::Windows.UI.Xaml.VisualStateGroup)(target);
                }
                break;
            case 4: // Views\SettingsPage.xaml line 22
                {
                    this.VisualStateNarrow = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 5: // Views\SettingsPage.xaml line 30
                {
                    this.VisualStateNormal = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 6: // Views\SettingsPage.xaml line 38
                {
                    this.VisualStateWide = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 7: // Views\SettingsPage.xaml line 50
                {
                    this.pageHeader = (global::Template10.Controls.PageHeader)(target);
                }
                break;
            case 8: // Views\SettingsPage.xaml line 63
                {
                    this.settingPivot = (global::Windows.UI.Xaml.Controls.Pivot)(target);
                }
                break;
            case 9: // Views\SettingsPage.xaml line 70
                {
                    this.settingPivotNotes = (global::Windows.UI.Xaml.Controls.PivotItem)(target);
                }
                break;
            case 10: // Views\SettingsPage.xaml line 132
                {
                    this.settingPivotPicklist = (global::Windows.UI.Xaml.Controls.PivotItem)(target);
                }
                break;
            case 11: // Views\SettingsPage.xaml line 196
                {
                    this.settingPivotThemes = (global::Windows.UI.Xaml.Controls.PivotItem)(target);
                }
                break;
            case 12: // Views\SettingsPage.xaml line 225
                {
                    this.settingPivotAbout = (global::Windows.UI.Xaml.Controls.PivotItem)(target);
                }
                break;
            case 13: // Views\SettingsPage.xaml line 227
                {
                    this.LogoImage = (global::Windows.UI.Xaml.Controls.GridView)(target);
                }
                break;
            case 14: // Views\SettingsPage.xaml line 241
                {
                    this.DisplayNameTextBlock = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 15: // Views\SettingsPage.xaml line 247
                {
                    this.PublisherTextBlock = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 16: // Views\SettingsPage.xaml line 252
                {
                    this.VersionTextBlock = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 17: // Views\SettingsPage.xaml line 260
                {
                    this.ContactTextBlock = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 18: // Views\SettingsPage.xaml line 265
                {
                    this.ContactInfoTextBlock = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 19: // Views\SettingsPage.xaml line 271
                {
                    this.TeamTextBlock = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 20: // Views\SettingsPage.xaml line 276
                {
                    this.TeamInfoTextBlock = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                    ((global::Windows.UI.Xaml.Controls.TextBlock)this.TeamInfoTextBlock).Holding += this.TeamInfoTextBlock_Holding;
                }
                break;
            case 21: // Views\SettingsPage.xaml line 281
                {
                    this.AboutTeamPicture = (global::Windows.UI.Xaml.Controls.Image)(target);
                    ((global::Windows.UI.Xaml.Controls.Image)this.AboutTeamPicture).Tapped += this.AboutTeamPicture_Tapped;
                }
                break;
            case 22: // Views\SettingsPage.xaml line 199
                {
                    this.ThemeGridView_01 = (global::Windows.UI.Xaml.Controls.GridView)(target);
                }
                break;
            case 23: // Views\SettingsPage.xaml line 210
                {
                    this.ThemeGridView_02 = (global::Windows.UI.Xaml.Controls.GridView)(target);
                }
                break;
            case 24: // Views\SettingsPage.xaml line 214
                {
                    this.UsePhotoModeDialogToggleSwitch = (global::Windows.UI.Xaml.Controls.ToggleSwitch)(target);
                }
                break;
            case 25: // Views\SettingsPage.xaml line 203
                {
                    this.UseLightThemeToggleSwitch = (global::Windows.UI.Xaml.Controls.ToggleSwitch)(target);
                }
                break;
            case 26: // Views\SettingsPage.xaml line 137
                {
                    this.StationThemeList = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)this.StationThemeList).Tapped += this.ThemeList_Tapped;
                }
                break;
            case 27: // Views\SettingsPage.xaml line 142
                {
                    this.Earth_materialThemeList = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)this.Earth_materialThemeList).Tapped += this.ThemeList_Tapped;
                }
                break;
            case 28: // Views\SettingsPage.xaml line 148
                {
                    this.SampleAThemeList = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)this.SampleAThemeList).Tapped += this.ThemeList_Tapped;
                }
                break;
            case 29: // Views\SettingsPage.xaml line 153
                {
                    this.StructureThemeList = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)this.StructureThemeList).Tapped += this.ThemeList_Tapped;
                }
                break;
            case 30: // Views\SettingsPage.xaml line 158
                {
                    this.FossilThemeList = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)this.FossilThemeList).Tapped += this.ThemeList_Tapped;
                }
                break;
            case 31: // Views\SettingsPage.xaml line 163
                {
                    this.Paleo_flowThemeList = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)this.Paleo_flowThemeList).Tapped += this.ThemeList_Tapped;
                }
                break;
            case 32: // Views\SettingsPage.xaml line 169
                {
                    this.MineralThemeList = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)this.MineralThemeList).Tapped += this.ThemeList_Tapped;
                }
                break;
            case 33: // Views\SettingsPage.xaml line 175
                {
                    this.AlterationThemeList = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)this.AlterationThemeList).Tapped += this.ThemeList_Tapped;
                }
                break;
            case 34: // Views\SettingsPage.xaml line 181
                {
                    this.DocumentThemeList = (global::Windows.UI.Xaml.Controls.Button)(target);
                    ((global::Windows.UI.Xaml.Controls.Button)this.DocumentThemeList).Tapped += this.ThemeList_Tapped;
                }
                break;
            case 35: // Views\SettingsPage.xaml line 73
                {
                    this.TableVisibilityRelPanel_00 = (global::Windows.UI.Xaml.Controls.RelativePanel)(target);
                }
                break;
            case 36: // Views\SettingsPage.xaml line 75
                {
                    this.TableVisibilityRelPanel_01 = (global::Windows.UI.Xaml.Controls.RelativePanel)(target);
                }
                break;
            case 37: // Views\SettingsPage.xaml line 78
                {
                    this.NoteTableVisibilityTextBlock = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 38: // Views\SettingsPage.xaml line 83
                {
                    this.CommonTogglesGridView = (global::Windows.UI.Xaml.Controls.GridView)(target);
                }
                break;
            case 39: // Views\SettingsPage.xaml line 100
                {
                    this.BedrockTogglesGridView = (global::Windows.UI.Xaml.Controls.GridView)(target);
                }
                break;
            case 40: // Views\SettingsPage.xaml line 113
                {
                    this.SurficialTogglesGridView = (global::Windows.UI.Xaml.Controls.GridView)(target);
                }
                break;
            case 41: // Views\SettingsPage.xaml line 117
                {
                    this.PaleoflowToggleSwitch = (global::Windows.UI.Xaml.Controls.ToggleSwitch)(target);
                }
                break;
            case 42: // Views\SettingsPage.xaml line 119
                {
                    this.SurficialToggleSwitch = (global::Windows.UI.Xaml.Controls.ToggleSwitch)(target);
                }
                break;
            case 43: // Views\SettingsPage.xaml line 103
                {
                    this.MineralToggleSwitch = (global::Windows.UI.Xaml.Controls.ToggleSwitch)(target);
                }
                break;
            case 44: // Views\SettingsPage.xaml line 105
                {
                    this.MineralAlterationToggleSwitch = (global::Windows.UI.Xaml.Controls.ToggleSwitch)(target);
                }
                break;
            case 45: // Views\SettingsPage.xaml line 108
                {
                    this.StructureToggleSwitch = (global::Windows.UI.Xaml.Controls.ToggleSwitch)(target);
                }
                break;
            case 46: // Views\SettingsPage.xaml line 87
                {
                    this.EarthToggleSwitch = (global::Windows.UI.Xaml.Controls.ToggleSwitch)(target);
                }
                break;
            case 47: // Views\SettingsPage.xaml line 90
                {
                    this.FossilToggleSwitch = (global::Windows.UI.Xaml.Controls.ToggleSwitch)(target);
                }
                break;
            case 48: // Views\SettingsPage.xaml line 93
                {
                    this.PhotoToggleSwitch = (global::Windows.UI.Xaml.Controls.ToggleSwitch)(target);
                }
                break;
            case 49: // Views\SettingsPage.xaml line 96
                {
                    this.SampleToggleSwitch = (global::Windows.UI.Xaml.Controls.ToggleSwitch)(target);
                }
                break;
            case 50: // Views\SettingsPage.xaml line 56
                {
                    this.settingLoadPicklistButton = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\SettingsPage.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    SettingsPage_obj1_Bindings bindings = new SettingsPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            }
            return returnValue;
        }
    }
}

